<?php

namespace App\Model\DataArk;

use function App\getUserIdMod;
use App\Lib\Redis;
use App\Model\Ads\VipUserBigData;
use App\Model\ChannelTargetsMySQLModel;
use App\Model\SiteRateMySQLModel;
use App\Model\User\UserAdminRolePrivModel;
use App\Model\UserAdminModel;
use App\Model\AbstractPrestoModel;
use Captainbi\Hyperf\Util\Log;
use Hyperf\DbConnection\Db;
use Hyperf\Logger\LoggerFactory;
use Hyperf\Utils\ApplicationContext;
use App\Service\CommonService;
use Hyperf\Di\Annotation\Inject;
use function App\getUserInfo;
use Hyperf\Utils\Exception\ParallelExecutionException;
use Hyperf\Utils\Parallel;
use function Swoole\Coroutine\Http\get;

class AmazonGoodsFinanceReportByOrderPrestoModel extends AbstractPrestoModel
{
    /**
     * @Inject()
     * @var CommonService
     */
    protected $commonService;

    protected $table = 'table_amazon_goods_finance_report_by_order';

    //按指标展现时 自定义算法和指标
    protected $customTargetsList;

    protected $tax_field ;
    //按时间展现时 筛选指标
    protected $timeCustomTarget;
    //自定义指标是否有店铺维度
    protected $countDimensionChannel = false;

    protected $is_change_mysql = false;

    //商品维度 分摊 f_monthly_profit_report_by_sku_001字段
    protected $default_goods_split_fields = [
        'goods_promote_coupon' => 'reserved_field39', //coupon费用
        'goods_other_review_enrollment_fee' => 'reserved_field38', //早期评论者计划费用
        'goods_promote_run_lightning_deal_fee' => 'reserved_field37', //RunLightningDealFee费用
    ];

    //变量参数组
    protected $ark_custom_params = [
        ":DAY" => '天数'
    ];

    //fba字段
    protected $fba_fields_arr = [
        //商品
        'fba_sales_stock',
        'fba_sales_day',
        'fba_reserve_stock',
        'fba_recommended_replenishment',
        'fba_special_purpose',
        'purchase_purchase_cost_unit',
        //店铺
        'fba_goods_value',
        'fba_stock',
        'fba_need_replenish',
        'fba_predundancy_number',
        //erp字段
        'ark_erp_purchasing_num',
        'ark_erp_send_num',
        'ark_erp_good_num',
        'ark_erp_bad_num',
        'ark_erp_lock_num',
        'ark_erp_goods_cost_total'
    ];

    protected $lastTargets = [];
    protected $finance_index_percentage_arr = [];
    protected $add_percentage_arr = [];

    /**
     * 是否有e_erp_storage_warehouse_isku 指标
     * @var bool
     */
    protected $haveErpIskuFields = false;

    /**
     * 是否有e_erp_storage_inventory_warehouse_report 指标
     * @var bool
     */
    protected $haveErpReportFields = false;

    /**
     * 是否有fba指标
     * @var bool
     */
    protected $haveFbaFields = false;

    /**
     * where_detail里有fba指标（含fba指标的自定义公式）筛选
     * @var array
     */
    protected $fbaWhereDetail = array();

    /**
     * sort_target里有fba指标（含fba指标的自定义公式）筛选
     * @var array
     */
    protected $fbaSort = array();

    protected  $amzon_site = array(
        1 => array("currency_code" => "USD", "currency_symbol" => "$", "code" => "US"),
        2 => array("currency_code" => "CAD", "currency_symbol" => "C$", "code" => "CA"),
        3 => array("currency_code" => "MXN", "currency_symbol" => "Mex$", "code" => "MX"),
        4 => array("currency_code" => "EUR", "currency_symbol" => "€", "code" => "DE"),
        5 => array("currency_code" => "EUR", "currency_symbol" => "€", "code" => "ES"),
        6 => array("currency_code" => "EUR", "currency_symbol" => "€", "code" => "FR"),
        7 => array("currency_code" => "INR", "currency_symbol" => "₹", "code" => "IN"),
        8 => array("currency_code" => "EUR", "currency_symbol" => "€", "code" => "IT"),
        9 => array("currency_code" => "GBP", "currency_symbol" => "£", "code" => "UK"),
        10 => array("currency_code" => "CNY", "currency_symbol" => "￥", "code" => "CN"),
        11 => array("currency_code" => "JPY", "currency_symbol" => "¥", "code" => "JP"),
        12 => array("currency_code" => "AUD", "currency_symbol" => "A$", "code" => "AU"),
        13 => array("currency_code" => "BRL", "currency_symbol" => "R$", "code" => "BR"),
        14 => array("currency_code" => "TRY", "currency_symbol" => "₺", "code" => "TR"),
        15 => array("currency_code" => "AED", "currency_symbol" => "AED", "code" => "AE"),
        16 => array("currency_code" => "EUR", "currency_symbol" => "€", "code" => "NL") ,
        17 => array("currency_code" => "SAR", "currency_symbol" => "SAR", "code" => "SA"),
        18 => array("currency_code" => "SGD", "currency_symbol" => "S$", "code" => "SG")
    );

    protected  $rate_formula = array(
        'amazon_fee_rate' => [
            'formula' => '{amazon_fee}/{sale_sales_quota}',
            'formula_json' => '["amazon_fee","/","sale_sales_quota"]',
            'formula_fields' => ['amazon_fee', 'sale_sales_quota'],
        ],//亚马逊费用占比=亚马逊费用/商品销售额
        'purchase_logistics_cost_rate' => [
            'formula' => '({purchase_logistics_purchase_cost}+{purchase_logistics_logistics_cost})/{sale_sales_quota}',
            'formula_json' => '["(","purchase_logistics_purchase_cost","+","purchase_logistics_logistics_cost",")","/","sale_sales_quota"]',
            'formula_fields' => ['purchase_logistics_purchase_cost', 'purchase_logistics_logistics_cost', 'sale_sales_quota'],
        ],//成本/物流费用占比=（采购成本+物流/头程）/商品销售额
        'operate_fee_rate' => [
            'formula' => '{operate_fee}/{sale_sales_quota}',
            'formula_json' => '["operate_fee","/","sale_sales_quota"]',
            'formula_fields' => ['operate_fee', 'sale_sales_quota'],
        ],//运营费用占比=运营费用/商品销售额
        'evaluation_fee_rate' => [
            'formula' => '{evaluation_fee}/{sale_sales_quota}',
            'formula_json' => '["evaluation_fee","/","sale_sales_quota"]',
            'formula_fields' => ['evaluation_fee', 'sale_sales_quota'],
        ],//测评费用占比=测评费用/商品销售额
        'cpc_turnover_rate' => [
            'formula' => '{cpc_turnover}/{sale_sales_quota}',
            'formula_json' => '["cpc_turnover","/","sale_sales_quota"]',
            'formula_fields' => ['cpc_turnover', 'sale_sales_quota'],
        ],//广告销售额占比=广告销售额/商品销售额
        'cpc_direct_sales_volume_rate' => [
            'formula' => '{cpc_direct_sales_volume}/{sale_sales_volume}',
            'formula_json' => '["cpc_direct_sales_volume","/","sale_sales_volume"]',
            'formula_fields' => ['cpc_direct_sales_volume', 'sale_sales_volume'],
        ],//CPC直接订单量占比=直接订单量/销量
        'cpc_indirect_sales_volume_rate' => [
            'formula' => '{cpc_indirect_sales_volume}/{sale_sales_volume}',
            'formula_json' => '["cpc_indirect_sales_volume","/","sale_sales_volume"]',
            'formula_fields' => ['cpc_indirect_sales_volume', 'sale_sales_volume'],
        ],//CPC间接销量占比=间接订单量/销量
        'cpc_order_rate' => [
            'formula' => '{cpc_order_number}/{sale_sales_volume}',
            'formula_json' => '["cpc_order_number","/","sale_sales_volume"]',
            'formula_fields' => ['cpc_order_number', 'sale_sales_volume'],
        ],//广告订单占比=订单量/销售量
        'sale_refund_rate' => [
            'formula' => '{sale_return_goods_number}/{sale_sales_volume}',
            'formula_json' => '["sale_return_goods_number","/","sale_sales_volume"]',
            'formula_fields' => ['sale_return_goods_number', 'sale_sales_volume'],
        ],//退款率=退款量/销售量
        'cpc_click_rate' => [
            'formula' => '{cpc_click_number}/{cpc_exposure}',
            'formula_json' => '["cpc_click_number","/","cpc_exposure"]',
            'formula_fields' => ['cpc_click_number', 'cpc_exposure'],
        ],//点击率（CTR）=点击次数/曝光量
        'cost_profit_profit_rate' => [
            'formula' => '{cost_profit_profit}/{sale_sales_quota}',
            'formula_json' => '["cost_profit_profit","/","sale_sales_quota"]',
            'formula_fields' => ['cost_profit_profit', 'sale_sales_quota'],
        ],//毛利率=毛利润/商品销售额
        'goods_conversion_rate' => [
            'formula' => '{quantity_of_goods_ordered}/{goods_visitors}',
            'formula_json' => '["quantity_of_goods_ordered","/","goods_visitors"]',
            'formula_fields' => ['quantity_of_goods_ordered', 'goods_visitors'],
        ],//订单商品数量转化率=已订购商品数量/买家访问次数
        'goods_buybox_rate' => [
            'formula' => '{buy_button_winning_num}/{goods_views_number}',
            'formula_json' => '["buy_button_winning_num","/","goods_views_number"]',
            'formula_fields' => ['buy_button_winning_num', 'goods_views_number'],
        ],//购买按钮赢得率
        'cpc_click_conversion_rate' => [
            'formula' => '{cpc_order_number}/{cpc_click_number}',
            'formula_json' => '["cpc_order_number","/","cpc_click_number"]',
            'formula_fields' => ['cpc_order_number', 'cpc_click_number'],
        ],//cpc 点击转化率
        'cpc_acos' => [
            'formula' => '{cpc_cost}/{cpc_turnover}',
            'formula_json' => '["cpc_cost","/","cpc_turnover"]',
            'formula_fields' => ['cpc_cost', 'cpc_turnover'],
        ],//广告投入产出比（ACOS）
        'goods_views_rate' => [
            'formula' => '{goods_views_number}/{total_views_number}',
            'formula_json' => '["goods_views_number","/","total_views_number"]',
            'formula_fields' => ['goods_views_number', 'total_views_number'],
        ],//页面浏览次数百分比
        'goods_buyer_visit_rate' => [
            'formula' => '{goods_visitors}/{total_user_sessions}',
            'formula_json' => '["goods_visitors","/","total_user_sessions"]',
            'formula_fields' => ['goods_visitors', 'total_user_sessions'],
        ],//买家访问次数百分比
        'cpc_cost_rate' => [
            'formula' => '{cpc_cost}/{sale_sales_quota}',
            'formula_json' => '["cpc_cost","/","sale_sales_quota"]',
            'formula_fields' => ['cpc_cost', 'sale_sales_quota'],
        ],//花费占比
        'erp_period_current_stock_rate' => [
            'formula' => '({erp_period_current_out_cost}*2)/({erp_period_start_goods_cost_total_begin}+{erp_period_end_goods_cost_total_end})',
            'formula_json' => '["(","erp_period_current_out_cost","*","2",")","/","(","erp_period_start_goods_cost_total_begin","+","erp_period_end_goods_cost_total_end",")"]',
            'formula_fields' => ['erp_period_current_out_cost', 'erp_period_start_goods_cost_total_begin', 'erp_period_end_goods_cost_total_end'],
        ],//erp本期库存周转率
    );

    protected  $total_views_numbers = [
        'total_views_number' => 1
    ];
    protected  $total_user_sessions = [
        'total_user_sessions' => 1
    ];

    private $dws_user_id_mod = 0;
    private $channel_user_id_mod = 0;

    protected $operate_channel_amazon_goods_fee = " +report.bychannel_reserved_field44 + report.bychannel_reserved_field43 ";
    protected $operate_channel_amazon_other_fee = " +report.bychannel_reserved_field43 ";
    protected $operate_channel_amazon_order_fee = " +report.bychannel_reserved_field44 ";
    protected $operate_profit = " +report.bychannel_reserved_field44 + report.bychannel_reserved_field43 ";

    protected $time_periods_field = [
        "key"           => '',
        "molecule"      => '',
        "denominator"   => '',
    ];

    private $cost_logistics_rate = 1;

    /**
     * function getCompareDatas
     * desc: 获取比较数据字段 的 字段名， 条件 ， 连表条件
     * param $datas
     * param int $type 维度类型 0- 店铺维度 1-商品维度 2-运营人员维度
     * param int $exchangeCode 汇率信息
     * return array
     * author: LWZ
     * editTime: 2021-09-26 13:48
     */
    public function getCompareDatas($datas , $type = 0 ,$exchangeCode = 1 , $day_param = 1 , $currencyInfo = array()){
        if(empty($datas['compare_data'])){
            return [] ;
        }
        $notime_where = empty($datas['notime_where']) ? '' :  $datas['notime_where'];
        if($type == '1'){
            $mod_where = "report.user_id={$datas['user_id']} AND amazon_goods.goods_user_id={$datas['user_id']} AND report.user_id_mod = " . $this->dws_user_id_mod . " and amazon_goods.goods_user_id_mod=" . ($datas['user_id'] % 20) . " AND report.channel_id IN ({$datas['operation_channel_ids']}) AND amazon_goods.goods_channel_id IN ({$datas['operation_channel_ids']})";
            $notime_where =  $mod_where . " AND report.available = 1 " .  (empty($notime_where) ? "" : " AND " . $notime_where) ;
        }else if($type == '0'){
            $mod_where = "report.user_id={$datas['user_id']} AND amazon_goods.goods_user_id={$datas['user_id']} AND report.user_id_mod = " . $this->dws_user_id_mod . " AND report.channel_id IN ({$datas['operation_channel_ids']}) AND amazon_goods.goods_channel_id IN ({$datas['operation_channel_ids']})";
            $notime_where =  $mod_where . " AND report.available = 1 " .  (empty($notime_where) ? "" : " AND " . $notime_where) ;
        }
        //对比数据连表查询时的ON 条件
        $compare_on = array() ;
        if (in_array($datas['count_dimension'], ['parent_asin', 'asin', 'sku'])) {
            if($datas['is_distinct_channel'] == 1){ //有区分店铺
                $compare_on = [ $datas['count_dimension'] , 'channel_id'] ;
            }else{  //不区分店铺
                $compare_on = [ $datas['count_dimension']] ;
            }
            $notime_where .= " AND report.goods_" . $datas['count_dimension'] . " != '' ";
        } else if ($datas['count_dimension'] == 'isku') {
            $compare_on = ['isku_id'] ;
            $notime_where .= " AND report.goods_isku_id > 0";
        } else if ($datas['count_dimension'] == 'group') {
            $compare_on = ['group_id'] ;
            $notime_where .= " AND report.goods_group_id > 0";
        } else if ($datas['count_dimension'] == 'class1') {
            $compare_on = ['class1' ,'site_id'] ;
            $notime_where .= " AND report.goods_product_category_name_1 != ''";
        } else if($datas['count_dimension'] == 'tags'){
            $compare_on = ['tags_id'] ;
            $notime_where.= " AND CAST(tags_rel.tags_id  as bigint) > 0";
        } else if($datas['count_dimension'] == 'head_id'){ //按负责人维度统计
            $compare_on = ['head_id'] ;
            $notime_where.= " AND report.isku_head_id > 0";
        }else if($datas['count_dimension'] == 'developer_id'){ //按开发人维度统计
            $compare_on = ['developer_id'] ;
            $notime_where.= " AND report.isku_developer_id > 0";
        } else if($datas['count_dimension'] == 'all_goods'){ //按全部商品维度统计
            $compare_on = ['user_id'] ;
        }else if($datas['count_dimension'] == 'goods_channel'){  //统计商品数据里的店铺维度
            $compare_on = ['channel_id'] ;
        }else if ($datas['count_dimension'] == 'channel_id') {
            $compare_on = ['channel_id'] ;
        } else if ($datas['count_dimension'] == 'site_id') {
            $compare_on = ['site_id'] ;
        } else if ($datas['count_dimension'] == 'site_group') {
            $compare_on = ['site_group'] ;
        } else if ($datas['count_dimension'] == 'department') {
            $compare_on = ['user_department_id'] ;
            $notime_where .= " AND dc.user_department_id > 0";
        }else if($datas['count_dimension'] == 'admin_id'){
            $compare_on = ['admin_id'] ;
            $notime_where .= " AND uc.admin_id > 0";
        }else if($datas['count_dimension'] == 'all_channels') { //按全部店铺维度统计
            $compare_on = ['user_id'] ;
        }

        if($type == '2'){ //运营人员维度按运营人员ID连表查询
            $compare_on = ['goods_operation_user_admin_id'] ;
            $notime_where .= " AND report.goods_operation_user_admin_id > 0";
        }
        $where_detail = is_array($datas['where_detail']) ? $datas['where_detail'] : json_decode($datas['where_detail'], true);
        if (!empty($where_detail)) {
            //商品维度条件
            if (!empty($where_detail['transport_mode'])) {
                if(!is_array($where_detail['transport_mode'])){
                    $transport_modes = explode(',' , $where_detail['transport_mode']) ;
                }else{
                    $transport_modes = $where_detail['transport_mode'] ;
                }
                if(count($transport_modes) == 1){
                    $notime_where .= ' AND report.goods_Transport_mode = ' . ($transport_modes[0] == 'FBM' ? 1 : 2);
                }
            }
            if(!empty($where_detail['up_status'])){
                $notime_where.= " AND report.goods_up_status = " . (intval($where_detail['up_status']) == 1 ? 1 : 2 );
            }
            if(!empty($where_detail['is_care'])){
                $notime_where.= " AND report.goods_is_care = " . (intval($where_detail['is_care']) == 1 ? 1 : 0 );
            }
            if(!empty($where_detail['is_new'])){
                $notime_where.= " AND report.goods_is_new = " . (intval($where_detail['is_new']) == 1 ? 1 : 0 );
            }
            if (!empty($where_detail['group_id'])) {
                if(is_array($where_detail['group_id'])){
                    $group_str = implode(',', $where_detail['group_id']);
                }else{
                    $group_str = $where_detail['group_id'] ;
                }
                if (!empty($group_str)) {
                    $notime_where .= " AND report.goods_group_id  IN ( " . $group_str . ")";
                }elseif ($group_str == 0){
                    $notime_where .= " AND report.goods_group_id = 0 ";
                }
            }
            if (!empty($where_detail['operators_id'])) {
                if(is_array($where_detail['operators_id'])){
                    $operators_str = implode(',', $where_detail['operators_id']);
                }else{
                    $operators_str = $where_detail['operators_id'] ;
                }
                $notime_where .= " AND report.goods_operation_user_admin_id  IN ( " . $operators_str . " ) ";
            }
            if (!empty($where_detail['tag_id'])) {
                if(is_array($where_detail['tag_id'])){
                    $tag_str = implode(',', $where_detail['tag_id']);
                }else{
                    $tag_str = $where_detail['tag_id'] ;
                }
                if($datas['count_dimension'] == 'tags'){
                    if (!empty($tag_str)) {
                        if (in_array(0,explode(",",$tag_str))){
                            $notime_where .= " AND (tags_rel.tags_id  IN ( " . $tag_str . " )  OR  tags_rel.tags_id IS NULL )  ";

                        }else{
                            $notime_where .= " AND tags_rel.tags_id  IN ( " . $tag_str . " ) ";

                        }
                    }elseif ($tag_str == 0){
                        $notime_where .= " AND (tags_rel.tags_id = 0 OR tags_rel.tags_id IS NULL) ";
                    }
                }else{
                    if (!empty($tag_str)) {
                        $tag_arr = explode(",",$tag_str);
                        $where_or_temp = [];
                        foreach ($tag_arr as $val){
                            $where_or_temp[] = "tags.tags_id like '%,{$val},%'";
                        }
                        if (in_array(0,$tag_arr)){
                            $where_or_temp[] = " tags.tags_id IS NULL ";
                        }
                        $notime_where .= " AND (". implode(' OR ',$where_or_temp)." )";
                    }elseif ($tag_str == 0){
                        $notime_where .= " AND (tags.tags_id like '%,0,%' OR tags.tags_id IS NULL) ";
                    }
                }
            }
            if(!empty($where_detail['sku'])){
                if(is_array($where_detail['sku'])){
                    $sku_str="'".join("','",$where_detail['sku'])."'";
                }else{
                    $sku_str = "'".$where_detail['sku']."'" ;
                }
                if (!empty($sku_str)) {
                    $notime_where .= " AND report.goods_sku  IN ( " . $sku_str . ")";
                }
            }
            if (!empty($where_detail['user_department_id'])){
                $notime_where .= " AND dc.user_department_id IN (" . $where_detail['user_department_id'] . ")" ;
            }
            if (!empty($where_detail['operators_id'])) {
                if(is_array($where_detail['operators_id'])){
                    $operators_str = implode(',', $where_detail['operators_id']);
                }else{
                    $operators_str = $where_detail['operators_id'] ;
                }
                $notime_where .= " AND report.goods_operation_user_admin_id  IN ( " . $operators_str . " ) ";
            }
        }

        $notime_where = str_replace("{:RATE}", $exchangeCode, $notime_where ?? '');
        $notime_where = str_replace("{:DAY}", $day_param, $notime_where);

        $newDatas = $datas ;
        $on_key = 1 ;

        //有用到比较的指标
        $compare_targets = !empty($datas['compare_data'][0]['custom_target_set']) ? array_column($datas['compare_data'][0]['custom_target_set'],'target') : [];
        foreach($datas['compare_data'] as $ck => $compare_data)   {
            if($compare_data['target'] == 'industry'){
                if($compare_data['category_level'] == 1){
                    $compare_on = ['site_id','goods_product_category_name_1'] ;
                }elseif($compare_data['category_level'] == 2){
                    $compare_on = ['site_id','goods_product_category_name_1','goods_product_category_name_2'] ;
                }else{
                    $compare_on = ['site_id','goods_product_category_name_1','goods_product_category_name_2','goods_product_category_name_3'] ;
                }
                switch ($compare_data['time_type']){
                    //昨天
                    case 3:
                        $day_type = 1;
                        break;
                    //近7天
                    case 4:
                        $day_type = 2;
                        break;
                    //近15天
                    case 5:
                        $day_type = 4;
                        break;
                    //近30天
                    case 6:
                        $day_type = 3;
                        break;
                }
                $compare_data_target_type = !empty($compare_data['target_type']) ? $compare_data['target_type'] : 1;
                $datas['compare_data'][$ck]['industry_table' . '_' .$compare_data_target_type] = $this->compareDataSql($compare_data['category_level'] , $day_type ,$compare_data_target_type ,$compare_data['topn'] ,3 ,$compare_data['type'] ,$exchangeCode);
                $compare_on_arr = [] ;
                foreach($compare_on as $con){
                    $compare_on_arr[] = 'origin_table.'.$con . " = industry_table_{$compare_data_target_type}.".$con ;
                }
            }else{
                $min_ym =  date('Ym',$compare_data['compare_start_time'])  ;
                $max_ym =  date('Ym',$compare_data['compare_end_time'])  ;
                $ym_where = $this->getYnWhere($max_ym, $min_ym) ;
                $newDatas['max_ym'] = $max_ym;
                $newDatas['min_ym'] = $min_ym;
                $newDatas['origin_time'] = '  AND create_time >= ' . $compare_data['compare_start_time'] . ' AND create_time <= ' . $compare_data['compare_end_time'];

                $newDatas['target'] = $compare_data['target'] ; //替换需要查询的指标
                $newDatas['compare_targets'] = $compare_targets ; //有涉及到比较的指标
                if($type == '0'){ // 获取店铺维度字段
                    $compare_fields_arr = $this->getUnGoodsFields($newDatas) ;
                }else if ($type == '1'){ // 获取商品维度字段
                    $compare_fields_arr = $this->getGoodsFields($newDatas) ;
                }else{  //获取运营人员维度字段
                    $compare_fields_arr = $this->getOperatorsFields($newDatas);
                    //运营人员条件以及 table 需要重新定义 ， 因为运营人员时间条数是放在table里的
                    $new_table = $this->operationTable($newDatas,$ym_where,'day',$compare_fields_arr['operation_table_field']);
                    if ($datas['currency_code'] != 'ORIGIN') {
//                        if (empty($currencyInfo) || $currencyInfo['currency_type'] == '1') {
//                            $new_table .= " LEFT JOIN {$this->table_site_rate} as rates ON rates.site_id = report.site_id AND rates.user_id = 0 ";
//                        } else {
//                            $new_table .= " LEFT JOIN {$this->table_site_rate} as rates ON rates.site_id = report.site_id AND rates.user_id = report.user_id  ";
//                        }
                        $new_table = $this->leftJoinCurrentMonthRate($new_table,$datas,$currencyInfo,'report');
                        $datas['compare_data'][$ck]['new_table'] = $new_table ;
                    }
                }
                $datas['compare_data'][$ck]['fields'] = $compare_fields_arr['fields'] ;

                //拼接对比表条件 及连表 ON 条件
                if($type == '2'){
                    $compareWhere = $notime_where . " AND (report.create_time>= {$compare_data['compare_start_time']} and report.create_time<= {$compare_data['compare_end_time']} ) ";
                }else{
                    $compareWhere = $ym_where . ' AND ' . $notime_where . " AND (report.create_time>= {$compare_data['compare_start_time']} and report.create_time<= {$compare_data['compare_end_time']} ) ";
                }

                $datas['compare_data'][$ck]['compare_where'] = $compareWhere ;
                $compare_on_arr = [] ;
                foreach($compare_on as $con){
                    if(!empty($compare_data['get_value_type'])){
                        if($compare_data['get_value_type'] == 'avg_value'){
                            $compare_on_arr[] = 'origin_table.user_id = avg_table_'.$compare_data['time_type'].'.user_id' ;
                        }elseif($compare_data['get_value_type'] == 'median_value'){
                            $compare_on_arr[] = 'origin_table.user_id = median_table_'.$compare_data['time_type'].'.user_id' ;
                        }
                    }else{
                        $compare_on_arr[] = 'origin_table.'.$con . ' = compare_table'.$on_key.'.compare'.$on_key.'_'.$con ;
                    }
                }
            }
            $on_key++ ;
            $datas['compare_data'][$ck]['on'] = implode(' AND ' , $compare_on_arr) ;
        }

        //处理对比数据 - 获取对比数据需要查询的字段
        foreach($datas['compare_data'] as $ck2 => $compare_data)   {
            if(!empty($compare_data['fields'])){
                $compare_fields_arr = array() ;
                $renames = empty($compare_data['rename']) ? [] : explode(',',$compare_data['rename']) ;
                $renameArr = [] ;
                $compare_target = explode(',' , $compare_data['target']) ;
                if(!empty($renames)){
                    foreach($compare_target as $ctk =>$ct){
                        $renameArr[$ct] = empty($renames[$ctk]) ? false : $renames[$ctk] ;
                    }
                }
                $i = 1 ;
                foreach($compare_data['fields'] as $compare_field_name => $compare_field){
                    if(in_array($compare_field_name , $compare_target)){
                        $compare_field_name2 = empty($renameArr[$compare_field_name]) ? ('compare'.($ck2+1).'_'.$compare_field_name) : $renameArr[$compare_field_name] ;
                        $compare_fields_arr[] = $compare_field . ' AS "' . $compare_field_name2 . '"';
                        $i++ ;
                    }else{
                        $compare_fields_arr[] = $compare_field . ' AS "compare'.($ck2+1).'_'.$compare_field_name . '"';
                    }
                }
                $compare_field_data = str_replace("{:RATE}", $exchangeCode, str_replace("COALESCE(rates.rate ,1)","(COALESCE(rates.rate ,1)*1.00000)", implode(',', $compare_fields_arr)));//去除
                $compare_field_data = str_replace("{:DAY}", $day_param, $compare_field_data);
                $datas['compare_data'][$ck2]['field_data'] =  $compare_field_data ;
                unset($datas['compare_data'][$ck2]['fields']) ;
            }
        }

        //最终获取自定义字段拼接
        if(!empty($datas['compare_data'][0]['custom_target_set'])){
            $datas['compare_data'][0]['custom_target'] = [];
            $custom_set_order = $custom_set_where = [];
            foreach($datas['compare_data'][0]['custom_target_set'] as $custom_target_item){
                $compare_table = !empty($custom_target_item['compare_table']) ? $custom_target_item['compare_table'] : [];
                $field_arr = [];
                if($compare_table){
                    //fields
                    foreach($compare_table as $table_key => $table_item){
                        $avg = (!empty($table_item['avg']) && (int)$table_item['avg'] > 1) ? " * 1.0000 / {$table_item['avg']}" : '';//取的字段表
                        $table_tmp = $table_item['table'] == '-1' ? $table_item['table'] : (int)$table_item['table'] + 1;
                        $table_str = $table_tmp == '-1' ? 'origin_table.' : "compare_table{$table_tmp}.";//取的字段表
                        $target_prefix = $table_tmp == '-1' ? '' : "compare{$table_tmp}_";//取的字段表
                        $field_arr[$table_key] = '(' . $table_str . $target_prefix . $custom_target_item['target'] . $avg . ')';
                    }
                    if (!empty($custom_target_item['type']) && $custom_target_item['type'] == 2) {
                        //占比公式分两种 1.（当前值 - 上一周期）/|上一周期|  这种是正常指标 2.（上一周期 - 当前值）/|上一周期|  这种是那种负数的
                        if(in_array($custom_target_item['target'],['sales_refund','cpc_cost','cpc_cost_rate','cpc_avg_click_cost','cpc_acos','cost_profit_total_pay'])){
                            $tmp_code = "({$field_arr[1]} - {$field_arr[0]} ) * 1.0000 / nullif(abs({$field_arr[1]}),0)";
                            $tmp_code1 = "( CASE WHEN {$field_arr[1]} > 0 THEN 1 ELSE -1 END )";
                            $tmp_code2 = "( CASE WHEN ( 0 - {$field_arr[0]}) > 0 THEN 1 ELSE -1 END )";
                        }else{
                            $tmp_code = "({$field_arr[0]} - {$field_arr[1]} ) * 1.0000 / nullif(abs({$field_arr[1]}),0)";
                            $tmp_code1 = "( CASE WHEN ( 0 - {$field_arr[1]}) > 0 THEN 1 ELSE -1 END )";
                            $tmp_code2 = "( CASE WHEN {$field_arr[0]} > 0 THEN 1 ELSE -1 END )";
                        }
                        $field_str = "( CASE WHEN COALESCE ( {$field_arr[0]}, 0 ) = COALESCE ( {$field_arr[1]}, 0 ) THEN 0 ELSE ( CASE WHEN COALESCE ( {$field_arr[0]}, 0 ) = 0 THEN {$tmp_code1} ELSE ( CASE WHEN COALESCE ( {$field_arr[1]}, 0 ) = 0 THEN {$tmp_code2} ELSE {$tmp_code} END ) END ) END )";
                    } else {
                        if (!empty($field_arr[1])) {
                            $field_str = "( CASE WHEN COALESCE ( {$field_arr[0]}, 0 ) = COALESCE ( {$field_arr[1]}, 0 ) THEN 0 ELSE ( CASE WHEN COALESCE ( {$field_arr[0]}, 0 ) = 0 THEN -{$field_arr[1]} ELSE ( CASE WHEN COALESCE ( {$field_arr[1]}, 0 ) = 0 THEN {$field_arr[0]} ELSE ( {$field_arr[0]} - {$field_arr[1]} ) END ) END ) END )";
                        } else {
                            $field_str = "{$field_arr[0]}";
                        }
                    }
                    $datas['compare_data'][0]['custom_target'][] = !empty($custom_target_item['rename']) ? $field_str . " as {$custom_target_item['rename']}" : $field_str;

                    //where
                    if(!empty($custom_target_item['formula']) && isset($custom_target_item['value'])){
                        if($custom_target_item['value'] == 'category_result_data'){
                            $compare_data_target_type = !empty($custom_target_item['target_type']) ? $custom_target_item['target_type'] : 1;
                            $custom_set_where[] = '(' .  $field_str . ') ' . $custom_target_item['formula'] . "COALESCE(industry_table_{$compare_data_target_type}." .$custom_target_item['value'] .',0)';
                        }elseif($custom_target_item['value'] == 'avg_value'){
                            $set_time_type = !empty($custom_target_item['time_type']) ? $custom_target_item['time_type'] : 3;
                            $custom_set_where[] = '(' .  $field_str . ') ' . $custom_target_item['formula'] . "avg_table_{$set_time_type}." .$custom_target_item['target'] . "_avg";
                        }elseif($custom_target_item['value'] == 'median_value'){
                            $set_time_type = !empty($custom_target_item['time_type']) ? $custom_target_item['time_type'] : 3;
                            $custom_set_where[] = '(' .  $field_str . ') ' . $custom_target_item['formula'] . "median_table_{$set_time_type}." .$custom_target_item['target'] . "_median";
                        }else{
                            if (strpos($custom_target_item['value'], '%') !== false) {
                                $custom_target_item['value'] = round((float)$custom_target_item['value'] / 100, 4);
                            }
                            $custom_set_where[] = '(' .  $field_str . ') ' . $custom_target_item['formula'] . $custom_target_item['value'];
                        }
                    }

                    //order by
                    if(!empty($custom_target_item['sort'])){
                        $custom_set_order[] = $field_str . " {$custom_target_item['sort']}";
                    }
                }
            }
            $condition_relation = !empty($datas['compare_data'][0]['condition_relation']) ? ' ' . $datas['compare_data'][0]['condition_relation'] . ' ' : ' AND ';
            $datas['compare_data'][0]['where'] = !empty($custom_set_where) ? implode($condition_relation,$custom_set_where) : [];
            $datas['compare_data'][0]['order'] = !empty($custom_set_order) ? implode(',',$custom_set_order) : [];
        }

        return $datas['compare_data'] ;
    }
    /**
     * 获取商品维度统计列表(新增统计维度完成)
     * @param string $where
     * @param array $datas
     * @param string $limitgoods
     * @param string $order
     * @param int $count_tip 获取统计的数据信息 0-获取列表和总条数 1-仅仅获取列表 2-仅获取总条数
     * @param array $channel_arr
     * @return array
     * @author: LWZ
     */
    public function getListByGoods(
        $where = '',
        $datas = [],
        $limit = '',
        $sort = '',
        $order = '',
        $count_tip = 0,
        array $channel_arr = [],
        array $currencyInfo = [],
        $exchangeCode = '1',
        array $timeLine = [],
        array $deparmentData = [],
        int $userId = 0,
        int $adminId = 0 ,
        array $rateInfo = [],
        int $day_param = 1
    ) {
        $datas['method'] = "getListByGoods";
        $this->dws_user_id_mod = getUserIdMod($datas['user_id']);
        $this->handleTargets($datas, 1);
        $isMysql = $this->getIsMysql($datas);
        $searchKey = $datas['searchKey'] ?? '';
        $searchVal = $datas['searchVal'] ?? '';
        $matchType = $datas['matchType'] ?? '';
        $other_target_tmp = isset($datas['other_target']) && !empty($datas['other_target'])? explode(',',$datas['other_target']):[];
        $other_target = array();
        if (!empty($other_target_tmp)){
            foreach ($other_target_tmp as $value){
                $other_target[$value] = '1';
            }
        }
        $searchVal = $isMysql ? $searchVal : self::escape(stripslashes($searchVal));
        $where = $this->getSearchValWhere($where,$searchKey,$searchVal,$matchType);

        $this->tax_field = $this->getRemoveTaxField($datas);
        $datas['is_month_table'] = 0;
        if(($datas['count_periods'] == 0 || $datas['count_periods'] == 1 || (isset($datas['is_force_day_table']) && $datas['is_force_day_table'] == 1)) && $datas['cost_count_type'] != 2){ //按天或无统计周期
            $table = "{$this->table_goods_day_report}" ;
            $dws_table = $this->table_dws_goods_day_report;
        }else if($datas['count_periods'] == 2 && $datas['cost_count_type'] != 2){  //按周
            $table = "{$this->table_goods_week_report}" ;
            $dws_table = $this->table_dws_goods_day_report;
        }else if($datas['count_periods'] == 3 || $datas['count_periods'] == 4 || $datas['count_periods'] == 5 ){
            $table = "{$this->table_goods_month_report}" ;
            $dws_table = $this->table_dws_goods_month_report;
            $datas['is_month_table'] = 1;
        }else if($datas['cost_count_type'] == 2 ){
            $table = "{$this->table_goods_month_report}" ;
            $dws_table = $this->table_dws_goods_month_report;
            $datas['is_month_table'] = 1;
        }else{
            return [];
        }
        $datas['is_use_goods_view_sort'] = false;
        $where_detail = is_array($datas['where_detail']) ? $datas['where_detail'] : json_decode($datas['where_detail'], true);
        if (empty($where_detail)) {
            $where_detail = array();
        }else{
            if (!empty($where_detail['target'])){
                $target_key_arr = array_column($where_detail['target'],'key');
                if (!empty($target_key_arr) && (in_array("goods_views_rate",$target_key_arr) || in_array("goods_buyer_visit_rate",$target_key_arr))){
                    $datas['is_use_goods_view_sort'] = true;
                }
            }
        }
        if (!empty($where_detail['tag_id'])) {
            if(is_array($where_detail['tag_id'])){
                $tag_str = implode(',', $where_detail['tag_id']);

            }else{
                $tag_str = $where_detail['tag_id'] ;
            }
            if (!empty($tag_str)) {
                if (in_array(0,explode(",",$tag_str))){
                    $isMysql = false;
                }
            }elseif ($tag_str == 0){
                $isMysql = false;
            }
        }

        //没有按周期统计 ， 按指标展示
        $fba_target_key = [];
        $erp_target_key = [];
        if ($datas['show_type'] == 2) {
            $fields_arr = $this->getGoodsFields($datas,$isMysql);
            $fields = $fields_arr['fields'];
            $fba_target_key = $fields_arr['fba_target_key'];
            $erp_target_key = $fields_arr['erp_target_key'];
        } else {  //按时间维度统计，没有对比数据
            $fields = $this->getGoodsTimeFields($datas, $timeLine,$isMysql);
        }

        if (empty($fields)) {
            return [];
        }
        $ym_where = $this->getYnWhere($datas['max_ym'] , $datas['min_ym'] ) ;

        if ($datas['show_type'] != 2 && !$isMysql && $datas['show_type'] > 0 && $datas['is_new_index'] == 1 && in_array($this->time_periods_field['key'],array('fba_sales_refund','sales_refund'))){
            $time_periods_other_field = '';
            if (!empty($this->time_periods_field['molecule'])){
                $time_periods_other_field .= ",({$this->time_periods_field['molecule']}) as {$this->time_periods_field['key']}_molecule";
            }
            if (!empty($this->time_periods_field['denominator'])){
                $time_periods_other_field .= ",({$this->time_periods_field['denominator']}) as {$this->time_periods_field['key']}_denominator";
            }
            foreach ($fields as $field_name => $field) {

                if (!empty($this->time_periods_field['denominator'])){
                    $fields[$field_name] = str_replace($this->time_periods_field['denominator'],"{$this->time_periods_field['key']}_denominator", $field);
                }
                if (!empty($this->time_periods_field['molecule'])){
                    $fields[$field_name] = str_replace($this->time_periods_field['molecule'],"{$this->time_periods_field['key']}_molecule", $field);
                }

            }
            $table = str_replace($dws_table,'(SELECT  report.user_id  AS "user_id",report.amazon_goods_id AS "goods_id",report.site_id AS "site_country_id",report.channel_id  AS "channel_id",report.available  AS "available",report.site_id  AS "site_id",report.user_id_mod  AS "user_id_mod",report.amazon_goods_id  AS "amazon_goods_id",report.ym  AS "ym",report.create_time as "create_time" '.$time_periods_other_field.' FROM  '.$dws_table.' as report where '.($ym_where).' AND report.available = 1 AND report.user_id_mod = '.$this->dws_user_id_mod.' AND '.$datas['origin_report_where'].')  ' ,$table);

        }

        $fbaCommonArr = config('common.goods_fba_fields_arr');
        $erp_isku_fields_arr = config('common.erp_isku_fields_arr');
        $erp_report_fields_arr = config('common.erp_report_fields_arr');
        $orderby = '';
        if(!empty($datas['sort_target']) && !empty($datas['sort_order']) && !empty($datas['limit_num']) && $datas['is_count'] == 1 && $datas['stock_datas_origin'] == 1){
            //如果新版FBA指标筛选里包含了FBA指标 ， 那么汇总就不展示
            if(in_array($datas['sort_target'],array_keys($fbaCommonArr)) || in_array($datas['sort_target'],$fba_target_key) || in_array($datas['sort_target'],array_keys($erp_isku_fields_arr))|| in_array($datas['sort_target'],array_keys($erp_report_fields_arr)) || in_array($datas['sort_target'],$erp_target_key)){
                return array('lists'=>[] , 'count'=>0);
            }
        }
        if( !empty($datas['sort_target']) && !empty($fields[$datas['sort_target']]) && !empty($datas['sort_order']) ){
            if ($datas['currency_code'] != 'ORIGIN' or in_array($datas['sort_target'],['goods_buyer_visit_rate','goods_views_rate'])) {
                $orderby = '(('.$fields[$datas['sort_target']].') IS NULL) ,  (' . $fields[$datas['sort_target']] . ' ) ' . $datas['sort_order'];
                $this->fbaSort = [
                    'sort_target' => $datas['sort_target'],
                    'sort_order' => $datas['sort_order'],
                    'is_origin' => 1,
                ];
            }else{
                $orderby = '(('.$fields[$datas['sort_target']].') IS NULL) ,  (' . $this->getOriginOrderBy($fields[$datas['sort_target']],$datas['sort_target'],$datas) . ' ) ' . $datas['sort_order'];
                $this->fbaSort = [
                    'sort_target' => $datas['sort_target'],
                    'sort_order' => $datas['sort_order'],
                    'is_origin' => 1,
                ];

            }

        }elseif ($datas['sort_target'] == 'create_time' && !empty($datas['sort_order'])){
            $orderby = " max(report.create_time) {$datas['sort_order']}";
            $this->fbaSort = [
                'sort_target' => 'create_time',
                'sort_order' => $datas['sort_order'],
                'is_origin' => 1,
            ];
        }

        if(in_array($datas['sort_target'],array_keys($fbaCommonArr)) || in_array($datas['sort_target'],$fba_target_key)){
            $this->fbaSort = [
                'sort_target' => $datas['sort_target'],
                'sort_order' => $datas['sort_order'],
            ];
            if(in_array($datas['sort_target'],$fba_target_key)){
                $this->fbaSort['is_custom'] = 1;
            }
        }

        if (!empty($order) && !empty($sort) && !empty($fields[$sort]) && $datas['limit_num'] == 0 ) {
            if ($datas['currency_code'] != 'ORIGIN' or in_array($sort,['goods_buyer_visit_rate','goods_views_rate'])) {
                $orderby =  '(('.$fields[$sort].') IS NULL) ,  (' . $fields[$sort] . ' ) ' . $order;
            }else{
                $orderby =  '(('.$fields[$sort].') IS NULL) ,  (' . $this->getOriginOrderBy($fields[$sort],$sort,$datas) . ' ) ' . $order;
            }
            $this->fbaSort = [
                'sort_target' => $sort,
                'sort_order' => $order,
                'is_origin' => 1,
            ];
        }
        if(!empty($order) && !empty($sort) && (in_array($sort,array_keys($fbaCommonArr)) || in_array($sort,$fba_target_key)) && $datas['limit_num'] == 0){
            $this->fbaSort = [
                'sort_target' => $sort,
                'sort_order' => $order,
            ];
            if(in_array($sort,$fba_target_key)){
                $this->fbaSort['is_custom'] = 1;
            }
        }
        $orderbyTmp = $orderby;


        $rt = array();
        $fields_arr = array();
        foreach ($fields as $field_name => $field) {
            if ($isMysql){
                $fields_arr[] = $field . " AS '" . $field_name . "'";

            }else{
                $fields_arr[] = $field . ' AS "' . $field_name . '"';

            }
        }

//        $field_data = str_replace("{:RATE}", $exchangeCode, implode(',', $fields_arr));
//        $field_data = str_replace("{:RATE}", $exchangeCode, str_replace("COALESCE(rates.rate ,1)","(COALESCE(rates.rate ,1)*1.00000)", implode(',', $fields_arr)));//去除presto除法把数据只保留4位导致精度异常，如1/0.1288 = 7.7639751... presto=7.7640

//        $field_data = str_replace("{:DAY}", $day_param, $field_data);

        $mod_where = "report.user_id_mod = " . $this->dws_user_id_mod . " and amazon_goods.goods_user_id_mod=" . ($datas['user_id'] % 20);

        $where = $ym_where . " AND " .$mod_where . " AND report.available = 1 " .  (empty($where) ? "" : " AND " . $where) ;
        $rate_table = $this->joinRateTable($datas,$fields_arr,$table,$exchangeCode,$day_param);
        $field_data = $rate_table['field_data'];
        $table      = $rate_table['table'];

        $having = '';
        $datas['not_use_time_group'] = $datas['not_use_time_group'] ??0;
        if (in_array($datas['count_dimension'], ['parent_asin', 'asin', 'sku'])) {
            if($datas['is_distinct_channel'] == 1){ //有区分店铺
                $fbaDataGroup = 'report.goods_' . $datas['count_dimension'] . ' , report.channel_id';
                if ($datas['count_periods'] > 0 && $datas['show_type'] == '2' && $datas['not_use_time_group']!=1) {
                    if($datas['count_periods'] == '4'){ //按季度
                        $group = 'report.goods_' . $datas['count_dimension'] . ' , report.channel_id ,report.myear , report.mquarter ';
                        $orderby = 'report.goods_' . $datas['count_dimension'] . ' , report.channel_id ,report.myear , report.mquarter ';
                    }else if($datas['count_periods'] == '5') { //年
                        $group = 'report.goods_' . $datas['count_dimension'] . '  , report.channel_id ,report.myear' ;
                        $orderby = 'report.goods_' . $datas['count_dimension'] . ' , report.channel_id,report.myear ';
                    }else {
                        $group = 'report.' . $datas['count_dimension'] . '_group, report.channel_id  ';
                        $orderby = "report." . $datas['count_dimension'] . "_group, report.channel_id ";
                        $fbaDataGroup = 'amazon_goods.goods_sku,amazon_goods.goods_channel_id';
                    }
                }else{
                    $group = 'report.goods_' . $datas['count_dimension'] . ' ,report.channel_id ';
                    $orderby = empty($orderby) ? ('report.goods_' . $datas['count_dimension'] . ' ,report.channel_id ') : ($orderby . ' , report.goods_'. $datas['count_dimension'] . ' ,report.channel_id ');
                }
            }else{  //不区分店铺
                if ($datas['count_periods'] > 0 && $datas['show_type'] == '2' && $datas['not_use_time_group']!=1) {
                    if($datas['count_periods'] == '4'){ //按季度
                        $group = 'report.goods_' . $datas['count_dimension'] . '  ,report.myear , report.mquarter ';
                        $orderby = 'report.goods_' . $datas['count_dimension'] . ' ,report.myear , report.mquarter ';
                    }else if($datas['count_periods'] == '5') { //年
                        $group = 'report.goods_' . $datas['count_dimension'] . ' ,report.myear' ;
                        $orderby = 'report.goods_' . $datas['count_dimension'] . ',report.myear ';
                    }else if($datas['count_periods'] == '3'){ //按月
                        $group = 'report.goods_' . $datas['count_dimension'] . ' ,report.myear ,report.mmonth' ;
                        $orderby = 'report.goods_' . $datas['count_dimension'] . ',report.myear ,report.mmonth';
                    }else if($datas['count_periods'] == '2'){  //按周
                        $group = 'report.goods_' . $datas['count_dimension'] . ' ,report.mweekyear ,report.mweek' ;
                        $orderby = 'report.goods_' . $datas['count_dimension'] . ',report.mweekyear ,report.mweek';
                    }else if($datas['count_periods'] == '1') {  //按天
                        $group = 'report.goods_' . $datas['count_dimension'] . ' ,report.myear ,report.mmonth ,report.mday' ;
                        $orderby = 'report.goods_' . $datas['count_dimension'] . ',report.myear ,report.mmonth,report.mday';
                    }
                }else{
                    $group = 'report.goods_' . $datas['count_dimension'] . ' ';
                    $orderby = empty($orderby) ? ('report.goods_' . $datas['count_dimension']) : ($orderby . ' , report.goods_'. $datas['count_dimension'] );
                }
                $fbaDataGroup = 'report.goods_' . $datas['count_dimension'];
            }

            $where .= " AND report.goods_" . $datas['count_dimension'] . " != '' ";
        } else if ($datas['count_dimension'] == 'isku') {
            $fbaDataGroup = 'report.goods_isku_id ';
            if ($datas['count_periods'] > 0 && $datas['show_type'] == '2') {
                if($datas['count_periods'] == '4'){ //按季度
                    $group = 'report.goods_isku_id  , report.myear , report.mquarter ';
                    $orderby = 'report.goods_isku_id  , report.myear , report.mquarter ';
                }else if($datas['count_periods'] == '5') { //年
                    $group = 'report.goods_isku_id  , report.myear' ;
                    $orderby = 'report.goods_isku_id  , report.myear ';
                }else {
                    $group = "report.isku_group ";
                    $orderby = "report.isku_group ";
                    $fbaDataGroup = 'amazon_goods.goods_isku_id ';
                }

            }else{
                $group = 'report.goods_isku_id ';
                $orderby = empty($orderby) ? ('report.goods_isku_id ') : ($orderby . ' , report.goods_isku_id ');
            }
            $where .= " AND report.goods_isku_id > 0";
        } else if ($datas['count_dimension'] == 'group') {
            $fbaDataGroup = 'report.goods_group_id ';
            if ($datas['count_periods'] > 0 && $datas['show_type'] == '2') {
                if($datas['count_periods'] == '4'){ //按季度
                    $group = 'report.goods_group_id , report.myear , report.mquarter ';
                    $orderby = 'report.goods_group_id ,report.myear , report.mquarter ';
                }else if($datas['count_periods'] == '5') { //年
                    $group = 'report.goods_group_id , report.myear' ;
                    $orderby = 'report.goods_group_id , report.myear ';
                }else {
                    $group = 'report.group_id_group  ';
                    $orderby = "report.group_id_group ";
                    $fbaDataGroup = 'amazon_goods.goods_group_id ';
                }

            }else{
                $group = 'report.goods_group_id  ';
                $orderby = empty($orderby) ? ('report.goods_group_id ') : ($orderby . ' , report.goods_group_id');
            }
            $where .= " AND report.goods_group_id > 0";
        } else if ($datas['count_dimension'] == 'class1') {
            if ($datas['count_periods'] > 0 && $datas['show_type'] == '2') {

                if ($datas['count_periods'] == '1' ) { //按天
                    $group = 'report.goods_product_category_name_1 ,report.site_id , report.myear , report.mmonth  , report.mday';
                    $orderby = 'report.goods_product_category_name_1 ,report.site_id , report.myear , report.mmonth  , report.mday';
                } else if ($datas['count_periods'] == '2' ) { //按周
                    $group = 'report.goods_product_category_name_1 ,report.site_id , report.myear , report.mweek';
                    $orderby = 'report.goods_product_category_name_1 ,report.site_id , report.myear , report.mweek';
                } else if ($datas['count_periods'] == '3' ) { //按月
                    $group = 'report.goods_product_category_name_1 ,report.site_id  , report.myear , report.mmonth';
                    $orderby = 'report.goods_product_category_name_1 ,report.site_id , report.myear , report.mmonth';
                } else if ($datas['count_periods'] == '4' ) {  //按季
                    $group = 'report.goods_product_category_name_1 ,report.site_id , report.myear , report.mquarter';
                    $orderby = 'report.goods_product_category_name_1 ,report.site_id , report.myear , report.mquarter';
                } else if ($datas['count_periods'] == '5' ) { //按年
                    $group = 'report.goods_product_category_name_1 ,report.site_id , report.myear';
                    $orderby = 'report.goods_product_category_name_1 ,report.site_id , report.myear';
                }

            }else{
                $group = 'report.goods_product_category_name_1,report.site_id ';
                $orderby = empty($orderby) ? ('max(report.goods_product_category_name_1) , max(report.site_id) ') : ($orderby . ' , max(report.goods_product_category_name_1), max(report.site_id) ');
            }
            $fbaDataGroup = 'report.goods_product_category_name_1,report.site_id ';
            $where .= " AND report.goods_product_category_name_1 != ''";

        } else if($datas['count_dimension'] == 'tags'){
            $table.= " LEFT JOIN {$this->table_amazon_goods_tags_rel} AS tags_rel ON tags_rel.goods_id = report.goods_g_amazon_goods_id AND tags_rel.db_num = '{$this->dbhost}' and  tags_rel.status = 1 LEFT JOIN {$this->table_amazon_goods_tags} AS gtags ON gtags.id = tags_rel.tags_id AND gtags.status = 1 AND gtags.db_num = '{$this->dbhost}' " ;
            if ($datas['count_periods'] > 0 && $datas['show_type'] == '2') {
                if ($datas['count_periods'] == '1' ) { //按天
                    $group = 'tags_rel.tags_id  , report.myear , report.mmonth  , report.mday';
                    $orderby = 'tags_rel.tags_id , report.myear , report.mmonth  , report.mday';
                } else if ($datas['count_periods'] == '2' ) { //按周
                    $group = 'tags_rel.tags_id  , report.mweekyear , report.mweek';
                    $orderby = 'tags_rel.tags_id , report.mweekyear , report.mweek';
                } else if ($datas['count_periods'] == '3' ) { //按月
                    $group = 'tags_rel.tags_id  , report.myear , report.mmonth';
                    $orderby = 'tags_rel.tags_id , report.myear , report.mmonth';
                } else if ($datas['count_periods'] == '4' ) {  //按季
                    $group = 'tags_rel.tags_id  , report.myear , report.mquarter';
                    $orderby = 'tags_rel.tags_id  , report.myear , report.mquarter';
                } else if ($datas['count_periods'] == '5' ) { //按年
                    $group = 'tags_rel.tags_id  , report.myear';
                    $orderby = 'tags_rel.tags_id  , report.myear';
                }
            }else{
                $group = 'tags_rel.tags_id  ' ;
                $orderby = empty($orderby) ? ('tags_rel.tags_id ') : ($orderby . ' , tags_rel.tags_id');
            }
            $fbaDataGroup = 'tags_rel.tags_id ';
            if ($isMysql){
                $where.= " AND tags_rel.tags_id > 0";
            }else{
                $where.= " AND CAST(tags_rel.tags_id  as bigint) > 0";
            }
        } else if($datas['count_dimension'] == 'head_id'){ //按负责人维度统计
            $fbaDataGroup = 'report.isku_head_id ';
            if ($datas['count_periods'] > 0 && $datas['show_type'] == '2') {
                if($datas['count_periods'] == '4'){ //按季度
                    $group = 'report.isku_head_id , report.myear , report.mquarter ';
                    $orderby = 'report.isku_head_id ,report.myear , report.mquarter ';
                }else if($datas['count_periods'] == '5') { //年
                    $group = 'report.isku_head_id , report.myear' ;
                    $orderby = 'report.isku_head_id , report.myear ';
                }else {
                    $group = 'report.isku_head_id_group  ';
                    $orderby = "report.isku_head_id_group ";
                    $fbaDataGroup = 'amazon_goods.isku_head_id ';
                }
            }else{
                $group = 'report.isku_head_id  ';
                $orderby = empty($orderby) ? ('report.isku_head_id ') : ($orderby . ' , report.isku_head_id');
            }
            $where.= " AND report.isku_head_id > 0";
        }else if($datas['count_dimension'] == 'developer_id'){ //按开发人维度统计
            $fbaDataGroup = 'report.isku_developer_id ';
            if ($datas['count_periods'] > 0 && $datas['show_type'] == '2') {
                if($datas['count_periods'] == '4'){ //按季度
                    $group = 'report.isku_developer_id , report.myear , report.mquarter ';
                    $orderby = 'report.isku_developer_id ,report.myear , report.mquarter ';
                }else if($datas['count_periods'] == '5') { //年
                    $group = 'report.isku_developer_id , report.myear' ;
                    $orderby = 'report.isku_developer_id , report.myear ';
                }else {
                    $group = 'report.isku_developer_id_group  ';
                    $orderby = "report.isku_developer_id_group ";
                    $fbaDataGroup = 'amazon_goods.isku_developer_id ';
                }
            }else{
                $group = 'report.isku_developer_id  ';
                $orderby = empty($orderby) ? ('report.isku_developer_id ') : ($orderby . ' , report.isku_developer_id');
            }
            $where.= " AND report.isku_developer_id > 0";
        } else if($datas['count_dimension'] == 'all_goods'){ //按全部商品维度统计
            $fbaDataGroup = 'report.user_id ';
            if($datas['is_distinct_channel'] == 1) { //有区分店铺
                if ($datas['count_periods'] > 0 && $datas['show_type'] == '2') {
                    if ($datas['count_periods'] == '1' ) { //按天
                        $group = ' report.myear , report.mmonth  , report.mday';
                        $orderby = 'report.myear , report.mmonth  , report.mday';
                    } else if ($datas['count_periods'] == '2' ) { //按周
                        $group = 'report.mweekyear , report.mweek';
                        $orderby = 'report.mweekyear , report.mweek';
                    } else if ($datas['count_periods'] == '3' ) { //按月
                        $group = 'report.myear , report.mmonth';
                        $orderby = 'report.myear , report.mmonth';
                    } else if ($datas['count_periods'] == '4' ) {  //按季
                        $group = 'report.myear , report.mquarter';
                        $orderby = 'report.myear , report.mquarter';
                    } else if ($datas['count_periods'] == '5' ) { //按年
                        $group = 'report.myear';
                        $orderby = 'report.myear';
                    }
                }else{
                    $group = 'report.user_id  ';
                }
            }else{
                if ($datas['count_periods'] > 0 && $datas['show_type'] == '2') {
                    if ($datas['count_periods'] == '1' ) { //按天
                        $group = 'report.myear , report.mmonth  , report.mday';
                        $orderby = 'report.myear , report.mmonth  , report.mday';
                    } else if ($datas['count_periods'] == '2' ) { //按周
                        $group = 'report.mweekyear , report.mweek';
                        $orderby = 'report.mweekyear , report.mweek';
                    } else if ($datas['count_periods'] == '3' ) { //按月
                        $group = 'report.myear , report.mmonth';
                        $orderby = 'report.myear , report.mmonth';
                    } else if ($datas['count_periods'] == '4' ) {  //按季
                        $group = 'report.myear , report.mquarter';
                        $orderby = 'report.myear , report.mquarter';
                    } else if ($datas['count_periods'] == '5' ) { //按年
                        $group = 'report.myear';
                        $orderby = 'report.myear';
                    }
                }else{
                    $group = 'report.user_id  ';
                }
            }

        }else if($datas['count_dimension'] == 'goods_channel'){  //统计商品数据里的店铺维度
            $fbaDataGroup = 'report.channel_id ';
            if ($datas['count_periods'] > 0 && $datas['show_type'] == '2' ) {
                if ($datas['count_periods'] == '1' ) { //按天
                    $group = 'report.channel_id ,report.myear , report.mmonth  , report.mday';
                    $orderby = 'report.channel_id ,report.myear , report.mmonth  , report.mday';
                } else if ($datas['count_periods'] == '2' ) { //按周
                    $group = 'report.channel_id ,report.mweekyear , report.mweek';
                    $orderby = 'report.channel_id ,report.mweekyear , report.mweek';
                } else if ($datas['count_periods'] == '3' ) { //按月
                    $group = 'report.channel_id ,report.myear , report.mmonth';
                    $orderby = 'report.channel_id ,report.myear , report.mmonth';
                } else if ($datas['count_periods'] == '4' ) {  //按季
                    $group = 'report.channel_id ,report.myear , report.mquarter';
                    $orderby = 'report.channel_id ,report.myear , report.mquarter';
                } else if ($datas['count_periods'] == '5' ) { //按年
                    $group = 'report.channel_id ,report.myear';
                    $orderby = 'report.channel_id ,report.myear';
                }
            }else{
                $group = 'report.channel_id ';
                $orderby = empty($orderby) ? ('report.channel_id ') : ($orderby . ' ,report.channel_id ');
            }
        }else if($datas['count_dimension'] == 'goods_site_id'){
            //统计商品数据里的国家维度
            $fbaDataGroup = 'report.site_id';
            $group = 'report.site_id ';
            $orderby = 'report.site_id ';
            if ($datas['count_periods'] > 0 && $datas['show_type'] == '2' ) {
                if ($datas['count_periods'] == '1' ) { //按天
                    $group = 'report.site_id ,report.myear , report.mmonth  , report.mday';
                    $orderby = 'report.site_id ,report.myear , report.mmonth  , report.mday';
                } else if ($datas['count_periods'] == '2' ) { //按周
                    $group = 'report.site_id ,report.mweekyear , report.mweek';
                    $orderby = 'report.site_id ,report.mweekyear , report.mweek';
                } else if ($datas['count_periods'] == '3' ) { //按月
                    $group = 'report.site_id ,report.myear , report.mmonth';
                    $orderby = 'report.site_id ,report.myear , report.mmonth';
                } else if ($datas['count_periods'] == '4' ) {  //按季
                    $group = 'report.site_id ,report.myear , report.mquarter';
                    $orderby = 'report.site_id ,report.myear , report.mquarter';
                } else if ($datas['count_periods'] == '5' ) { //按年
                    $group = 'report.site_id ,report.myear';
                    $orderby = 'report.site_id ,report.myear';
                }
            }
        }else if($datas['count_dimension'] == 'goods_operators'){
            //统计商品数据里的运营人员维度
            $fbaDataGroup = 'amazon_goods.goods_operation_user_admin_id';
            $group = 'amazon_goods.goods_operation_user_admin_id';
            $orderby = "amazon_goods.goods_operation_user_admin_id";
            if ($datas['count_periods'] > 0 && $datas['show_type'] == '2') {
                if ($datas['count_periods'] == '1' ) { //按天
                    $group .= ',report.myear , report.mmonth  , report.mday';
                    $orderby .= ',report.myear , report.mmonth  , report.mday';
                } else if ($datas['count_periods'] == '2' ) { //按周
                    $group .= ',report.mweekyear , report.mweek';
                    $orderby .= ',report.mweekyear , report.mweek';
                } else if ($datas['count_periods'] == '3' ) { //按月
                    $group .= ',report.myear , report.mmonth';
                    $orderby .= ',report.myear , report.mmonth';
                } else if ($datas['count_periods'] == '4' ) {  //按季
                    $group .= ',report.myear , report.mquarter';
                    $orderby .= ',report.myear , report.mquarter';
                } else if ($datas['count_periods'] == '5' ) { //按年
                    $group .= ',report.myear';
                    $orderby .= ',report.myear';
                }
            }
            $where .= " AND amazon_goods.goods_operation_user_admin_id > 0 AND amazon_goods.channel_goods_operation_pattern = 1";
        }

        if($datas['is_count'] == '1' && $datas['is_median'] != 1 && $this->haveFbaFields == true && empty($datas['where_detail']['target'])){ //做汇总时 ， 不管任何维度的汇总，本质都是sku 的汇总
            $group = "report.goods_sku ,report.channel_id" ;
            $fbaDataGroup = 'amazon_goods.goods_sku,amazon_goods.goods_channel_id';
            if ($datas['count_periods'] == '1' ) { //按天
                $group .= ',report.myear , report.mmonth  , report.mday';
            } else if ($datas['count_periods'] == '2' ) { //按周
                $group .= ',report.mweekyear , report.mweek';
            } else if ($datas['count_periods'] == '3' ) { //按月
                $group .= ',report.myear , report.mmonth';
            } else if ($datas['count_periods'] == '4' ) {  //按季
                $group .= ',report.myear , report.mquarter';
            } else if ($datas['count_periods'] == '5' ) { //按年
                $group .= ',report.myear';
            }
        }

        if (isset($datas['is_time_sort']) && $datas['is_time_sort'] == 1 && !empty($orderbyTmp) && $datas['count_periods'] > 0 && $datas['show_type'] == '2'){//按周期排序添加
            $orderby = $orderbyTmp;
        }

        if (!empty($where_detail)) {
            if (!empty($where_detail['transport_mode'])) {
                if(!is_array($where_detail['transport_mode'])){
                    $transport_modes = explode(',' , $where_detail['transport_mode']) ;
                }else{
                    $transport_modes = $where_detail['transport_mode'] ;
                }
                if(count($transport_modes) == 1){
                    $where .= ' AND report.goods_Transport_mode = ' . ($transport_modes[0] == 'FBM' ? 1 : 2);
                }
            }
            if(!empty($where_detail['up_status'])){
                $where.= " AND report.goods_up_status = " . (intval($where_detail['up_status']) == 1 ? 1 : 2 );
            }
            if(!empty($where_detail['is_care'])){
                $where.= " AND report.goods_is_care = " . (intval($where_detail['is_care']) == 1 ? 1 : 0 );
            }
            if(!empty($where_detail['is_new'])){
                $where.= " AND report.goods_is_new = " . (intval($where_detail['is_new']) == 1 ? 1 : 0 );
            }
            if (!empty($where_detail['group_id'])) {
                if(is_array($where_detail['group_id'])){
                    $group_str = implode(',', $where_detail['group_id']);
                }else{
                    $group_str = $where_detail['group_id'] ;
                }

                if (!empty($group_str)) {
                    $where .= " AND report.goods_group_id  IN ( " . $group_str . ")";
                }elseif ($group_str == 0){
                    $where .= " AND report.goods_group_id = 0 ";
                }
            }
            if (!empty($where_detail['isku_id'])) {
                if(is_array($where_detail['isku_id'])){
                    $isku_id_str = implode(',', $where_detail['isku_id']);
                }else{
                    $isku_id_str = $where_detail['isku_id'] ;
                }

                if (!empty($isku_id_str)) {
                    $where .= " AND report.goods_isku_id  IN ( " . $isku_id_str . ")";
                }elseif ($isku_id_str == 0){
                    $where .= " AND report.goods_isku_id = 0 ";
                }
            }
            if (!empty($where_detail['developer_id'])) {
                if(is_array($where_detail['developer_id'])){
                    $developer_str = implode(',', $where_detail['developer_id']);
                }else{
                    $developer_str = $where_detail['developer_id'] ;
                }

                if (!empty($developer_str)) {
                    $where .= " AND report.isku_developer_id  IN ( " . $developer_str . ")";
                }
            }
            if (!empty($where_detail['head_id'])) {
                if(is_array($where_detail['head_id'])){
                    $head_str = implode(',', $where_detail['head_id']);
                }else{
                    $head_str = $where_detail['head_id'] ;
                }

                if (!empty($head_str)) {
                    $where .= " AND report.isku_head_id  IN ( " . $head_str . ")";
                }
            }
            if(!empty($where_detail['product_category_name'])){
                $where_detail['product_category_name'] = is_array($where_detail['product_category_name']) ? $where_detail['product_category_name'] : json_decode($where_detail['product_category_name'],true);
                if(is_array($where_detail['product_category_name'])){
                    $product_category_name_str="'".join("','",$where_detail['product_category_name'])."'";
                }else{
                    $product_category_name_str = "'".$where_detail['product_category_name']."'" ;
                }

                if (!empty($product_category_name_str)) {
                    $where .= " AND report.goods_product_category_name_1  IN ( " . $product_category_name_str . ")";
                }
            }
            if (!empty($where_detail['operators_id'])  or (isset($where_detail['operators_id']) && ($where_detail['operators_id'] === '0' or $where_detail['operators_id'] === 0))) {
                if(is_array($where_detail['operators_id'])){
                    $operators_str = implode(',', $where_detail['operators_id']);
                }else{
                    $operators_str = $where_detail['operators_id'] ;
                }
                $where .= " AND report.goods_operation_user_admin_id  IN ( " . $operators_str . " ) ";
            }

            if (!empty($where_detail['tag_id'])) {
                $tags_where = "";
                if(is_array($where_detail['tag_id'])){
                    $tag_str = implode(',', $where_detail['tag_id']);

                }else{
                    $tag_str = $where_detail['tag_id'] ;
                }
                if($datas['count_dimension'] == 'tags'){
                    if (!empty($tag_str)) {
                        if (in_array(0,explode(",",$tag_str))){
                            $where .= " AND (tags_rel.tags_id  IN ( " . $tag_str . " )  OR  tags_rel.tags_id IS NULL )  ";

                        }else{
                            $where .= " AND tags_rel.tags_id  IN ( " . $tag_str . " ) ";

                        }
                    }elseif ($tag_str == 0){
                        $where .= " AND (tags_rel.tags_id = 0 OR tags_rel.tags_id IS NULL) ";
                    }
                }else{
                    if (strpos($group, 'tags_rel.tags_id') === false) {
                        if (!empty($tag_str)) {
                            $tag_arr = explode(",",$tag_str);
                            $where_or_temp = [];
                            foreach ($tag_arr as $val){
                                $where_or_temp[] = "tags.tags_id like '%,{$val},%'";
                            }
                            if (in_array(0,$tag_arr)){
//                                $tags_where .= " AND (tags_rel.tags_id  IN ( " . $tag_str . " ))  ";
                                $where_or_temp[] = " tags.tags_id IS NULL ";
                            }else{
                                $tags_where .= " AND tags_rel.tags_id  IN ( " . $tag_str . " ) ";

                            }
                            $where .= " AND (". implode(' OR ',$where_or_temp)." )";
                        }elseif ($tag_str == 0){
//                            $tags_where .= " AND (tags_rel.tags_id = 0) ";
                            $where .= " AND (tags.tags_id like '%,0,%' OR tags.tags_id IS NULL) ";
                        }
                        if($isMysql){
                            $concat_str = "GROUP_CONCAT(DISTINCT tags_rel.tags_id SEPARATOR ',')";
                        }else{
                            $concat_str = "array_join(array_agg(tags_rel.tags_id), ',')";
                        }
                        $table .= "LEFT JOIN (SELECT tags_rel.goods_id,concat(',', {$concat_str}, ',') as \"tags_id\" FROM {$this->table_amazon_goods_tags_rel} AS tags_rel LEFT JOIN {$this->table_amazon_goods_tags} AS gtags ON gtags.id = tags_rel.tags_id AND gtags.db_num = '{$this->dbhost}' AND gtags.status = 1 where tags_rel.db_num = '{$this->dbhost}' AND tags_rel.status = 1 {$tags_where} GROUP BY tags_rel.goods_id) as tags ON tags.goods_id = amazon_goods.goods_g_amazon_goods_id";
                    }
                }
            }

            if(!empty($where_detail['sku'])){
                if(is_array($where_detail['sku'])){
                    $sku_str="'".join("','",$where_detail['sku'])."'";
                }else{
                    $sku_str = "'".$where_detail['sku']."'" ;
                }

                if (!empty($sku_str)) {
                    $where .= " AND report.goods_sku  IN ( " . $sku_str . ")";
                }
            }

            $target_wheres = $where_detail['target'] ?? '';
            $condition_relation = $where_detail['condition_relation'] ?? 'AND';
            if (!empty($target_wheres)) {
                foreach ($target_wheres as $target_where) {
                    //如果新版FBA指标筛选里包含了FBA指标 ， 那么汇总就不展示
                    if(in_array($target_where['key'],array_keys($fbaCommonArr)) || in_array($target_where['key'],$fba_target_key)){
                        //如果新版FBA指标筛选里包含了FBA指标 ， 那么汇总就不展示
                        if($datas['is_count'] == 1 && $datas['stock_datas_origin'] == 1){
                            return array('lists'=>[] , 'count'=>0);
                        }
                        if(in_array($target_where['key'],$fba_target_key)){
                            $target_where['is_custom'] = 1;
                        }
                        $this->fbaWhereDetail[] = $target_where;
                        continue;
                    }
                    //新版指标筛选里包含了ERP指标,不汇总
                    if (in_array($target_where['key'], $erp_target_key) || isset($erp_isku_fields_arr[$target_where['key']]) || isset($erp_report_fields_arr[$target_where['key']])){
                        if($datas['is_count'] == 1 && $datas['stock_datas_origin'] == 1){
                            return ['lists' => [], 'count' => 0];
                        }
                    }
                    if(!empty($fields[$target_where['key']])){
                        $where_value = $target_where['value'];
                        if (strpos($where_value, '%') !== false) {
                            $where_value = round($where_value / 100, 4);
                        }
                        //日均
                        $target_where['avg'] = !empty($target_where['avg']) && (int)$target_where['avg'] > 1 ? " / {$target_where['avg']}" : "";
                        if (empty($having)) {
                            $having .= '(' . '(' .  $fields[$target_where['key']] . ') ' . $target_where['avg'] . ') ' . $target_where['formula'] . $where_value;
                        } else {
                            $having .= ' ' .$condition_relation . '(' . '(' .  $fields[$target_where['key']] . ') ' . $target_where['avg'] . ') ' . $target_where['formula'] . $where_value;
                        }
                    }

                }
            }
        }

        if (!empty($having)) {
            $group .= " having " . $having;
        }

        $group = str_replace("{:RATE}", $exchangeCode, $group ?? '');
        $where = str_replace("{:RATE}", $exchangeCode, $where ?? '');
        $orderby = str_replace("{:RATE}", $exchangeCode, $orderby ?? '');
        $group = str_replace("{:ERP_RATE}", $exchangeCode, $group ?? '');
        $where = str_replace("{:ERP_RATE}", $exchangeCode, $where ?? '');
        $orderby = str_replace("{:ERP_RATE}", $exchangeCode, $orderby ?? '');
        $orderby = str_replace("{:RMBRATE}",$this->cost_logistics_rate , $orderby);
        $where = str_replace("{:RMBRATE}",$this->cost_logistics_rate , $where);
        $group = str_replace("{:RMBRATE}",$this->cost_logistics_rate , $group);
        $group = str_replace("{:DAY}", $day_param, $group);
        $where = str_replace("{:DAY}", $day_param, $where);
        $orderby = str_replace("{:DAY}", $day_param, $orderby);
        $limit_num = 0 ;
        if($datas['show_type'] == 2 && $datas['limit_num'] > 0 ){
            $limit_num = $datas['limit_num'] ;
        }

        if(!empty($datas['compare_data'])){
            $compareData = $this->getCompareDatas($datas , 1 , $exchangeCode , $day_param ,$currencyInfo ) ;
        }else{
            $compareData = array();
        }

        if($this->haveFbaFields){
            $fbaData = $this->joinGoodsFbaTable($datas,$channel_arr,$currencyInfo,$exchangeCode,$fba_target_key);
            //if(!empty($fbaData) && $datas['is_count'] == 1 && $datas['count_dimension'] == 'sku' && $datas['is_distinct_channel'] == 1) {
            if(!empty($fbaData) && $datas['is_count'] == 1 ) {
                //sku区分店铺总计
                $fbaData['group'] = $fbaDataGroup;//给count_table用的
            }
            if(!empty($fbaData)){
                if(!empty($fbaData['other_field'])){
                    $fbaData['other_field'] = str_replace("{:RATE}", $exchangeCode, str_replace("COALESCE(rates.rate ,1)","(COALESCE(rates.rate ,1)*1.00000)", $fbaData['other_field']));//去除presto除法把数据只保留4位导致精度异常，如1/0.1288 = 7.7639751... presto=7.7640
                    $fbaData['other_field'] = str_replace("{:DAY}", $day_param, $fbaData['other_field']);
                }
                if(!empty($fbaData['order'])){
                    $fbaData['order'] = str_replace("{:RATE}", $exchangeCode, str_replace("COALESCE(rates.rate ,1)","(COALESCE(rates.rate ,1)*1.00000)", $fbaData['order']));//去除presto除法把数据只保留4位导致精度异常，如1/0.1288 = 7.7639751... presto=7.7640
                    $fbaData['order'] = str_replace("{:DAY}", $day_param, $fbaData['order']);
                }
            }
        }else{
            $fbaData = array();
        }

        if ($this->haveErpIskuFields && $datas['is_count'] != 1){
            $erpIskuTable = $this->getErpIskuTable($datas, $userId, $channel_arr);
            $table .= $erpIskuTable;
        }
        $erpData = [];
        if ($this->haveErpReportFields && $datas['is_count'] != 1){
            $erpReportTable = $this->getErpReportTable($datas, $userId, $channel_arr);

            if ($datas['show_type'] == 1){
                $erpData = $this->getTimeErpReportData($datas, $fields, $exchangeCode);
                $erpData['report_table'] = $erpReportTable;
            }else{
                $table .= $erpReportTable;
            }
        }

        $count = 0;
        if ($count_tip == 2) { //仅统计总条数

            $count = $this->getTotalNum($where, $table, $group, true,$isMysql ,$compareData,$field_data);
            if($limit_num > 0 && $count > $limit_num){
                $count = $limit_num ;
            }
        } else if ($count_tip == 1) {  //仅仅统计列表
            if ($datas['is_count'] == 1){
                if($datas['total_status'] == 1){
                    $count = $this->getTotalNum($where, $table, $group,true,$isMysql,$compareData,$field_data,$fbaData);
                }
                $where = $this->getLimitWhere($where,$datas,$table,$limit,$orderby,$group);

                if (($this->haveErpIskuFields || $this->haveErpReportFields) && !($datas['count_dimension'] == 'sku' && $datas['show_type'] == 2))
                {
                    $other_param = [
                        'user_id' => $userId,
                        'channel_arr' => $channel_arr
                    ];
                    $lists = $this->queryHaveErpList($fields, $datas, $exchangeCode, $day_param, $field_data, $table, $where, $group, true, $isMysql, $compareData, $fbaData, $other_param);

                } elseif(!empty($where_detail['target'])){
                    $lists = $this->queryList($fields,$datas,$exchangeCode,$day_param,$field_data,$table,$where,$group,true,$isMysql,$compareData,$fbaData);
                }else {
                    //获取总计时 ， 更改连表ON 为 origin_table.user_id = compare_table1.user_id ;
                    if(!empty($compareData)){
                        foreach($compareData as $k3=>$cdata3){
                            $compareData[$k3]['on'] = 'origin_table.user_id = compare_table'.($k3+1).'.user_id' ;
                        }
                    }
                    $lists = $this->select($where, $field_data, $table, "", "", "", true,null,300,$isMysql,$compareData,$fbaData,[]);
                }
            }elseif($datas['is_median'] == 1){
                $median_limit = !empty($datas['limit_num']) ? $limit : '';
                $median_order = !empty($datas['limit_num']) ? $orderby : '';
                $origin_sql = $this->getSelectSql($where, $field_data, $table, $median_limit, $median_order, $group,true,$isMysql);
                $lists = $this->getMedianValue($datas,$origin_sql,null,300,$isMysql);
            }else{
                $lists = $this->select($where, $field_data, $table, $limit, $orderby, $group,true,null,300,$isMysql,$compareData,$fbaData,$erpData,$this->isUseTmpTable,$this->isReadTmpTable);
                $total_user_sessions_views = array();
                if ( $datas['show_type'] == 2 && $datas['sort_target'] != 'goods_views_rate' && $datas['sort_target'] != 'goods_buyer_visit_rate' && $datas['force_sort'] != 'goods_views_rate' && $datas['force_sort'] != 'goods_buyer_visit_rate' && !$datas['is_use_goods_view_sort'] && $datas['is_median'] != 1){
                    $total_user_sessions_views = $this->getGoodsViewsVisitRate(array(), $fields, $datas,$isMysql);

                }
                $lists = $this->handleReturnGoodsList($lists,$datas,$fields,$total_user_sessions_views);

//                if (!empty($lists) && $datas['show_type'] == 2 && (!empty($fields['goods_views_rate']) || !empty($fields['goods_buyer_visit_rate'])) && $datas['is_count'] != 1 && $datas['count_periods'] > 0){
//                    //页面浏览次数百分比  买家访问次数百分比
//                    $lists = $this->getGoodsViewsVisitRate($lists, $fields, $datas);
//                }
                if($datas['show_type'] == 2 && $datas['stock_datas_origin'] != 1 && ( !empty($fields['fba_sales_stock']) || !empty($fields['fba_sales_day']) || !empty($fields['fba_reserve_stock']) || !empty($fields['fba_recommended_replenishment']) || !empty($fields['fba_special_purpose']) )){
                    $lists = $this->getGoodsFbaDataTmp($lists , $fields , $datas,$channel_arr) ;
                }elseif (!empty($lists) && $datas['show_type'] == 1 && $datas['stock_datas_origin'] != 1 && ( !empty($other_target['fba_sales_stock']) || !empty($other_target['fba_sales_day']) || !empty($other_target['fba_reserve_stock']) || !empty($other_target['fba_recommended_replenishment']) || !empty($other_target['fba_special_purpose']) || !empty($other_target['fba_receiving_on_the_way']) || !empty($other_target['fba_receiving']) || !empty($other_target['fba_reserve_stock_handle']) || !empty($other_target['fba_recommended_replenishment']) || !empty($other_target['fba_sales_not_stock']))){
                    $lists = $this->getGoodsFbaDataTmp($lists , $other_target , $datas,$channel_arr) ;
                }
                if($datas['show_type'] == 2 && !$this->haveErpIskuFields && ( !empty($fields['ark_erp_purchasing_num']) || !empty($fields['ark_erp_send_num']) || !empty($fields['ark_erp_good_num']) || !empty($fields['ark_erp_bad_num']) || !empty($fields['ark_erp_lock_num']) || !empty($fields['ark_erp_goods_cost_total']) )){
                    $lists = $this->getGoodsErpData($lists , $fields , $datas , $rateInfo) ;
                }

                //获取rank数据
                if (!empty($lists) && $datas['is_count'] == 0 && $datas['show_type'] == 2 ){
                    $lists = $this->getGoodsRankData($lists , $fields , $datas,$channel_arr) ;
                }
                //自定义公式涉及到fba
                if ($datas['show_type'] == 2 && !empty($lists)) {
                    foreach ($lists as $k => $item) {
                        foreach ($item as $key => $value) {
                            if (in_array($key, $fba_target_key)) {
                                $item[$key] = $this->count_custom_formula($value, $item);
                            }
                        }
                        $lists[$k] = $item;
                    }
                }
            }
        } else {  //统计列表和总条数
            if ($datas['is_count'] == 1){
                if($datas['total_status'] == 1){
                    $count = $this->getTotalNum($where, $table, $group,true,$isMysql,$compareData,$field_data,$fbaData);
                }
                $where = $this->getLimitWhere($where,$datas,$table,$limit,$orderby,$group);

                if (($this->haveErpIskuFields || $this->haveErpReportFields) && !($datas['count_dimension'] == 'sku' && $datas['show_type'] == 2))
                {
                    $other_param = [
                        'user_id' => $userId,
                        'channel_arr' => $channel_arr
                    ];
                    $lists = $this->queryHaveErpList($fields, $datas, $exchangeCode, $day_param, $field_data, $table, $where, $group, true, $isMysql, $compareData, $fbaData, $other_param);

                }elseif(!empty($where_detail['target'])){
                    $lists = $this->queryList($fields,$datas,$exchangeCode,$day_param,$field_data,$table,$where,$group,true,$isMysql,$compareData,$fbaData);
                }else{
                    //获取总计时 ， 更改连表ON 为 origin_table.user_id = compare_table1.user_id ;
                    if(!empty($compareData)){
                        foreach($compareData as $k3=>$cdata3){
                            $compareData[$k3]['on'] = 'origin_table.user_id = compare_table'.($k3+1).'.user_id' ;
                        }
                    }
                    $lists = $this->select($where, $field_data, $table,"","","",true,null,300,$isMysql,$compareData,$fbaData);
                }
                $logger = ApplicationContext::getContainer()->get(LoggerFactory::class)->get('dataark', 'debug');
                $logger->info('getListByGoods Total Request', [$this->getLastSql()]);
            }elseif($datas['is_median'] == 1){
                $median_limit = !empty($datas['limit_num']) ? $limit : '';
                $median_order = !empty($datas['limit_num']) ? $orderby : '';
                $origin_sql = $this->getSelectSql($where, $field_data, $table, $median_limit, $median_order, $group,true,$isMysql);
                $lists = $this->getMedianValue($datas,$origin_sql,null,300,$isMysql);
            }else{
                $parallel = new Parallel();
                $parallel->add(function () use($where, $field_data, $table, $limit, $orderby, $group,$isMysql,$compareData,$fbaData, $erpData){
                    $lists = $this->select($where, $field_data, $table, $limit, $orderby, $group,true,null,300,$isMysql,$compareData,$fbaData, $erpData,$this->isUseTmpTable,$this->isReadTmpTable);
                    return $lists;
                });
                $parallel->add(function () use($where, $table, $group,$isMysql,$compareData,$field_data,$fbaData){
                    $count = $this->getTotalNum($where, $table, $group,true,$isMysql,$compareData,$field_data,$fbaData);
                    return $count;
                });
                $table_sessions_views = "{$this->table_dws_goods_day_report} AS report";
                $parallel->add(function () use($datas,$fields,$isMysql,$table_sessions_views){
                    $total_user_sessions_views = array();
                    if ( $datas['show_type'] == 2 && $datas['sort_target'] != 'goods_views_rate' && $datas['sort_target'] != 'goods_buyer_visit_rate' && $datas['force_sort'] != 'goods_views_rate' && $datas['force_sort'] != 'goods_buyer_visit_rate' && !$datas['is_use_goods_view_sort'] && $datas['is_median'] != 1){
                        $total_user_sessions_views = $this->getGoodsViewsVisitRate(array(), $fields, $datas,$isMysql,$table_sessions_views);

                    }
                    return $total_user_sessions_views;
                });



                try{
                    // $results 结果为 [1, 2]
                    $results = $parallel->wait();
                    $lists = $results[0];
                    $count = $results[1];
                    $total_user_sessions_views = $results[2];
                } catch(ParallelExecutionException $e){
                    // $e->getResults() 获取协程中的返回值。
                    // $e->getThrowables() 获取协程中出现的异常。
                    Log::getClient('dataark', 'dataark')->info('协程异常：', [$e->getMessage()]);
                }

                $lists = $this->handleReturnGoodsList($lists,$datas,$fields,$total_user_sessions_views);

                $logger = ApplicationContext::getContainer()->get(LoggerFactory::class)->get('dataark', 'debug');
                $logger->info('getListByGoods Request', [$this->getLastSql()]);
//                if (!empty($lists) && $datas['show_type'] == 2 && (!empty($fields['goods_views_rate']) || !empty($fields['goods_buyer_visit_rate'])) && $datas['is_count'] != 1 && $datas['count_periods'] > 0){
//                    //页面浏览次数百分比  买家访问次数百分比
//                    $lists = $this->getGoodsViewsVisitRate($lists, $fields, $datas);
//                }
                if(!empty($lists) && $datas['show_type'] == 2 && $datas['stock_datas_origin'] != 1 && ( !empty($fields['fba_sales_stock']) || !empty($fields['fba_sales_day']) || !empty($fields['fba_reserve_stock']) || !empty($fields['fba_recommended_replenishment']) || !empty($fields['fba_special_purpose']) )){
                    $lists = $this->getGoodsFbaDataTmp($lists , $fields , $datas,$channel_arr) ;
                }elseif (!empty($lists) && $datas['show_type'] == 1 && $datas['stock_datas_origin'] != 1 && ( !empty($other_target['fba_sales_stock']) || !empty($other_target['fba_sales_day']) || !empty($other_target['fba_reserve_stock']) || !empty($other_target['fba_recommended_replenishment']) || !empty($other_target['fba_special_purpose']) || !empty($other_target['fba_receiving_on_the_way']) || !empty($other_target['fba_receiving']) || !empty($other_target['fba_reserve_stock_handle']) || !empty($other_target['fba_recommended_replenishment']) || !empty($other_target['fba_sales_not_stock']))){
                    $lists = $this->getGoodsFbaDataTmp($lists , $other_target , $datas,$channel_arr) ;
                }
                if(!empty($lists) && $datas['show_type'] == 2 && !$this->haveErpIskuFields && ( !empty($fields['ark_erp_purchasing_num']) || !empty($fields['ark_erp_send_num']) || !empty($fields['ark_erp_good_num']) || !empty($fields['ark_erp_bad_num']) || !empty($fields['ark_erp_lock_num']) || !empty($fields['ark_erp_goods_cost_total']) )){
                    $lists = $this->getGoodsErpData($lists , $fields , $datas , $rateInfo) ;
                }

                //获取rank数据
                if (!empty($lists) && $datas['is_count'] == 0 && $datas['show_type'] == 2 ){
                    $lists = $this->getGoodsRankData($lists , $fields , $datas,$channel_arr) ;
                }

                //自定义公式涉及到fba
                if ($datas['show_type'] == 2 && !empty($lists)) {
                    foreach ($lists as $k => $item) {
                        foreach ($item as $key => $value) {
                            if (in_array($key, $fba_target_key)) {
                                $item[$key] = $this->count_custom_formula($value, $item);
                            }
                        }
                        $lists[$k] = $item;
                    }
                }
            }

            if($limit_num > 0 && $count > $limit_num) {
                $count = $limit_num;
            }

        }
        $targets = is_array($datas['target']) ? $datas['target'] :  explode(',' , $datas['target'])  ;
        if(!empty($lists) && empty($datas['is_median']) && $datas['show_type'] == 2 && $datas['limit_num'] > 0 && !empty($order) && !empty($datas['sort_target']) && !empty($sort) && !empty($datas['sort_order'] &&  in_array($sort , $targets) && in_array($datas['sort_target'] , $targets))){
            //根据字段对数组$lists进行排列
            $sort_names = array_column($lists,$sort);
            $order2  =  $order == 'desc' ? \SORT_DESC : \SORT_ASC ;
            array_multisort($sort_names,$order2,$lists);
        }
        $rt['lists'] = empty($lists) ? array() : $lists;
        $rt['lists'] = $this->handleReturnData($datas,$rt['lists']);;
        $rt['count'] = intval($count);
        return $rt;
    }

    protected function getTotalNum($where = '', $table = '', $group = '', $isJoin = false, $isMysql = false , $compareData = array(),$field_data = '',$fbaData = array())
    {
        if(empty($compareData) && empty($fbaData)){
            return $this->count($where, $table, $group, '', '', $isJoin, null, 300, $isMysql );
        }else{   //查询有对比数据的汇总 ， 需查出原表字段
            return $this->count($where, $table, $group, $field_data, $field_data, $isJoin, null, 300, $isMysql , $compareData,$fbaData);
        }

    }

    /**
     * 获取商品级限制排名的总计where
     * @author json.qiu 20210317
     *
     * @param $where
     * @param $datas
     * @param $table
     * @param $limit
     * @param $orderby
     * @param $group
     * @return string
     */
    protected function getLimitWhere($where,$datas,$table,$limit,$orderby,$group)
    {
        if ($datas['limit_num'] <= 0){
            return $where;
        }
        $is_join = true;
        switch ($datas['count_dimension']){
            //商品级
            case "parent_asin":
                if($datas['is_distinct_channel'] == '1'){
                    $field_data = "max(report.channel_id) as channel_id,max(report.goods_parent_asin) as goods_parent_asin";

                }else{
                    $field_data = "max(report.goods_parent_asin) as goods_parent_asin";
                }
                break;
            case "asin":
                if($datas['is_distinct_channel'] == '1'){
                    $field_data = "max(report.channel_id) as channel_id,max(report.goods_asin) as goods_asin";
                }else{
                    $field_data = "max(report.goods_asin) as goods_asin";
                }
                break;
            case "sku":
                if($datas['is_distinct_channel'] == '1'){
                    $field_data = "max(report.amazon_goods_id) as amazon_goods_id";
                }else{
                    $field_data = "max(report.goods_sku) as goods_sku";
                }

                break;
            case "isku":
                $field_data = "max(report.goods_isku_id) as goods_isku_id";
                break;
            case "class1":
                $field_data = "max(report.goods_product_category_name_1) as goods_product_category_name_1";
                break;
            case "group":
                $field_data = "max(report.goods_group_id) as goods_group_id";
                break;
            case "tags":
                $field_data = "max(tags_rel.tags_id) as tags_id";
                break;
            case "head_id":
                $field_data = "max(report.isku_head_id) as isku_head_id";
                break;
            case "developer_id":
                $field_data = "max(report.isku_developer_id) as isku_developer_id";
                break;
                //店铺级
            case "site_id":
                $is_join = false;
                $field_data = "max(report.site_id) as site_id";
                break;
            case "channel_id":
                $is_join = false;
                $field_data = "max(report.channel_id) as channel_id";
                break;
            case "department":
                $is_join = false;
                $field_data = "max(dc.user_department_id) as user_department_id";
                break;
            case "admin_id":
                $is_join = false;
                $field_data = "max(uc.admin_id) as admin_id";
                break;
                //运营人员
            case "operators":
                $is_join = false;
                $field_data = "max(report.goods_operation_user_admin_id) as goods_operation_user_admin_id";
                break;

            default:
                return $where;
        }
        $lists = $this->select($where,$field_data , $table, $limit, $orderby, $group,$is_join );
        if (!empty($lists)){
            switch ($datas['count_dimension']){
                //商品级
                case "parent_asin":
                    if($datas['is_distinct_channel'] == '1'){
                        $channel_arr = array();
                        foreach ($lists as $v){
                            $channel_arr[$v['channel_id']][] = $v['goods_parent_asin'];
                        }
                        $where_tmp = array();
                        foreach ($channel_arr as $key => $value){
                            $where_tmp[] = " (report.channel_id = {$key} AND report.goods_parent_asin IN ( '".implode("','",$value)."' )) ";
                        }
                        $where .= " AND (".implode(" OR ",$where_tmp).")";
                    }else{
                        $where .=  " AND report.goods_parent_asin IN ( '".implode("','",array_column($lists,'goods_parent_asin'))."' )";
                    }
                    break;
                case "asin":
                    if($datas['is_distinct_channel'] == '1'){
                        $channel_arr = array();
                        foreach ($lists as $v){
                            $channel_arr[$v['channel_id']][] = $v['goods_asin'];
                        }
                        $where_tmp = array();
                        foreach ($channel_arr as $key => $value){
                            $where_tmp[] = " (report.channel_id = {$key} AND report.goods_asin IN ( '".implode("','",$value)."' )) ";
                        }
                        $where .= " AND (".implode(" OR ",$where_tmp).")";
                    }else{
                        $where .=  " AND report.goods_asin IN ( '".implode("','",array_column($lists,'goods_asin'))."' )";
                    }
                    break;
                case "sku":
                    if($datas['is_distinct_channel'] == '1'){
                        $where .=  " AND report.amazon_goods_id IN (".implode(",",array_column($lists,'amazon_goods_id')).")";
                    }else{
                        $where .=  " AND report.goods_sku IN ( '".implode("','",array_column($lists,'goods_sku'))."')";
                    }
                    break;
                case "isku":
                    $where .=  " AND report.goods_isku_id IN (".implode(",",array_column($lists,'goods_isku_id')).")";
                    break;
                case "class1":
                    $where .=  " AND report.goods_product_category_name_1 IN ( '".implode("','",array_column($lists,'goods_product_category_name_1'))."' )";
                    break;
                case "group":
                    $where .=  " AND report.goods_group_id IN (".implode(",",array_column($lists,'goods_group_id')).")";
                    break;
                case "tags":
                    $where .=  " AND tags_rel.tags_id IN (".implode(",",array_column($lists,'tags_id')).") AND tags_rel.status =1";
                    break;
                case "head_id":
                    $where .=  " AND report.isku_head_id IN (".implode(",",array_column($lists,'isku_head_id')).")";
                    break;
                case "developer_id":
                    $where .=  " AND report.isku_developer_id IN (".implode(",",array_column($lists,'isku_developer_id')).")";
                    break;
                //店铺级
                case "site_id":
                    $where .=  " AND report.site_id IN (".implode(",",array_column($lists,'site_id')).")";
                    break;
                case "channel_id":
                    $where .=  " AND report.channel_id IN (".implode(",",array_column($lists,'channel_id')).")";
                    break;
                case "department":
                    $where .=  " AND dc.user_department_id IN (".implode(",",array_column($lists,'user_department_id')).")";
                    break;
                case "admin_id":
                    $where .=  " AND uc.admin_id IN (".implode(",",array_column($lists,'admin_id')).")";
                    break;
                    //运营人员
                case "operators":
                    $where .=  " AND report.goods_operation_user_admin_id IN (".implode(",",array_column($lists,'goods_operation_user_admin_id')).")";
                    break;

                default:
                    return $where;
            }
        }
        return $where;
    }

    protected function getGoodsFbaDataTmp($lists = array() , $fields = array() , $datas = array(),$channel_arr = array())
    {
        if(empty($lists)){
            return $lists ;
        }else{
            $amazon_fba_inventory_v3_md = new AmazonFbaInventoryV3MySQLModel([], $this->dbhost, $this->codeno);
            $where = "g.user_id = " . intval($lists[0]['user_id']) ." AND g.is_parent=0";
            if (!empty($channel_arr)){
                if (count($channel_arr)==1){
                    $where .= " AND rel.channel_id = ".intval(implode(",",$channel_arr));
                }else{
                    $where .= " AND rel.channel_id IN (".implode(",",$channel_arr).")";
                }
            }
            $table = "g_amazon_fba_inventory_v3_{$this->codeno} as g LEFT JOIN g_amazon_fba_inventory_v3_rel_{$this->codeno} as rel ON g.id = rel.inventory_id " ;
            if($datas['count_dimension'] == 'sku'){
                if($datas['is_distinct_channel'] == 1){
                    $table_fields = 'max(g.seller_sku) as sku , rel.channel_id' ;
                    $table_group = 'g.id  , rel.channel_id' ;
                    $fba_fields = $group = 'sku , channel_id' ;
                }else{
                    $table_fields = 'max(g.seller_sku) as sku , g.id' ;
                    $table_group = ' g.id' ;
                    $fba_fields = $group = 'sku, id' ;
                }
            }else if($datas['count_dimension'] == 'asin'){
                if($datas['is_distinct_channel'] == 1){
                    $table_fields = 'max(g.asin) as asin  , rel.channel_id' ;
                    $table_group = 'g.id , rel.channel_id' ;
                    $fba_fields = $group = 'asin , channel_id' ;
                }else{
                    $table_fields =  'max(g.asin) as asin  , g.id' ;
                    $table_group = ' g.id' ;
                    $fba_fields = $group = 'asin ,id ' ;
                }
            }else if($datas['count_dimension'] == 'parent_asin'){
                if($datas['is_distinct_channel'] == 1){
                    $table_fields =  'max(g.parent_asin) as parent_asin , rel.channel_id' ;
                    $table_group = 'g.id , rel.channel_id' ;
                    $fba_fields = $group = 'parent_asin , channel_id' ;
                }else{
                    $table_fields =  'max(g.parent_asin) as parent_asin ,  g.id' ;
                    $table_group = ' g.id' ;
                    $fba_fields = $group = 'parent_asin ,id ' ;
                }
            }else if($datas['count_dimension'] == 'isku'){
                $table.= " LEFT JOIN g_amazon_goods_ext_{$this->codeno} as ext ON ext.amazon_goods_id = rel.amazon_goods_id " ;

                $table_fields =  'max(ext.isku_id) as isku_id , g.id' ;
                $table_group = ' g.id' ;
                $fba_fields = $group = 'isku_id ,id' ;
            }else if($datas['count_dimension'] == 'class1'){
                //分类暂时没有 ，因为需要跨库查询
            }else if($datas['count_dimension'] == 'group'){ //分组
                $table.= " LEFT JOIN g_amazon_goods_ext_{$this->codeno} as ext ON ext.amazon_goods_id = rel.amazon_goods_id " ;

                $table_fields = 'max(ext.group_id) as group_id , g.id' ;
                $table_group = ' g.id' ;
                $fba_fields = $group = 'group_id , id' ;

            }else if($datas['count_dimension'] == 'tags'){ //标签（需要刷数据）
                $table.= " LEFT JOIN g_amazon_goods_ext_{$this->codeno} as ext ON ext.amazon_goods_id = rel.amazon_goods_id LEFT JOIN g_amazon_goods_tags_rel_{$this->codeno} as tags_rel ON tags_rel.goods_id = ext.amazon_goods_id " ;

                $table_fields =  'tags_rel.tags_id ,g.id' ;
                $table_group = 'tags_rel.tags_id , g.id' ;
                $fba_fields = $group = 'tags_id , id' ;


            }else if($datas['count_dimension'] == 'head_id') { //负责人
                //负责人暂时没有 ，因为需要跨库查询
            }else if($datas['count_dimension'] == 'developer_id') { //开发人员
                //开发人员暂时没有 ，因为需要跨库查询
            }else if($datas['count_dimension'] == 'all_goods'){
                if($datas['is_distinct_channel'] == 1) { //有区分店铺
                    $table_fields =  'rel.channel_id' ;
                    $table_group = 'g.id , rel.channel_id' ;
                    $fba_fields = $group = 'channel_id' ;
                }else{
                    $table_fields =  'g.id,g.user_id' ;
                    $table_group = 'g.id' ;
                    $fba_fields = 'id,user_id' ;
                    $group = 'user_id' ;
                }
            }else if($datas['count_dimension'] == 'goods_channel'){
                $table_fields = 'rel.channel_id' ;
                $table_group = 'g.id , rel.channel_id' ;
                $fba_fields = $group = 'channel_id' ;
            }


            $where_arr = array() ;
            foreach($lists as $list1){
                if($datas['count_dimension'] == 'sku'){
                    if($datas['is_distinct_channel'] == 1) {
                        $where_arr[] = array('sku' => addslashes($list1['sku']), 'channel_id' => $list1['channel_id']);
                    }else{
                        $where_arr[] = array('sku' => addslashes($list1['sku']));
                    }
                }else if($datas['count_dimension'] == 'asin'){
                    if($datas['is_distinct_channel'] == 1) {
                        $where_arr[] = array('asin' => addslashes($list1['asin']), 'channel_id' => $list1['channel_id']);
                    }else{
                        $where_arr[] = array('asin' => addslashes($list1['asin']));
                    }
                }else if($datas['count_dimension'] == 'parent_asin'){
                    if($datas['is_distinct_channel'] == 1) {
                        $where_arr[] = array('parent_asin' => addslashes($list1['parent_asin']), 'channel_id' => $list1['channel_id']);
                    }else{
                        $where_arr[] = array('parent_asin' => addslashes($list1['parent_asin']));
                    }
                }else if($datas['count_dimension'] == 'class1'){
                    //分类暂时没有 ，因为需要跨库查询
                }else if($datas['count_dimension'] == 'group'){
                    $where_arr[] = array('group_id'=>$list1['group_id']) ;
                }else if($datas['count_dimension'] == 'tags'){  //标签
                    $where_arr[] = array('tags_id'=>$list1['tags_id']) ;
                }else if($datas['count_dimension'] == 'head_id'){  //负责人
                    //负责人暂时没有 ，因为需要跨库查询
                }else if($datas['count_dimension'] == 'developer_id'){ //开发人
                    //开发人暂时没有 ，因为需要跨库查询
                }else if($datas['count_dimension'] == 'isku'){ //开发人
                    $where_arr[] = array('isku_id'=>$list1['isku_id']) ;
                }else if($datas['count_dimension'] == 'all_goods'){ //合计商品
                    //暂时没有
                }else {
                    $where_arr[] = array('channel_id'=>$list1['channel_id']) ;
                }
            }

            if($datas['count_dimension'] == 'sku' || $datas['count_dimension'] == 'asin' || $datas['count_dimension'] == 'parent_asin'){
                if($datas['is_distinct_channel'] == 1) {
                    $whereDatas = array() ;
                    foreach($where_arr as $wheres){
                        $whereDatas[$wheres['channel_id']][] = $wheres[$datas['count_dimension']] ;
                    }
                    $where_strs = array() ;
                    foreach($whereDatas as $cid => $wd){
                        $str = "'" . implode("','" , $wd) . "'" ;
                        if($datas['count_dimension'] == 'sku'){
                            $where_strs[] = '( rel.channel_id = ' . $cid . ' AND g.seller_sku ' . ' IN (' . $str . '))' ;
                        }else{
                            $where_strs[] = '( rel.channel_id = ' . $cid . ' AND g.'.$datas['count_dimension'] . ' IN (' . $str . '))' ;
                        }

                    }
                    $where_str = !empty($where_strs) ? "(".implode(' OR ' , $where_strs).")" : "";

                }else{
                    $where_strs = array_unique(array_column($where_arr , $datas['count_dimension'])) ;
                    $str = "'" . implode("','" , $where_strs) . "'" ;
                    if($datas['count_dimension'] == 'sku') {
                        $where_str = 'g.seller_sku' . ' IN (' . $str . ') ';
                    }else{
                        $where_str = 'g.' . $datas['count_dimension'] . ' IN (' . $str . ') ';
                    }
                }
            }else if($datas['count_dimension'] == 'class1'){
                //分类暂时没有 ，因为需要跨库查询
            }else if($datas['count_dimension'] == 'group'){
                $where_strs = array_unique(array_column($where_arr , 'group_id')) ;
                $where_str = 'ext.group_id IN (' . implode(',' , $where_strs) . ' ) ';
            }else if($datas['count_dimension'] == 'tags'){ //标签
                $where_strs = array_unique(array_column($where_arr , 'tags_id')) ;
                $where_str = 'tags_rel.tags_id IN (' . implode(',' , $where_strs) . ' ) AND tags_rel.status = 1';
            }else if($datas['count_dimension'] == 'head_id'){
                //负责人暂时没有 ，因为需要跨库查询
            }else if($datas['count_dimension'] == 'developer_id'){
                //开发人员暂时没有 ，因为需要跨库查询
            }else if($datas['count_dimension'] == 'isku'){
                $where_strs = array_unique(array_column($where_arr , 'isku_id')) ;
                $where_str = 'ext.isku_id IN (' . implode(',' , $where_strs) . ' ) ';
            }else if($datas['count_dimension'] == 'all_goods'){
                $where_str = '';
            }else{
                $where_strs = array_unique(array_column($where_arr , 'channel_id')) ;
                $where_str = 'rel.channel_id IN (' . implode(',' , $where_strs) . ' ) ';
            }
        }
        $where_str = !empty($where_str) ? $where_str . " AND " : "";
        $where.= ' AND ' . $where_str." g.id > 0 AND g.is_delete = 0" ;

        if ($datas['priv_value'] == UserAdminRolePrivModel::GOODS_PRIV_VALUE_RELATED_USER && !empty($datas['priv_goods_operation_user_admin_id'])){

            $where_priv = "(rel.operation_user_admin_id IN ({$datas['priv_goods_operation_user_admin_id']}))";
            if (!empty($datas['operation_channel_ids_arr'])){
                $where_priv .= " OR (rel.channel_id in ({$datas['operation_channel_ids_arr']}))";
            }
            $where .= " AND ($where_priv)";
        }
        if(isset($datas['where_detail']) && $datas['where_detail']){
            $is_rel_status = false;
            if (!is_array($datas['where_detail'])){
                $datas['where_detail'] = json_decode($datas['where_detail'],true);
            }
            if (!empty($datas['where_detail']['group_id'])){
                if(is_array($datas['where_detail']['group_id'])){
                    $group_str = implode(',', $datas['where_detail']['group_id']);

                }else{
                    $group_str = $datas['where_detail']['group_id'] ;
                }
                if($datas['count_dimension'] != 'group' && $datas['count_dimension'] != 'tags' && $datas['count_dimension'] != 'isku'){
                    $table.= " LEFT JOIN g_amazon_goods_ext_{$this->codeno} as ext ON ext.amazon_goods_id = rel.amazon_goods_id " ;
                    $is_rel_status = true;
                }
                $where .= ' AND ext.group_id IN (' . $group_str . ') ' ;
            }
            /*if (!empty($datas['where_detail']['transport_mode']) && !empty(trim($datas['where_detail']['transport_mode']))){
                $where .= ' AND g.Transport_mode = ' . ($datas['where_detail']['transport_mode'] == 'FBM' ? 1 : 2);
            } //FBA 信息 Transport_mode 必为 2   */
            if (!empty($datas['where_detail']['is_care']) && !empty(trim($datas['where_detail']['is_care']))){
                if($datas['count_dimension'] != 'group' && $datas['count_dimension'] != 'tags' && $datas['count_dimension'] != 'isku'){
                    if(!$is_rel_status){
                        $table.= " LEFT JOIN g_amazon_goods_ext_{$this->codeno} as ext ON ext.amazon_goods_id = rel.amazon_goods_id " ;
                        $is_rel_status = true;
                    }
                }
                $where .= ' AND ext.is_care = ' . (intval($datas['where_detail']['is_care'])==1?1:0);
            }
            if (!empty($datas['where_detail']['tag_id']) ){
                if(is_array($datas['where_detail']['tag_id'])){
                    $tag_str = implode(',', $datas['where_detail']['tag_id']);

                }else{
                    $tag_str = $datas['where_detail']['tag_id'] ;
                }
                if ($datas['count_dimension'] != 'tags'){
                    if($datas['count_dimension'] == 'group' || $datas['count_dimension'] == 'isku'){
                        $table.= " LEFT JOIN g_amazon_goods_tags_rel_{$this->codeno} as tags_rel ON tags_rel.goods_id = ext.amazon_goods_id " ;
                    }else{
                        if(!$is_rel_status){
                            $table.= " LEFT JOIN g_amazon_goods_ext_{$this->codeno} as ext ON ext.amazon_goods_id = rel.amazon_goods_id " ;
                        }
                        $table.= " LEFT JOIN g_amazon_goods_tags_rel_{$this->codeno} as tags_rel ON tags_rel.goods_id = ext.amazon_goods_id ";
                    }
                }
                $where .=' AND tags_rel.tags_id IN (' .  trim($tag_str) . ' ) AND tags_rel.status =1 ';
            }
        }
        $table_fields = !empty($table_fields) ? $table_fields . " , " : "";
        $table_fields.= ' g.fulfillable_quantity, g.available_days  ,g.reserved_quantity , g.replenishment_quantity , g.available_stock ,g.reserved_fc_transfers,g.reserved_fc_processing,g.unsellable_quantity,g.inbound_shipped_quantity,g.inbound_receiving_quantity' ;


        $fba_fields = !empty($fba_fields) ? $fba_fields . " , " : "";
        $fba_fields .= ' SUM((CASE WHEN fulfillable_quantity < 0 THEN 0 ELSE fulfillable_quantity END )) as fba_sales_stock ,MAX(( CASE WHEN available_days < 0 THEN 0 ELSE available_days END )) as  fba_sales_day , MAX(available_days) as max_fba_sales_day , MIN(available_days) as min_fba_sales_day , MIN((CASE WHEN available_days < 0 THEN 0 ELSE available_days END ))  as min_egt0_fba_sales_day , MAX(CASE WHEN available_days < 0 THEN 0 ELSE available_days END ) as max_egt0_fba_sales_day , SUM((CASE WHEN reserved_quantity < 0 THEN 0 ELSE reserved_quantity END )) as fba_reserve_stock  , SUM(( CASE WHEN replenishment_quantity < 0 THEN 0 ELSE replenishment_quantity END ))  as fba_recommended_replenishment , MAX(replenishment_quantity) as max_fba_recommended_replenishment ,MIN((replenishment_quantity)) as min_fba_recommended_replenishment , SUM(( CASE WHEN available_stock < 0 THEN 0 ELSE available_stock END )) as fba_special_purpose , MAX(available_stock) as  max_fba_special_purpose , MIN((available_stock) )  as min_fba_special_purpose ,SUM((CASE WHEN unsellable_quantity < 0 THEN 0 ELSE unsellable_quantity END )) as fba_sales_not_stock,SUM((CASE WHEN reserved_fc_transfers < 0 THEN 0 ELSE reserved_fc_transfers END )) as fba_reserve_stock_allocation,SUM((CASE WHEN reserved_fc_processing < 0 THEN 0 ELSE reserved_fc_processing END )) as fba_reserve_stock_handle,SUM((CASE WHEN inbound_shipped_quantity < 0 THEN 0 ELSE inbound_shipped_quantity END )) as fba_receiving_on_the_way,SUM((CASE WHEN inbound_receiving_quantity < 0 THEN 0 ELSE inbound_receiving_quantity END )) as fba_receiving';

        $table_group = !empty($table_group) ? " GROUP BY {$table_group}" : "";
        $table_tmp = " (SELECT {$table_fields} FROM {$table} WHERE {$where} {$table_group} ) as tmp  " ;
        $group = !empty($group) ? $group : "";
        $fbaDatas = array() ;
        $fbaData = $amazon_fba_inventory_v3_md->select('' , $fba_fields, $table_tmp ,'','',$group) ;
        $logger = ApplicationContext::getContainer()->get(LoggerFactory::class)->get('dataark', 'debug');
        $logger->info('getGoodsFbaDataTmp Mysql:', [ $amazon_fba_inventory_v3_md->getLastSql()]);

        if (!empty($fbaData)){
            foreach($fbaData as $fba){
                if($datas['count_dimension'] == 'sku'){
                    $fbaDatas = $this->handleGoodsFbaData($fba,'sku',$datas['is_distinct_channel'],$fbaDatas);
                }else if($datas['count_dimension'] == 'asin'){
                    $fbaDatas = $this->handleGoodsFbaData($fba,'asin',$datas['is_distinct_channel'],$fbaDatas);
                }else if($datas['count_dimension'] == 'parent_asin'){
                    $fbaDatas = $this->handleGoodsFbaData($fba,'parent_asin',$datas['is_distinct_channel'],$fbaDatas);
                }else if($datas['count_dimension'] == 'class1'){

                }else if($datas['count_dimension'] == 'group'){
                    $fbaDatas = $this->handleGoodsFbaData($fba,'group_id',$datas['is_distinct_channel'],$fbaDatas);
                }else if($datas['count_dimension'] == 'tags'){  //标签（需要刷数据）
                    $fbaDatas = $this->handleGoodsFbaData($fba,'tags_id',$datas['is_distinct_channel'],$fbaDatas);
                }else if($datas['count_dimension'] == 'head_id'){

                }else if($datas['count_dimension'] == 'developer_id'){

                }else if($datas['count_dimension'] == 'isku'){
                    $fbaDatas = $this->handleGoodsFbaData($fba,'isku_id',$datas['is_distinct_channel'],$fbaDatas);
                }elseif($datas['count_dimension'] == 'all_goods'){
                    $fba_data_field = $datas['is_distinct_channel'] == 1 ? 'channel_id' : 'user_id';
                    $fbaDatas = $this->handleGoodsFbaData($fba,$fba_data_field,$datas['is_distinct_channel'],$fbaDatas);
                }elseif($datas['count_dimension'] == 'goods_channel'){
                    $fbaDatas = $this->handleGoodsFbaData($fba,'channel_id',$datas['is_distinct_channel'],$fbaDatas);
                }
            }
        }

        foreach($lists as $k=>$list2){
            if($datas['count_dimension'] == 'sku'){
                if($datas['is_distinct_channel'] == 1) {
                    $fba_data = empty($fbaDatas[$list2['sku'] . '-' . $list2['channel_id']]) ? array() : $fbaDatas[$list2['sku'] . '-' . $list2['channel_id']];
                }else{
                    $fba_data = empty($fbaDatas[$list2['sku']]) ? array() : $fbaDatas[$list2['sku']];
                }
            }else if($datas['count_dimension'] == 'asin'){
                if($datas['is_distinct_channel'] == 1) {
                    $fba_data = empty($fbaDatas[$list2['asin'] . '-' . $list2['channel_id']]) ? array() : $fbaDatas[$list2['asin'] . '-' . $list2['channel_id']];
                }else{
                    $fba_data = empty($fbaDatas[$list2['asin']]) ? array() : $fbaDatas[$list2['asin']];
                }
            }else if($datas['count_dimension'] == 'parent_asin'){
                if($datas['is_distinct_channel'] == 1) {
                    $fba_data = empty($fbaDatas[$list2['parent_asin'] . '-' . $list2['channel_id']]) ? array() : $fbaDatas[$list2['parent_asin'] . '-' . $list2['channel_id']];
                }else{
                    $fba_data = empty($fbaDatas[$list2['parent_asin']]) ? array() : $fbaDatas[$list2['parent_asin']];
                }
            }else if($datas['count_dimension'] == 'class1'){
                $fba_data = empty($fbaDatas[$list2['class1']]) ? array() :  $fbaDatas[$list2['class1']];
            }else if($datas['count_dimension'] == 'group'){
                $fba_data = empty($fbaDatas[$list2['group_id']]) ? array() :  $fbaDatas[$list2['group_id']];
            }else if($datas['count_dimension'] == 'tags'){  //标签（需要刷数据）
                $fba_data = empty($fbaDatas[$list2['tags_id']]) ? array() :  $fbaDatas[$list2['tags_id']];
            }else if($datas['count_dimension'] == 'head_id'){
                $fba_data = empty($fbaDatas[$list2['head_id']]) ? array() : $fbaDatas[$list2['head_id']] ;
            }else if($datas['count_dimension'] == 'developer_id'){
                $fba_data = empty($fbaDatas[$list2['developer_id']]) ? array() : $fbaDatas[$list2['developer_id']] ;
            }else if($datas['count_dimension'] == 'isku'){
                $fba_data = empty($fbaDatas[$list2['isku_id']]) ? array() : $fbaDatas[$list2['isku_id']] ;
            }else if($datas['count_dimension'] == 'all_goods'){
                $fba_data_field = $datas['is_distinct_channel'] == 1 ? 'channel_id' : 'user_id';
                $fba_data = empty($fbaDatas[$list2[$fba_data_field]]) ? array() : $fbaDatas[$list2[$fba_data_field]] ;
            }

            if (!empty($fields['fba_sales_stock'])) {  //可售库存
                $lists[$k]['fba_sales_stock'] = empty($fba_data) ? null : $fba_data['fba_sales_stock'] ;
            }
            if (!empty($fields['fba_sales_not_stock'])) {  //不可售库存
                $lists[$k]['fba_sales_not_stock'] = empty($fba_data) ? null : $fba_data['fba_sales_not_stock'] ;
            }
            if (!empty($fields['fba_receiving_on_the_way'])) {  //fba待收货在途
                $lists[$k]['fba_receiving_on_the_way'] = empty($fba_data) ? null : $fba_data['fba_receiving_on_the_way'] ;
            }if (!empty($fields['fba_receiving'])) {  //fba待收货接受中
                $lists[$k]['fba_receiving'] = empty($fba_data) ? null : $fba_data['fba_receiving'] ;
            }
            if (!empty($fields['fba_sales_day'])) {  //可售天数
                $lists[$k]['fba_sales_day'] = empty($fba_data) ? null : $fba_data['fba_sales_day'] ;
                $lists[$k]['max_fba_sales_day'] = empty($fba_data) ? null : $fba_data['max_fba_sales_day'] ;
                $lists[$k]['min_fba_sales_day'] = empty($fba_data) ? null : $fba_data['min_fba_sales_day'] ;
                $lists[$k]['min_egt0_fba_sales_day'] = empty($fba_data) ? null : $fba_data['min_egt0_fba_sales_day'] ;
                $lists[$k]['max_egt0_fba_sales_day'] = empty($fba_data) ? null : $fba_data['max_egt0_fba_sales_day'] ;
            }
            if (!empty($fields['fba_reserve_stock'])) {  //预留库存
                $lists[$k]['fba_reserve_stock'] = empty($fba_data) ? null : $fba_data['fba_reserve_stock'] ;
            }
            if (!empty($fields['fba_reserve_stock_handle'])) {  //预留库存,正在处理
                $lists[$k]['fba_reserve_stock_handle'] = empty($fba_data) ? null : $fba_data['fba_reserve_stock_handle'] ;
            }
            if (!empty($fields['fba_reserve_stock_allocation'])) {  //预留库存，正在调拨
                $lists[$k]['fba_reserve_stock_allocation'] = empty($fba_data) ? null : $fba_data['fba_reserve_stock_allocation'] ;
            }
            if (!empty($fields['fba_recommended_replenishment'])) {  //建议补货量
                $lists[$k]['fba_recommended_replenishment'] = empty($fba_data) ? null : round($fba_data['fba_recommended_replenishment'],2) ;
                $lists[$k]['max_fba_recommended_replenishment'] = empty($fba_data) ? null : $fba_data['max_fba_recommended_replenishment'] ;
                $lists[$k]['min_fba_recommended_replenishment'] = empty($fba_data) ? null : $fba_data['min_fba_recommended_replenishment'] ;
            }
            if (!empty($fields['fba_special_purpose'])) {  //FBA专用
                $lists[$k]['fba_special_purpose'] = empty($fba_data) ? null : $fba_data['fba_special_purpose'] ;
                $lists[$k]['max_fba_special_purpose'] = empty($fba_data) ? null : $fba_data['max_fba_special_purpose'] ;
                $lists[$k]['min_fba_special_purpose'] = empty($fba_data) ? null : $fba_data['min_fba_special_purpose'] ;
            }

        }
        return $lists;
    }

    protected function getGoodsErpData($lists = [], $fields = [], $datas = [],$rate_info = []){
        if (empty($lists)){
            return $lists;
        }
        if (!in_array($datas['count_dimension'], ['sku', 'isku'])){
            return $lists;
        }
        if($datas['is_distinct_channel'] == 0 && $datas['count_dimension'] == 'sku'){
            return $lists;
        }
        $iskuIds = array_unique(array_column($lists, 'isku_id'));
        $erpWhere = "user_id = {$lists[0]['user_id']} AND isku_id IN(".implode(',', $iskuIds).") AND is_delete = 0";

        $selectFields = "user_id, isku_id";
        if (!empty($fields['ark_erp_purchasing_num'])){ //采购在途
            $selectFields .= ", SUM(purchasing_num) as ark_erp_purchasing_num";
        }
        if (!empty($fields['ark_erp_send_num'])){ //调拨在途
            $selectFields .= ", SUM(send_num) as ark_erp_send_num";
        }
        if (!empty($fields['ark_erp_good_num'])){ //库存良品量
            $selectFields .= ", SUM(good_num) as ark_erp_good_num";
        }
        if (!empty($fields['ark_erp_bad_num'])){ //库存次品量
            $selectFields .= ", SUM(bad_num) as ark_erp_bad_num";
        }
        if (!empty($fields['ark_erp_lock_num'])){ //库存锁仓量
            $selectFields .= ", SUM(lock_num) + SUM(lock_num_work_order) + SUM(lock_num_shipment_order) as ark_erp_lock_num";
        }
        if (!empty($fields['ark_erp_goods_cost_total'])){ //ERP在库总成本
            //币种是人民币
            $selectFields .= ", SUM(goods_cost * total_num) as ark_erp_goods_cost_total";
        }

        $erpIskuModel = new ErpStorageWarehouseIskuMySQLModel([], $this->dbhost, $this->codeno);
        $erpIskuList = $erpIskuModel->select($erpWhere, $selectFields, "", "", "", "isku_id");
        $mapIskuList = [];
        if (!empty($erpIskuList)){
            foreach ($erpIskuList as $val){
                $mapIskuList[$val['isku_id']] = $val;
            }
        }

        foreach ($lists as $key => $val){
            if (!empty($fields['ark_erp_purchasing_num'])){
                $val['ark_erp_purchasing_num'] = isset($mapIskuList[$val['isku_id']]['ark_erp_purchasing_num']) ? $mapIskuList[$val['isku_id']]['ark_erp_purchasing_num'] : null;
            }
            if (!empty($fields['ark_erp_send_num'])){
                $val['ark_erp_send_num'] = isset($mapIskuList[$val['isku_id']]['ark_erp_send_num']) ? $mapIskuList[$val['isku_id']]['ark_erp_send_num'] : null;
            }
            if (!empty($fields['ark_erp_good_num'])){
                $val['ark_erp_good_num'] = isset($mapIskuList[$val['isku_id']]['ark_erp_good_num']) ? $mapIskuList[$val['isku_id']]['ark_erp_good_num'] : null;
            }
            if (!empty($fields['ark_erp_bad_num'])){
                $val['ark_erp_bad_num'] = isset($mapIskuList[$val['isku_id']]['ark_erp_bad_num']) ? $mapIskuList[$val['isku_id']]['ark_erp_bad_num'] : null;
            }
            if (!empty($fields['ark_erp_lock_num'])){
                $val['ark_erp_lock_num'] = isset($mapIskuList[$val['isku_id']]['ark_erp_lock_num']) ? $mapIskuList[$val['isku_id']]['ark_erp_lock_num'] : null;
            }
            if (!empty($fields['ark_erp_goods_cost_total'])){
                //币种是人民币
                $to_currency_code = $datas['currency_code'] != 'ORIGIN' ? $datas['currency_code'] : $this->amzon_site[$val['site_id']]['currency_code'];
                $val['ark_erp_goods_cost_total'] = isset($mapIskuList[$val['isku_id']]['ark_erp_goods_cost_total']) ? $this->commonService->currencyExchange($mapIskuList[$val['isku_id']]['ark_erp_goods_cost_total'],'CNY',$to_currency_code,$rate_info) : null;
            }
            $lists[$key] = $val;
        }

        return $lists;
    }

    protected function getGoodsRankData($lists = array() , $fields = array() , $datas = array(),$channel_arr = array())
    {
//        var_dump(111);
        if(empty($lists) or ( empty($fields['goods_rank']) and empty($fields['goods_min_rank']) )){
            return $lists ;
        }else{

            if (!($datas['count_periods'] == '1' && in_array($datas['count_dimension'],['sku','asin']) && $datas['is_distinct_channel'] == 1)){//不是按日的按sku按天直接返回
                foreach ($lists as $key => $value){
                    if ($datas['count_periods'] <= 1 && in_array($datas['count_dimension'],['sku','asin','parent_asin'])){//只有商品维度才为
                        if(($datas['count_dimension'] == 'sku' or $datas['count_dimension'] == 'asin') && $datas['is_distinct_channel'] == 1){
                            if (isset($value['goods_min_rank'])){
                                $lists[$key]['goods_min_rank'] = $value['goods_min_rank_min'];
                            }
                            if (isset($value['goods_rank'])){
                                $lists[$key]['goods_rank'] = $value['goods_rank_min'] ;
                            }
                        }else {
                            if (isset($value['goods_min_rank'])){
                                $lists[$key]['goods_min_rank'] = $value['goods_min_rank_min'] == $value['goods_min_rank_max']?$value['goods_min_rank_min']:($value['goods_min_rank_min']."~".$value['goods_min_rank_max']);
                            }
                            if (isset($value['goods_rank'])){
                                $lists[$key]['goods_rank'] = $value['goods_rank_min'] == $value['goods_rank_max']?$value['goods_rank_min']:($value['goods_rank_min']."~".$value['goods_rank_max']);
                            }
                        }

                        if(isset($value['goods_rank_group'])){
                            $lists[$key]['goods_rank_group'] = empty($value['goods_rank_group']) ? '—' : $value['goods_rank_group'] ;
                        }

                        if(isset($value['goods_min_rank_group'])){
                            $lists[$key]['goods_min_rank_group'] = empty($value['goods_min_rank_group']) ? '—' : $value['goods_min_rank_group'] ;
                        }

                    }else{
                        if (isset($value['goods_min_rank'])){
                            $lists[$key]['goods_min_rank'] = "—";
                        }
                        if (isset($value['goods_rank'])){
                            $lists[$key]['goods_rank'] = "—";
                        }
                        if (isset($value['goods_min_rank_group'])){
                            $lists[$key]['goods_min_rank_group'] = "—";
                        }
                        if (isset($value['goods_rank_group'])){
                            $lists[$key]['goods_rank_group'] = "—";
                        }
                    }
                }
                return $lists;
            }
            $amazon_fba_inventory_rank_md = new AmazonFbaInventoryRankMySQLModel([], $this->dbhost, $this->codeno);
            $where = "g.user_id = " . intval($lists[0]['user_id']) ;
//            if (!empty($channel_arr)){//只取列表的
//                if (count($channel_arr)==1){
//                    $where .= " AND g.channel_id = ".intval(implode(",",$channel_arr));
//                }else{
//                    $where .= " AND g.channel_id IN (".implode(",",$channel_arr).")";
//                }
//            }
            $table = "g_amazon_fba_inventory_rank_{$this->codeno} as g" ;

            if($datas['count_dimension'] == 'sku'){
                $group_fields_tmp = 'sku';
                if($datas['is_distinct_channel'] == 1){
                    $table_fields = '(g.seller_sku) as sku , g.channel_id' ;
                    $table_group = '' ;
                }else{
                    $table_fields = 'max(g.seller_sku) as sku , g.id' ;
                    $table_group = ' g.seller_sku,g.myear,g.mmonth,g.mday' ;
                }
            }else if($datas['count_dimension'] == 'asin'){
                $group_fields_tmp = 'asin';
                if($datas['is_distinct_channel'] == 1){
                    $table_fields = '(g.asin) as asin  , g.channel_id' ;
                    $table_group = '' ;
                }else{
                    $table_fields =  'max(g.asin) as asin  , g.id' ;
                    $table_group = ' g.asin,g.myear,g.mmonth,g.mday' ;
                }
            }else if($datas['count_dimension'] == 'parent_asin'){
                $group_fields_tmp = 'parent_asin';
                $table .= " LEFT JOIN g_amazon_goods_{$this->codeno} as amazon_goods ON g.user_id = amazon_goods.user_id AND g.channel_id = amazon_goods.channel_id AND g.seller_sku = amazon_goods.SKU ";
                $table_fields =  'amazon_goods.parent_asin as parent_asin , amazon_goods.channel_id' ;
                $where.= " AND amazon_goods.id > 0 ";
                if($datas['is_distinct_channel'] == 1){
                    $table_group = 'amazon_goods.parent_asin , amazon_goods.channel_id,g.myear,g.mmonth,g.mday' ;
                }else{
                    $table_group = 'amazon_goods.parent_asin ,g.myear,g.mmonth,g.mday' ;
                }
            }else if($datas['count_dimension'] == 'isku'){
                $where.= " AND ext.id > 0 ";
                $group_fields_tmp = 'isku_id';
                $table.= " LEFT JOIN g_amazon_goods_ext_{$this->codeno} as ext ON g.user_id = ext.user_id AND g.channel_id = ext.channel_id AND g.seller_sku = ext.sku " ;
                $table_fields =  'max(ext.isku_id) as isku_id' ;
            }else if($datas['count_dimension'] == 'class1'){
                //分类暂时没有 ，因为需要跨库查询
                return $lists;
            }else if($datas['count_dimension'] == 'group'){ //分组
                $where.= " AND ext.id > 0 ";
                $group_fields_tmp = 'group_id';
                $table.= " LEFT JOIN g_amazon_goods_ext_{$this->codeno} as ext ON g.user_id = ext.user_id AND g.channel_id = ext.channel_id AND g.seller_sku = ext.sku " ;
                $table_fields = 'max(ext.group_id) as group_id' ;
                $table_group = ' ext.group_id,g.myear,g.mmonth,g.mday' ;


            }else if($datas['count_dimension'] == 'tags'){ //标签（需要刷数据）
                $where.= " AND ext.id > 0 ";
                $group_fields_tmp = 'tags_id';
                $table.= " LEFT JOIN g_amazon_goods_ext_{$this->codeno} as ext ON g.user_id = ext.user_id AND g.channel_id = ext.channel_id AND g.seller_sku = ext.sku LEFT JOIN g_amazon_goods_tags_rel_{$this->codeno} as tags_rel ON tags_rel.goods_id = ext.amazon_goods_id  " ;
                $table_fields =  'tags_rel.tags_id ' ;
                $table_group = 'tags_rel.tags_id ,g.myear,g.mmonth,g.mday' ;


            }else if($datas['count_dimension'] == 'head_id') { //负责人
                return $lists;
                //负责人暂时没有 ，因为需要跨库查询
            }else if($datas['count_dimension'] == 'developer_id') { //开发人员
                return $lists;
                //开发人员暂时没有 ，因为需要跨库查询
            }else{
                return $lists;
            }

            $where_arr = array() ;
            foreach($lists as $list1){
                if($datas['count_dimension'] == 'sku'){
                    if($datas['is_distinct_channel'] == 1) {
                        $where_arr[] = array('sku' => addslashes($list1['sku']), 'channel_id' => $list1['channel_id']);
                    }else{
                        $where_arr[] = array('sku' => addslashes($list1['sku']));
                    }
                }else if($datas['count_dimension'] == 'asin'){
                    if($datas['is_distinct_channel'] == 1) {
                        $where_arr[] = array('asin' => addslashes($list1['asin']),'sku' => addslashes($list1['all_sku_field']), 'channel_id' => $list1['channel_id']);
                    }else{
                        $where_arr[] = array('asin' => addslashes($list1['asin']));
                    }
                }else if($datas['count_dimension'] == 'parent_asin'){
                    if($datas['is_distinct_channel'] == 1) {
                        $where_arr[] = array('parent_asin' => addslashes($list1['parent_asin']), 'channel_id' => $list1['channel_id']);
                    }else{
                        $where_arr[] = array('parent_asin' => addslashes($list1['parent_asin']));
                    }
                }else if($datas['count_dimension'] == 'class1'){
                    //分类暂时没有 ，因为需要跨库查询
                }else if($datas['count_dimension'] == 'group'){
                    $where_arr[] = array('group_id'=>$list1['group_id']) ;
                }else if($datas['count_dimension'] == 'tags'){  //标签
                    $where_arr[] = array('tags_id'=>$list1['tags_id']) ;
                }else if($datas['count_dimension'] == 'head_id'){  //负责人
                    //负责人暂时没有 ，因为需要跨库查询
                }else if($datas['count_dimension'] == 'developer_id'){ //开发人
                    //开发人暂时没有 ，因为需要跨库查询
                }else if($datas['count_dimension'] == 'isku'){ //开发人
                    $where_arr[] = array('isku_id'=>$list1['isku_id']) ;
                }else {
                    $where_arr[] = array('channel_id'=>$list1['channel_id']) ;
                }
            }

            if($datas['count_dimension'] == 'sku' || $datas['count_dimension'] == 'asin' || $datas['count_dimension'] == 'parent_asin'){
                if ($datas['count_dimension'] == 'sku'){
                    $search_field = "g.seller_sku";
                }elseif ($datas['count_dimension'] == 'asin'){
                    $search_field = "g.seller_sku";
                }else{
                    $search_field = "amazon_goods.parent_asin";
                }

                if (in_array($datas['count_dimension'],['asin'])){
//                    $all_sku_field_tmp = array_column($where_arr , 'all_sku_field');
//                    $all_sku_field = array();
//                    foreach ($all_sku_field_tmp as $value){
//                        foreach ($value as $v){
//                            if (!empty($v)){
//                                $all_sku_field[] = self::escape($v);
//                            }
//                        }
//                    }
                    $where_strs = array_unique(array_column($where_arr , 'sku'));
                }else{
                    $where_strs = array_unique(array_column($where_arr , $datas['count_dimension'])) ;

                }
//                $where_strs = array_unique(array_column($where_arr , $datas['count_dimension'])) ;
                $where_channel_arr = array_unique(array_column($where_arr , 'channel_id')) ;

                $str = "'" . implode("','" , $where_strs) . "'" ;
                $where_str = $search_field . ' IN (' . $str . ') ';
                $where_str .= " AND g.channel_id IN (".implode(",",$where_channel_arr).")";
            }else if($datas['count_dimension'] == 'class1'){
                //分类暂时没有 ，因为需要跨库查询
            }else if($datas['count_dimension'] == 'group'){
                $where_strs = array_unique(array_column($where_arr , 'group_id')) ;
                $where_str = 'ext.group_id IN (' . implode(',' , $where_strs) . ' ) ';
            }else if($datas['count_dimension'] == 'tags'){ //标签
                $where_strs = array_unique(array_column($where_arr , 'tags_id')) ;
                $where_str = 'tags_rel.tags_id IN (' . implode(',' , $where_strs) . ' ) AND tags_rel.status = 1 ';
            }else if($datas['count_dimension'] == 'head_id'){
                //负责人暂时没有 ，因为需要跨库查询
            }else if($datas['count_dimension'] == 'developer_id'){
                //开发人员暂时没有 ，因为需要跨库查询
            }else if($datas['count_dimension'] == 'isku'){
                $where_strs = array_unique(array_column($where_arr , 'isku_id')) ;
                $where_str = 'ext.isku_id IN (' . implode(',' , $where_strs) . ' ) ';
            }else{
                $where_strs = array_unique(array_column($where_arr , 'channel_id')) ;
                $where_str = 'g.channel_id IN (' . implode(',' , $where_strs) . ' ) ';
            }
        }
        $where_str = !empty($where_str) ? $where_str . " AND " : "";
        $where.= ' AND ' . $where_str." g.id > 0 AND g.create_time >= {$datas['origin_create_start_time']} AND g.create_time <= {$datas['origin_create_end_time']}" ;

        $table_fields= !empty($table_fields) ? $table_fields."," : "";
        $table_fields.= '(g.rank) as goods_rank_min,(g.rank) as goods_rank_max,(g.min_rank) as goods_min_rank_min,(g.min_rank) as goods_min_rank_max,(g.rank_group) as goods_rank_group,(g.min_rank_group) as goods_min_rank_group, myear,mmonth,mday' ;



        $group = !empty($table_group) ? $table_group : "";
        $rankData = $amazon_fba_inventory_rank_md->select($where , $table_fields, $table ,'','',$group) ;
        if (!empty($rankData)){
            $rankData_tmp = array();
            foreach ($rankData as $value){

                $fields_tmp = $value[$group_fields_tmp]."_".$value['channel_id'].($value['myear'].'-'.$value['mmonth'].'-'.$value['mday']);

                $rankData_tmp[$fields_tmp] = $value;
            }

            foreach ($lists as $key => $value){
                if (isset($value['all_sku_field'])){
                    unset($lists[$key]['all_sku_field']);
                }
                $fields_tmp = $value[$group_fields_tmp]."_".$value['channel_id'].($value['time']);

                if (isset($rankData_tmp[$fields_tmp])){


                    if (isset($value['goods_min_rank'])){
                        $lists[$key]['goods_min_rank'] = $rankData_tmp[$fields_tmp]['goods_min_rank_min'] == $rankData_tmp[$fields_tmp]['goods_min_rank_max']?$rankData_tmp[$fields_tmp]['goods_min_rank_min']:($rankData_tmp[$fields_tmp]['goods_min_rank_min']."~".$rankData_tmp[$fields_tmp]['goods_min_rank_max']);
                    }
                    if (isset($value['goods_rank'])){
                        $lists[$key]['goods_rank'] = $rankData_tmp[$fields_tmp]['goods_rank_min'] == $rankData_tmp[$fields_tmp]['goods_rank_max']?$rankData_tmp[$fields_tmp]['goods_rank_min']:($rankData_tmp[$fields_tmp]['goods_rank_min']."~".$rankData_tmp[$fields_tmp]['goods_rank_max']);
                    }
                    if (isset($value['goods_min_rank_group'])){
                        $lists[$key]['goods_min_rank_group'] = $rankData_tmp[$fields_tmp]['goods_min_rank_group'];
                    }
                    if (isset($value['goods_rank_group'])){
                        $lists[$key]['goods_rank_group'] = $rankData_tmp[$fields_tmp]['goods_rank_group'];
                    }
                }else{
                    if (isset($value['goods_min_rank'])){
                        $lists[$key]['goods_min_rank'] = "—";
                    }
                    if (isset($value['goods_rank'])){
                        $lists[$key]['goods_rank'] = "—";
                    }
                    if (isset($value['goods_min_rank_group'])){
                        $lists[$key]['goods_min_rank_group'] = "—";
                    }
                    if (isset($value['goods_rank_group'])){
                        $lists[$key]['goods_rank_group'] = "—";
                    }
                }

            }
        }else{
            foreach ($lists as $key => $value){
                if (isset($value['goods_min_rank'])){
                    $lists[$key]['goods_min_rank'] = "—";
                }
                if (isset($value['goods_rank'])){
                    $lists[$key]['goods_rank'] = "—";
                }
                if (isset($value['goods_min_rank_group'])){
                    $lists[$key]['goods_min_rank_group'] = "—";
                }
                if (isset($value['goods_rank_group'])){
                    $lists[$key]['goods_rank_group'] = "—";
                }
            }
        }

        $logger = ApplicationContext::getContainer()->get(LoggerFactory::class)->get('dataark', 'debug');
        $logger->info('getGoodsRankData Mysql:', [ $amazon_fba_inventory_rank_md->getLastSql()]);
        return $lists;
    }

    protected function handleGoodsFbaData($fba, $field, $is_distinct_channel = 0, $fbaDatas = array())
    {
        if(empty($fba[$field])){
            return $fbaDatas ;
        }
        if($is_distinct_channel == 1 && ($field == 'sku' || $field == 'asin' || $field == 'parent_asin')){
            $fbaDatas[$fba[$field].'-'.$fba['channel_id']] = $fba ;
        } else {
            if(empty($fbaDatas[$fba[$field]]['fba_sales_stock'])){
                $fbaDatas[$fba[$field]]['fba_sales_stock'] = $fba['fba_sales_stock'] ;
            }else{
                $fbaDatas[$fba[$field]]['fba_sales_stock']+= $fba['fba_sales_stock'] ;
            }
//SUM((CASE WHEN unsellable_quantity < 0 THEN 0 ELSE unsellable_quantity END )) as fba_sales_not_stock,SUM((CASE WHEN reserved_fc_transfers < 0 THEN 0 ELSE reserved_fc_transfers END )) as fba_reserve_stock_allocation,SUM((CASE WHEN reserved_fc_processing < 0 THEN 0 ELSE reserved_fc_processing END )) as fba_reserve_stock_handle,SUM((CASE WHEN inbound_shipped_quantity < 0 THEN 0 ELSE inbound_shipped_quantity END )) as fba_receiving_on_the_way,SUM((CASE WHEN inbound_receiving_quantity < 0 THEN 0 ELSE inbound_receiving_quantity END )) as fba_receiving
            if(empty($fbaDatas[$fba[$field]]['fba_sales_not_stock'])){
                $fbaDatas[$fba[$field]]['fba_sales_not_stock'] = $fba['fba_sales_not_stock'] ;
            }else{
                $fbaDatas[$fba[$field]]['fba_sales_not_stock']+= $fba['fba_sales_not_stock'] ;
            }

            if(empty($fbaDatas[$fba[$field]]['fba_reserve_stock_allocation'])){
                $fbaDatas[$fba[$field]]['fba_reserve_stock_allocation'] = $fba['fba_reserve_stock_allocation'] ;
            }else{
                $fbaDatas[$fba[$field]]['fba_reserve_stock_allocation']+= $fba['fba_reserve_stock_allocation'] ;
            }

            if(empty($fbaDatas[$fba[$field]]['fba_reserve_stock_handle'])){
                $fbaDatas[$fba[$field]]['fba_reserve_stock_handle'] = $fba['fba_reserve_stock_handle'] ;
            }else{
                $fbaDatas[$fba[$field]]['fba_reserve_stock_handle']+= $fba['fba_reserve_stock_handle'] ;
            }

            if(empty($fbaDatas[$fba[$field]]['fba_receiving_on_the_way'])){
                $fbaDatas[$fba[$field]]['fba_receiving_on_the_way'] = $fba['fba_receiving_on_the_way'] ;
            }else{
                $fbaDatas[$fba[$field]]['fba_receiving_on_the_way']+= $fba['fba_receiving_on_the_way'] ;
            }

            if(empty($fbaDatas[$fba[$field]]['fba_receiving'])){
                $fbaDatas[$fba[$field]]['fba_receiving'] = $fba['fba_receiving'] ;
            }else{
                $fbaDatas[$fba[$field]]['fba_receiving']+= $fba['fba_receiving'] ;
            }



            if(empty($fbaDatas[$fba[$field]]['fba_sales_day'])){
                $fbaDatas[$fba[$field]]['fba_sales_day'] = $fba['fba_sales_day'] ;
            }else{
                $fbaDatas[$fba[$field]]['fba_sales_day'] = ($fbaDatas[$fba[$field]]['fba_sales_day'] > $fba['fba_sales_day']) ? $fbaDatas[$fba[$field]]['fba_sales_day'] : $fba['fba_sales_day'] ;
            }

            if(empty($fbaDatas[$fba[$field]]['max_fba_sales_day'])){
                $fbaDatas[$fba[$field]]['max_fba_sales_day'] = $fba['max_fba_sales_day'] ;
            }else{
                $fbaDatas[$fba[$field]]['max_fba_sales_day'] = ($fbaDatas[$fba[$field]]['max_fba_sales_day'] > $fba['max_fba_sales_day']) ? $fbaDatas[$fba[$field]]['max_fba_sales_day'] : $fba['max_fba_sales_day'] ;
            }

            if(empty($fbaDatas[$fba[$field]]['min_fba_sales_day'])){
                $fbaDatas[$fba[$field]]['min_fba_sales_day'] = $fba['min_fba_sales_day'] ;
            }else{
                $fbaDatas[$fba[$field]]['min_fba_sales_day'] = ($fbaDatas[$fba[$field]]['min_fba_sales_day'] < $fba['min_fba_sales_day']) ? $fbaDatas[$fba[$field]]['min_fba_sales_day'] : $fba['min_fba_sales_day'] ;
            }

            if(empty($fbaDatas[$fba[$field]]['max_egt0_fba_sales_day'])){
                $fbaDatas[$fba[$field]]['max_egt0_fba_sales_day'] = $fba['max_egt0_fba_sales_day'] ;
            }else{
                $fbaDatas[$fba[$field]]['max_egt0_fba_sales_day'] = ($fbaDatas[$fba[$field]]['max_egt0_fba_sales_day'] > $fba['max_egt0_fba_sales_day']) ? $fbaDatas[$fba[$field]]['max_egt0_fba_sales_day'] : $fba['max_egt0_fba_sales_day'] ;
            }

            if(empty($fbaDatas[$fba[$field]]['min_egt0_fba_sales_day'])){
                $fbaDatas[$fba[$field]]['min_egt0_fba_sales_day'] = $fba['min_egt0_fba_sales_day'] ;
            }else{
                $fbaDatas[$fba[$field]]['min_egt0_fba_sales_day'] = ($fbaDatas[$fba[$field]]['min_egt0_fba_sales_day'] < $fba['min_egt0_fba_sales_day']) ? $fbaDatas[$fba[$field]]['min_egt0_fba_sales_day'] : $fba['min_egt0_fba_sales_day'] ;
            }

            if(empty($fbaDatas[$fba[$field]]['fba_reserve_stock'])){
                $fbaDatas[$fba[$field]]['fba_reserve_stock'] = $fba['fba_reserve_stock'] ;
            }else{
                $fbaDatas[$fba[$field]]['fba_reserve_stock'] += $fba['fba_reserve_stock'] ;
            }

            if(empty($fbaDatas[$fba[$field]]['fba_recommended_replenishment'])){
                $fbaDatas[$fba[$field]]['fba_recommended_replenishment'] = $fba['fba_recommended_replenishment'] ;
            }else{
                $fbaDatas[$fba[$field]]['fba_recommended_replenishment'] += $fba['fba_recommended_replenishment'] ;
            }

            if(empty($fbaDatas[$fba[$field]]['max_fba_recommended_replenishment'])){
                $fbaDatas[$fba[$field]]['max_fba_recommended_replenishment'] = $fba['max_fba_recommended_replenishment'] ;
            }else{
                $fbaDatas[$fba[$field]]['max_fba_recommended_replenishment'] = ($fbaDatas[$fba[$field]]['max_fba_recommended_replenishment'] < $fba['max_fba_recommended_replenishment']) ? $fba['max_fba_recommended_replenishment']:$fbaDatas[$fba[$field]]['max_fba_recommended_replenishment']   ;
            }

            if(empty($fbaDatas[$fba[$field]]['min_fba_recommended_replenishment'])){
                $fbaDatas[$fba[$field]]['min_fba_recommended_replenishment'] = $fba['min_fba_recommended_replenishment'] ;
            }else{
                $fbaDatas[$fba[$field]]['min_fba_recommended_replenishment'] = ($fbaDatas[$fba[$field]]['min_fba_recommended_replenishment'] < $fba['min_fba_recommended_replenishment']) ? $fbaDatas[$fba[$field]]['min_fba_recommended_replenishment'] : $fba['min_fba_recommended_replenishment'] ;
            }

            if(empty($fbaDatas[$fba[$field]]['fba_special_purpose'])){
                $fbaDatas[$fba[$field]]['fba_special_purpose'] = $fba['fba_special_purpose'] ;
            }else{
                $fbaDatas[$fba[$field]]['fba_special_purpose'] += $fba['fba_special_purpose'] ;
            }

            if(empty($fbaDatas[$fba[$field]]['max_fba_special_purpose'])){
                $fbaDatas[$fba[$field]]['max_fba_special_purpose'] = $fba['max_fba_special_purpose'] ;
            }else{
                $fbaDatas[$fba[$field]]['max_fba_special_purpose'] = ($fbaDatas[$fba[$field]]['max_fba_special_purpose'] > $fba['max_fba_special_purpose']) ? $fbaDatas[$fba[$field]]['max_fba_special_purpose'] : $fba['max_fba_special_purpose'] ;
            }

            if(empty($fbaDatas[$fba[$field]]['min_fba_special_purpose'])){
                $fbaDatas[$fba[$field]]['min_fba_special_purpose'] = $fba['min_fba_special_purpose'] ;
            }else{
                $fbaDatas[$fba[$field]]['min_fba_special_purpose'] = ($fbaDatas[$fba[$field]]['min_fba_special_purpose'] < $fba['min_fba_special_purpose']) ? $fbaDatas[$fba[$field]]['min_fba_special_purpose'] : $fba['min_fba_special_purpose'] ;
            }
        }

        return $fbaDatas;
    }

    //获取商品维度指标字段(新增统计维度完成)
    private function getGoodsFields($datas = array(),$isMysql = false)
    {
        $fields = array();
        $fields = $this->getGoodsTheSameFields($datas,$fields,$isMysql);


        if ($datas['count_periods'] == '1' && $datas['show_type'] == '2') { //按天
            $fields['time'] = "concat(cast(max(report.myear) as varchar), '-', cast(max(report.mmonth) as varchar), '-', cast(max(report.mday) as varchar))";
            if($this->haveFbaFields == true && $datas['stock_datas_origin'] == 1){
                $fields['myear']  = 'max(report.myear)' ;
                $fields['mmonth']  = 'max(report.mmonth)' ;
                $fields['mday']  = 'max(report.mday)' ;
            }

        } else if ($datas['count_periods'] == '2' && $datas['show_type'] == '2') { //按周
            $fields['time'] = "concat(cast(max(report.mweekyear) as varchar), '-', cast(max(report.mweek) as varchar))";
            if($this->haveFbaFields == true && $datas['stock_datas_origin'] == 1){
                $fields['mweekyear']  = 'max(report.mweekyear)' ;
                $fields['mweek']  = 'max(report.mweek)' ;
            }
        } else if ($datas['count_periods'] == '3' && $datas['show_type'] == '2') { //按月
            $fields['time'] = "concat(cast(max(report.myear) as varchar), '-', cast(max(report.mmonth) as varchar))";
            if($this->haveFbaFields == true && $datas['stock_datas_origin'] == 1){
                $fields['myear']  = 'max(report.myear)' ;
                $fields['mmonth']  = 'max(report.mmonth)' ;
            }

        } else if ($datas['count_periods'] == '4' && $datas['show_type'] == '2') {  //按季
            $fields['time'] = "concat(cast(max(report.myear) as varchar), '-', cast(max(report.mquarter) as varchar))";
            if($this->haveFbaFields == true && $datas['stock_datas_origin'] == 1){
                $fields['myear']  = 'max(report.myear)' ;
                $fields['mquarter']  = 'max(report.mquarter)' ;
            }

        } else if ($datas['count_periods'] == '5' && $datas['show_type'] == '2') { //按年
            $fields['time'] = "cast(max(report.myear) as varchar)";
            if($this->haveFbaFields == true && $datas['stock_datas_origin'] == 1){
                $fields['myear']  = 'max(report.myear)' ;
            }
        }



        $targets = explode(',', $datas['target']);
        $targets_temp = $targets;//基础指标缓存

        $targets = $this->lastTargets;
        $where_detail = is_array($datas['where_detail']) ? $datas['where_detail'] : json_decode($datas['where_detail'], true);

        if ($datas['count_periods'] == '1' && $datas['show_type'] == '2' && (in_array('goods_rank', $targets) || in_array('goods_min_rank', $targets)) && in_array($datas['count_dimension'],['asin'])){
            if ($isMysql){
//                $fields['all_sku_field'] = "GROUP_CONCAT(amazon_goods.goods_sku SEPARATOR '_D_')";
                $fields['all_sku_field'] = "max(amazon_goods.goods_sku)";

            }else{
//                $fields['all_sku_field'] = "array_join(array_agg(amazon_goods.goods_sku), '_D_')";
                $fields['all_sku_field'] = "max(amazon_goods.goods_sku)";

            }
        }
        if ($datas['is_new_index'] == 1){

            $fields = $this->handleNewIndexField($datas,$fields,$targets,1,$isMysql);
            $fields = $fields['fields'];
            $fields['goods_rank_min'] = "min(nullif(report.goods_rank,0))";
            $fields['goods_rank_max'] = "max(nullif(report.goods_rank,0))";
            $fields['goods_min_rank_min'] = " min(nullif(report.goods_min_rank,0))";
            $fields['goods_min_rank_max'] = " max(nullif(report.goods_min_rank,0))";

            if (in_array('avg_sales_quota', $targets)) { //平均单价

                if ($datas['currency_code'] == 'ORIGIN') {
                    $rate_tmp = "";
                } else {
                    $rate_tmp = " * ({:RATE} / COALESCE(rates.rate ,1))";
                }
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['avg_sales_quota'] = "sum( (byorder_sales_quota+byorderitem_reserved_field20) {$rate_tmp})/ nullif(sum( report.byorder_sales_volume +  report.byorder_group_id ),0) ";
                } elseif ($datas['sale_datas_origin'] == '2') {
                    $fields['avg_sales_quota'] = "sum( (report_sales_quota+reportitem_reserved_field20) {$rate_tmp})/ nullif(sum( report.report_sales_volume +  report.report_group_id ),0) ";
                }
            }



            $total_user_sessions_views = array();
            $compare_targets = !empty($datas['compare_targets']) ? $datas['compare_targets'] : (!empty($datas['compare_data']) ? ['goods_views_rate','goods_buyer_visit_rate'] : []);
            if (( (in_array('goods_views_rate', $targets) || in_array('goods_buyer_visit_rate', $targets)) && (in_array('goods_views_rate', $compare_targets) || in_array('goods_buyer_visit_rate', $compare_targets) || $datas['sort_target'] == 'goods_views_rate' || $datas['sort_target'] == 'goods_buyer_visit_rate' || $datas['force_sort'] == 'goods_views_rate' || $datas['force_sort'] == 'goods_buyer_visit_rate')  && $datas['is_count'] == 0 && $datas['count_periods'] == 0) || (isset($datas['is_use_goods_view_sort']) && $datas['is_use_goods_view_sort'] && $datas['is_count'] == 0 && $datas['count_periods'] == 0) || $datas['is_median'] == 1){//按无且有排序才使用
                $fields['goods_buyer_visit_rate'] = in_array('goods_buyer_visit_rate', $targets)?'1':'0';
                $fields['goods_views_rate'] = in_array('goods_views_rate', $targets) ?'1':'0';
                $total_user_sessions_views = $this->getGoodsViewsVisitRate(array(), $fields, $datas,$isMysql);

            }
            if (in_array('goods_views_rate', $targets)) { //页面浏览次数百分比 (需要计算)
                if (!in_array('goods_views_number', $targets)) {
                    $fields['goods_views_number'] = " SUM(report.byorder_number_of_visits)";
                }
                //总流量次数
                $goods_views_rate = '1';
                $table = "{$this->table_goods_day_report}";
                $ym_where = $this->getYnWhere($datas['max_ym'],$datas['min_ym']);
                $where  = $ym_where . " AND  report.user_id_mod = " . $this->dws_user_id_mod ." AND " . $datas['origin_where'];
                if ($datas['count_dimension'] == 'parent_asin'){
                    $where .= " AND amazon_goods.goods_parent_asin != ''";
                }elseif ($datas['count_dimension'] == 'asin'){
                    $where .= " AND amazon_goods.goods_asin != ''";
                }
                if ($datas['is_count'] == 1){
                    //总计
                    $total_views_numbers = $this->get_one($where, 'SUM(report.byorder_number_of_visits) as total_views_number', $table,'','',false,null,300,$isMysql);
                    $this->total_views_numbers = $total_views_numbers;
                    if (intval($total_views_numbers['total_views_number']) > 0) {
                        $goods_views_rate = " SUM( report.byorder_number_of_visits ) * 1.0000 / round(" . intval($total_views_numbers['total_views_number']) .', 2)';
                    }else{
                        $goods_views_rate = '0';
                    }
                }else{
                    if ($datas['count_periods'] == 0){
                        //统计周期 无
                        if($datas['is_distinct_channel'] == 1 && ($datas['count_dimension'] == 'sku' or $datas['count_dimension'] == 'asin' or $datas['count_dimension'] == 'parent_asin')){

                            if (!empty($total_user_sessions_views)){
                                $case = " CASE ";
                                $i = 0;
                                foreach ($total_user_sessions_views as $val){
                                    if ($val['total_views_number'] > 0){
                                        $i++;
                                        $case .=  " WHEN max(report.channel_id) = {$val['channel_id']} THEN SUM( report.byorder_number_of_visits ) * 1.0000 / round({$val['total_views_number']},2 )";
                                    }

                                }
                                $case .= " ELSE 0 END";
                                if ($i>0){
                                    $goods_views_rate = $case;

                                }else{
                                    $goods_views_rate = 0;
                                }
                            }
                        }else{
                            if (!empty($total_user_sessions_views)){
                                if (intval($total_user_sessions_views['total_views_number']) > 0) {
                                    $goods_views_rate = " SUM( report.byorder_number_of_visits ) * 1.0000 / round(" . intval($total_user_sessions_views['total_views_number']) .', 2)';
                                }
                            }

                        }
                    }else{
                        $goods_views_rate = '1';
                    }
                }

                $fields['goods_views_rate'] = $goods_views_rate;
            }
            if (in_array('goods_buyer_visit_rate', $targets)) { //买家访问次数百分比 （需要计算）
                if (!in_array('goods_visitors', $targets)){
                    $fields['goods_visitors'] = 'SUM(report.byorder_user_sessions)';
                }
                $goods_buyer_visit_rate = '1';
                $table = "{$this->table_goods_day_report}";
                $ym_where = $this->getYnWhere($datas['max_ym'],$datas['min_ym']);
                $where  = $ym_where . " AND  report.user_id_mod = " . $this->dws_user_id_mod ." AND " . $datas['origin_where'];
                if ($datas['count_dimension'] == 'parent_asin'){
                    $where .= " AND amazon_goods.goods_parent_asin != ''";
                }elseif ($datas['count_dimension'] == 'asin'){
                    $where .= " AND amazon_goods.goods_asin != ''";
                }
                if ($datas['is_count'] == 1){
                    $total_user_sessions = $this->get_one($where, 'SUM(report.byorder_user_sessions) as total_user_sessions', $table,'','',false,null,300,$isMysql);
                    $this->total_user_sessions = $total_user_sessions;
                    if (intval($total_user_sessions['total_user_sessions']) > 0) {
                        $goods_buyer_visit_rate = " SUM( report.byorder_user_sessions ) * 1.0000 / round(" . intval($total_user_sessions['total_user_sessions']).', 2)';
                    }else{
                        $goods_buyer_visit_rate = '0';
                    }
                }else{
                    if ($datas['count_periods'] == 0){
                        //统计周期 无
                        if($datas['is_distinct_channel'] == 1 && ($datas['count_dimension'] == 'sku' or $datas['count_dimension'] == 'asin' or $datas['count_dimension'] == 'parent_asin')){

                            if (!empty($total_user_sessions_views)){
                                $case = " CASE ";
                                $i = 0;
                                foreach ($total_user_sessions_views as $val){
                                    if ($val['total_user_sessions'] > 0){
                                        $i++;
                                        $case .=  " WHEN max(report.channel_id) = {$val['channel_id']} THEN SUM(report.byorder_user_sessions) * 1.0000 / round({$val['total_user_sessions']}, 2)";
                                    }

                                }
                                $case .= " ELSE 0 END";
                                if ($i>0){
                                    $goods_buyer_visit_rate = $case;

                                }else{
                                    $goods_buyer_visit_rate = 0;
                                }


                            }
                        }else{
                            if (!empty($total_user_sessions_views)){
                                if (intval($total_user_sessions_views['total_user_sessions']) > 0) {
                                    $goods_buyer_visit_rate = " SUM( report.byorder_user_sessions ) * 1.0000 / round(" . intval($total_user_sessions_views['total_user_sessions']).', 2)';
                                }
                            }

                        }
                    }else{
                        $goods_buyer_visit_rate = '1';
                    }
                }
                $fields['goods_buyer_visit_rate'] = $goods_buyer_visit_rate;
            }
        }
        else{
            //是否计算总支出(查询总支出、毛利润、毛利率时需要计算总支出)--总支出=亚马逊费用 + 退款 + promote折扣 + cpc_sp_cost + cpc_sd_cost + 商品成本 + 物流 + 测评费用 + 运营费用 + VAT
            $isCalTotalPay=in_array('cost_profit_total_pay', $targets) || in_array('cost_profit_profit', $targets) || in_array('cost_profit_profit_rate', $targets);

            if (in_array('goods_visitors', $targets)) {  // 买家访问次数
                $fields['goods_visitors'] = 'SUM(report.byorder_user_sessions)';
            }
            if (in_array('goods_conversion_rate', $targets)) { //订单商品数量转化率
                if(!empty($where_detail['target']) && $datas['is_count'] == 1) {
                    $fields['quantity_of_goods_ordered'] = 'sum( report.byorder_quantity_of_goods_ordered )';
                    $fields['goods_visitors'] = 'sum( report.byorder_user_sessions )';
                }
                $fields['goods_conversion_rate'] = 'sum( report.byorder_quantity_of_goods_ordered ) * 1.0000 / nullif(sum( report.byorder_user_sessions ) ,0)';
            }
            if (in_array('goods_rank', $targets)) { //大类目rank
                $fields['goods_rank'] = "min(nullif(report.goods_rank,0))";
                $fields['goods_rank_min'] = "min(nullif(report.goods_rank,0))";
                $fields['goods_rank_max'] = "max(nullif(report.goods_rank,0))";
                $fields['goods_rank_group'] = "max(report.goods_rank_group)";
            }
            if (in_array('goods_min_rank', $targets)) { //小类目rank
                $fields['goods_min_rank'] = " min(nullif(report.goods_min_rank,0))";
                $fields['goods_min_rank_min'] = " min(nullif(report.goods_min_rank,0))";
                $fields['goods_min_rank_max'] = " max(nullif(report.goods_min_rank,0))";
                $fields['goods_min_rank_group'] = "max(report.goods_min_rank_group)";
            }

            if (in_array('goods_views_number', $targets)) { //页面浏览次数
                $fields['goods_views_number'] = " sum( report.byorder_number_of_visits ) ";
            }

//        if(in_array('goods_views_rate', $targets) || in_array('goods_buyer_visit_rate', $targets)){
//            $table = "{$this->table_goods_day_report} ";
//            $ym_where = $this->getYnWhere($datas['max_ym'],$datas['min_ym']);
//            $where  = $ym_where . " AND  report.user_id_mod = " . ($datas['user_id'] % 20) ." AND " . $datas['origin_where'];
//            if($datas['is_distinct_channel'] == 1 && ($datas['count_dimension'] == 'sku' or $datas['count_dimension'] == 'asin' or $datas['count_dimension'] == 'parent_asin') && $datas['is_count'] != 1){
//                 $totals_view_session_lists = $this->select($where." AND byorder_number_of_visits>0", 'report.channel_id,SUM(report.byorder_number_of_visits) as total_views_number , SUM(report.byorder_user_sessions) as total_user_sessions', $table,'','',"report.channel_id");
//            }else{
//                $total_views_session_numbers = $this->get_one($where, 'SUM(report.byorder_number_of_visits) as total_views_number , SUM(report.byorder_user_sessions) as total_user_sessions', $table);
//            }
//        }$params['force_sort']
        $total_user_sessions_views = array();
        if (( (in_array('goods_views_rate', $targets) || in_array('goods_buyer_visit_rate', $targets)) && ($datas['sort_target'] == 'goods_views_rate' || $datas['sort_target'] == 'goods_buyer_visit_rate' || $datas['force_sort'] == 'goods_views_rate' || $datas['force_sort'] == 'goods_buyer_visit_rate')  && $datas['is_count'] == 0 && $datas['count_periods'] == 0) || (isset($datas['is_use_goods_view_sort']) && $datas['is_use_goods_view_sort'] && $datas['is_count'] == 0 && $datas['count_periods'] == 0) || $datas['is_median'] == 1){//按无且有排序才使用
            $fields['goods_buyer_visit_rate'] = in_array('goods_buyer_visit_rate', $targets)?'1':'0';
            $fields['goods_views_rate'] = in_array('goods_views_rate', $targets) ?'1':'0';
            $total_user_sessions_views = $this->getGoodsViewsVisitRate(array(), $fields, $datas,$isMysql);

        }
        if (in_array('goods_views_rate', $targets)) { //页面浏览次数百分比 (需要计算)
            if (!in_array('goods_views_number', $targets)) {
                $fields['goods_views_number'] = " SUM(report.byorder_number_of_visits)";
            }
            //总流量次数
            $goods_views_rate = '1';
            $table = "{$this->table_goods_day_report}";
            $ym_where = $this->getYnWhere($datas['max_ym'],$datas['min_ym']);
            $where  = $ym_where . " AND  report.user_id_mod = " . $this->dws_user_id_mod ." AND " . $datas['origin_where'];
            if ($datas['count_dimension'] == 'parent_asin'){
                $where .= " AND amazon_goods.goods_parent_asin != ''";
            }elseif ($datas['count_dimension'] == 'asin'){
                $where .= " AND amazon_goods.goods_asin != ''";
            }
            if ($datas['is_count'] == 1){
                //总计
                $total_views_numbers = $this->get_one($where, 'SUM(report.byorder_number_of_visits) as total_views_number', $table,'','',false,null,300,$isMysql);
                $this->total_views_numbers = $total_views_numbers;
                if (intval($total_views_numbers['total_views_number']) > 0) {
                    $goods_views_rate = " SUM( report.byorder_number_of_visits ) * 1.0000 / round(" . intval($total_views_numbers['total_views_number']) .', 2)';
                }else{
                    $goods_views_rate = '0';
                }
            }else{
                if ($datas['count_periods'] == 0){
                    //统计周期 无
                    if($datas['is_distinct_channel'] == 1 && ($datas['count_dimension'] == 'sku' or $datas['count_dimension'] == 'asin' or $datas['count_dimension'] == 'parent_asin')){

                        if (!empty($total_user_sessions_views)){
                            $case = " CASE ";
                            $i = 0;
                            foreach ($total_user_sessions_views as $val){
                                if ($val['total_views_number'] > 0){
                                    $i++;
                                    $case .=  " WHEN max(report.channel_id) = {$val['channel_id']} THEN SUM( report.byorder_number_of_visits ) * 1.0000 / round({$val['total_views_number']},2 )";
                                }

                            }
                            $case .= " ELSE 0 END";
                            if ($i>0){
                                $goods_views_rate = $case;

                            }else{
                                $goods_views_rate = 0;
                            }
                        }
                    }else{
                        if (!empty($total_user_sessions_views)){
                            if (intval($total_user_sessions_views['total_views_number']) > 0) {
                                $goods_views_rate = " SUM( report.byorder_number_of_visits ) * 1.0000 / round(" . intval($total_user_sessions_views['total_views_number']) .', 2)';
                            }
                        }

                    }
                }else{
                    $goods_views_rate = '1';
                }
            }

            $fields['goods_views_rate'] = $goods_views_rate;
        }
        if (in_array('goods_buyer_visit_rate', $targets)) { //买家访问次数百分比 （需要计算）
            if (!in_array('goods_visitors', $targets)){
                $fields['goods_visitors'] = 'SUM(report.byorder_user_sessions)';
            }
            $goods_buyer_visit_rate = '1';
            $table = "{$this->table_goods_day_report}";
            $ym_where = $this->getYnWhere($datas['max_ym'],$datas['min_ym']);
            $where  = $ym_where . " AND  report.user_id_mod = " . $this->dws_user_id_mod ." AND " . $datas['origin_where'];
            if ($datas['count_dimension'] == 'parent_asin'){
                $where .= " AND amazon_goods.goods_parent_asin != ''";
            }elseif ($datas['count_dimension'] == 'asin'){
                $where .= " AND amazon_goods.goods_asin != ''";
            }
            if ($datas['is_count'] == 1){
                $total_user_sessions = $this->get_one($where, 'SUM(report.byorder_user_sessions) as total_user_sessions', $table,'','',false,null,300,$isMysql);
                $this->total_user_sessions = $total_user_sessions;
                if (intval($total_user_sessions['total_user_sessions']) > 0) {
                    $goods_buyer_visit_rate = " SUM( report.byorder_user_sessions ) * 1.0000 / round(" . intval($total_user_sessions['total_user_sessions']).', 2)';
                }else{
                    $goods_buyer_visit_rate = '0';
                }
            }else{
                if ($datas['count_periods'] == 0){
                    //统计周期 无
                    if($datas['is_distinct_channel'] == 1 && ($datas['count_dimension'] == 'sku' or $datas['count_dimension'] == 'asin' or $datas['count_dimension'] == 'parent_asin')){

                        if (!empty($total_user_sessions_views)){
                            $case = " CASE ";
                            $i = 0;
                            foreach ($total_user_sessions_views as $val){
                                if ($val['total_user_sessions'] > 0){
                                    $i++;
                                    $case .=  " WHEN max(report.channel_id) = {$val['channel_id']} THEN SUM(report.byorder_user_sessions) * 1.0000 / round({$val['total_user_sessions']}, 2)";
                                }

                            }
                            $case .= " ELSE 0 END";
                            if ($i>0){
                                $goods_buyer_visit_rate = $case;

                            }else{
                                $goods_buyer_visit_rate = 0;
                            }


                        }
                    }else{
                        if (!empty($total_user_sessions_views)){
                            if (intval($total_user_sessions_views['total_user_sessions']) > 0) {
                                $goods_buyer_visit_rate = " SUM( report.byorder_user_sessions ) * 1.0000 / round(" . intval($total_user_sessions_views['total_user_sessions']).', 2)';
                            }
                        }

                    }
                }else{
                    $goods_buyer_visit_rate = '1';
                }
            }
            $fields['goods_buyer_visit_rate'] = $goods_buyer_visit_rate;
        }
        if (in_array('goods_buybox_rate', $targets)) { //购买按钮赢得率
            if(!empty($where_detail['target']) && $datas['is_count'] == 1) {
                $fields['buy_button_winning_num'] = 'sum( report.byorder_buy_button_winning_num )';
                $fields['goods_views_number'] = 'sum( report.byorder_number_of_visits )';
            }
            $fields['goods_buybox_rate'] = " (sum( byorder_buy_button_winning_num ) * 1.0000 / nullif(sum( report.byorder_number_of_visits ) ,0) ) ";
        }
        if (in_array('sale_sales_volume', $targets) || in_array('sale_refund_rate', $targets) || in_array('cpc_order_rate', $targets) || in_array('cpc_direct_sales_volume_rate', $targets) || in_array('cpc_indirect_sales_volume_rate', $targets)) { //销售量
            if ($datas['sale_datas_origin'] == '1') {
                $fields['sale_sales_volume'] = " sum( report.byorder_sales_volume +  report.byorder_group_id ) ";
            } elseif ($datas['sale_datas_origin'] == '2') {
                $fields['sale_sales_volume'] = " sum( report.report_sales_volume +  report.report_group_id ) ";
            }
        }

            if (in_array('avg_sales_quota', $targets)) { //平均单价

                if ($datas['currency_code'] == 'ORIGIN') {
                    $rate_tmp = "";
                } else {
                    $rate_tmp = " * ({:RATE} / COALESCE(rates.rate ,1))";
                }
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['avg_sales_quota'] = "sum( report.byorder_sales_quota {$rate_tmp})/ nullif(sum( report.byorder_sales_volume +  report.byorder_group_id ),0) ";
                } elseif ($datas['sale_datas_origin'] == '2') {
                    $fields['avg_sales_quota'] = "sum( report.report_sales_quota {$rate_tmp})/ nullif(sum( report.report_sales_volume +  report.report_group_id ),0) ";
                }
            }
        if (in_array('sale_many_channel_sales_volume', $targets)) { //多渠道数量
            if ($datas['sale_datas_origin'] == '1') {
                $fields['sale_many_channel_sales_volume'] = "sum( report.byorder_group_id )";
            } elseif ($datas['sale_datas_origin'] == '2') {
                $fields['sale_many_channel_sales_volume'] = "sum( report.report_group_id )";
            }
        }


        if (in_array('sale_sales_quota', $targets) || in_array('cost_profit_profit_rate', $targets) || in_array('amazon_fee_rate', $targets) || in_array('purchase_logistics_cost_rate', $targets) || in_array('operate_fee_rate', $targets) || in_array('evaluation_fee_rate', $targets) || in_array('cpc_cost_rate', $targets) || in_array('cpc_turnover_rate', $targets)) {  //商品销售额
            if ($datas['sale_datas_origin'] == '1') {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['sale_sales_quota'] = "sum( report.byorder_sales_quota )";
                } else {
                    $fields['sale_sales_quota'] = "sum( report.byorder_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            } elseif ($datas['sale_datas_origin'] == '2') {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['sale_sales_quota'] = "sum( report.report_sales_quota )";
                } else {
                    $fields['sale_sales_quota'] = "sum( report.report_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }
        }

            if (in_array('sales_evaluation_quote', $targets)) {  //测试销售额
                if ($datas['sale_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['sales_evaluation_quote'] = "sum( report.byorderitem_reserved_field72 )";
                    } else {
                        $fields['sales_evaluation_quote'] = "sum( report.byorderitem_reserved_field72 * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                } elseif ($datas['sale_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['sales_evaluation_quote'] = "sum( report.reportitem_reserved_field72 )";
                    } else {
                        $fields['sales_evaluation_quote'] = "sum( report.reportitem_reserved_field72 * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                }
            }

            if (in_array('sale_return_goods_number', $targets) || in_array('sale_refund_rate', $targets)) {  //退款量
                if ($datas['refund_datas_origin'] == '1') {
                    $fields['sale_return_goods_number'] = "sum(report.byorder_refund_num )";
                } elseif ($datas['refund_datas_origin'] == '2') {
                    $fields['sale_return_goods_number'] = "sum(report.report_refund_num )";
                }
            }
            if (in_array('sale_refund', $targets) || $isCalTotalPay) {  //退款
                if ($datas['refund_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['sale_refund'] = "sum( 0 - report.byorder_refund )";
                    } else {
                        $fields['sale_refund'] = "sum( (0 - report.byorder_refund) * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                    }
                } elseif ($datas['refund_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['sale_refund'] = "sum( 0 - report.report_refund )";
                    } else {
                        $fields['sale_refund'] = "sum( (0 - report.report_refund) * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                    }
                }
            }
            if (in_array('sale_refund_rate', $targets)) {  //退款率
                $fields['sale_refund_rate'] = $fields['sale_return_goods_number'] . " * 1.0000 / nullif( " . $fields['sale_sales_volume'] . " ,0) ";
            }

            if (in_array('promote_discount', $targets) || $isCalTotalPay) {  //promote折扣
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['promote_discount'] = "SUM(report.byorder_promote_discount)";
                    } else {
                        $fields['promote_discount'] = "SUM(report.byorder_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['promote_discount'] = "SUM(report.report_promote_discount)";
                    } else {
                        $fields['promote_discount'] = "SUM(report.report_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                }
            }
            if (in_array('promote_refund_discount', $targets) || $isCalTotalPay) {  //退款返还promote折扣
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['promote_refund_discount'] = "SUM(report.byorder_refund_promote_discount)";
                    } else {
                        $fields['promote_refund_discount'] = "SUM(report.byorder_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['promote_refund_discount'] = "SUM(report.report_refund_promote_discount)";
                    } else {
                        $fields['promote_refund_discount'] = "SUM(report.report_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                }
            }

            if (in_array('purchase_logistics_purchase_cost', $targets) || in_array('purchase_logistics_cost_rate', $targets) || in_array('cost_profit_profit', $targets)  || in_array('cost_profit_profit_rate', $targets)
                || $isCalTotalPay) {  //采购成本
                if ($datas['finance_datas_origin'] == 1) {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['purchase_logistics_purchase_cost'] = " sum( report.byorder_purchasing_cost ) ";
                        } else {
                            $fields['purchase_logistics_purchase_cost'] = " sum( report.first_purchasing_cost ) ";
                        }
                    } else {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['purchase_logistics_purchase_cost'] = " sum( report.byorder_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        } else {
                            $fields['purchase_logistics_purchase_cost'] = " sum( report.first_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        }
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['purchase_logistics_purchase_cost'] = " sum( report.report_purchasing_cost ) ";
                        } else {
                            $fields['purchase_logistics_purchase_cost'] = " sum(report.first_purchasing_cost ) ";
                        }
                    } else {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['purchase_logistics_purchase_cost'] = " sum( report.report_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        } else {
                            $fields['purchase_logistics_purchase_cost'] = " sum( report.first_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        }
                    }
                }

            }
            if (in_array('purchase_logistics_logistics_cost', $targets) || in_array('purchase_logistics_cost_rate', $targets) || in_array('cost_profit_profit', $targets)  || in_array('cost_profit_profit_rate', $targets)
                || $isCalTotalPay) {  // 物流/头程
                if ($datas['finance_datas_origin'] == 1) {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['purchase_logistics_logistics_cost'] = " sum( report.byorder_logistics_head_course ) ";
                        } else {
                            $fields['purchase_logistics_logistics_cost'] = " sum(  (report.first_logistics_head_course) ) ";
                        }

                    } else {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['purchase_logistics_logistics_cost'] = " sum( report.byorder_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        } else {
                            $fields['purchase_logistics_logistics_cost'] = " sum( (report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) )) ";
                        }

                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['purchase_logistics_logistics_cost'] = " sum( report.report_logistics_head_course ) ";
                        } else {
                            $fields['purchase_logistics_logistics_cost'] = " sum(  (report.first_logistics_head_course) ) ";
                        }

                    } else {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['purchase_logistics_logistics_cost'] = " sum( report.report_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        } else {
                            $fields['purchase_logistics_logistics_cost'] = " sum( (report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) )) ";
                        }
                    }
                }
            }

            if (in_array('amazon_fee', $targets) || in_array('amazon_fee_rate', $targets) || $isCalTotalPay) {  //亚马逊费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_fee'] = 'sum(report.byorder_goods_amazon_fee'.$this->tax_field.')';
                    } else {
                        $fields['amazon_fee'] = 'sum((report.byorder_goods_amazon_fee'.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    $estimated_monthly_storage_fee_field = "";
                    if ($datas['is_month_table'] == 1){
                        $estimated_monthly_storage_fee_field = " - report.report_estimated_monthly_storage_fee + report.monthly_sku_estimated_monthly_storage_fee";
                    }
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_fee'] = "sum(report.report_goods_amazon_fee {$estimated_monthly_storage_fee_field}{$this->tax_field})";
                    } else {
                        $fields['amazon_fee'] = 'sum((report.report_goods_amazon_fee'.$estimated_monthly_storage_fee_field.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    }
                }
            }

            if (in_array('amazon_sales_commission', $targets)) {  //亚马逊销售佣金
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_sales_commission'] = "sum( report.byorder_platform_sales_commission + report.byorder_reserved_field21) ";
                    } else {
                        $fields['amazon_sales_commission'] = "sum( (report.byorder_platform_sales_commission + report.byorder_reserved_field21) * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_sales_commission'] = "sum( report.report_platform_sales_commission + report.report_reserved_field21 ) ";
                    } else {
                        $fields['amazon_sales_commission'] = "sum( (report.report_platform_sales_commission + report.report_reserved_field21) * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                    }
                }
            }
            if (in_array('amazon_fba_delivery_fee', $targets)) {  //FBA代发货费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_fba_delivery_fee'] = "sum( report.byorder_fba_generation_delivery_cost + report.byorder_fbaperorderfulfillmentfee + report.byorder_fbaweightbasedfee - report.byorder_profit)";
                    } else {
                        $fields['amazon_fba_delivery_fee'] = "sum( report.byorder_fba_generation_delivery_cost * ({:RATE} / COALESCE(rates.rate ,1))+ report.byorder_fbaperorderfulfillmentfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbaweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)) -report.byorder_profit * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_fba_delivery_fee'] = "sum( report.report_fba_generation_delivery_cost + report.report_fbaperorderfulfillmentfee + report.report_fbaweightbasedfee - report.report_profit)";
                    } else {
                        $fields['amazon_fba_delivery_fee'] = "sum( report.report_fba_generation_delivery_cost * ({:RATE} / COALESCE(rates.rate ,1))+ report.report_fbaperorderfulfillmentfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbaweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)) - report.report_profit * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                }
            }
            if (in_array('amazon_multi_channel_delivery_fee', $targets)) {  //多渠道配送费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_multi_channel_delivery_fee'] = "sum( report.byorder_profit ) ";
                    } else {
                        $fields['amazon_multi_channel_delivery_fee'] = "sum( report.byorder_profit * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_multi_channel_delivery_fee'] = "sum( report.report_profit ) ";
                    } else {
                        $fields['amazon_multi_channel_delivery_fee'] = "sum( report.report_profit * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                    }
                }
            }
            if (in_array('amazon_settlement_fee', $targets)) {  //结算费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_settlement_fee'] = "sum( report.byorder_order_variableclosingfee + report.byorder_fixedclosingfee + report.byorder_refund_variableclosingfee )";
                    } else {
                        $fields['amazon_settlement_fee'] = "sum( report.byorder_order_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fixedclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_refund_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_settlement_fee'] = "sum( report.report_order_variableclosingfee + report.report_fixedclosingfee + report.report_refund_variableclosingfee )";
                    } else {
                        $fields['amazon_settlement_fee'] = "sum( report.report_order_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fixedclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_refund_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                }
            }
            if (in_array('amazon_other_fee', $targets)) {  //其他亚马逊费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_other_fee'] = "SUM(report.byorder_goods_amazon_other_fee{$this->tax_field})";
                    } else {
                        $fields['amazon_other_fee'] = "SUM((report.byorder_goods_amazon_other_fee{$this->tax_field}) * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_other_fee'] = "SUM(report.report_goods_amazon_other_fee{$this->tax_field})";
                    } else {
                        $fields['amazon_other_fee'] = "SUM((report.report_goods_amazon_other_fee{$this->tax_field}) * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                }
            }
            if (in_array('amazon_return_shipping_fee', $targets)) {  //返还运费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_return_shipping_fee'] = "sum( report.byorder_returnshipping )";
                    } else {
                        $fields['amazon_return_shipping_fee'] = "sum( report.byorder_returnshipping * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_return_shipping_fee'] = "sum( report.report_returnshipping )";
                    } else {
                        $fields['amazon_return_shipping_fee'] = "sum( report.report_returnshipping * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                }
            }
            if (in_array('amazon_return_sale_commission', $targets)) {  //返还亚马逊销售佣金
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_return_sale_commission'] = "sum( report.byorder_return_and_return_sales_commission )";
                    } else {
                        $fields['amazon_return_sale_commission'] = "sum( report.byorder_return_and_return_sales_commission * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_return_sale_commission'] = "sum( report.report_return_and_return_sales_commission )";
                    } else {
                        $fields['amazon_return_sale_commission'] = "sum( report.report_return_and_return_sales_commission * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                }
            }
            if (in_array('amazon_refund_deducted_commission', $targets)) {  //退款扣除佣金
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_refund_deducted_commission'] = "sum( report.byorder_return_and_return_commission )";
                    } else {
                        $fields['amazon_refund_deducted_commission'] = "sum( report.byorder_return_and_return_commission * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_refund_deducted_commission'] = "sum( report.report_return_and_return_commission )";
                    } else {
                        $fields['amazon_refund_deducted_commission'] = "sum( report.report_return_and_return_commission * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                }
            }
            if (in_array('amazon_fba_return_processing_fee', $targets)) {  //FBA退货处理费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_fba_return_processing_fee'] = "sum( report.byorder_fba_refund_treatment_fee + report.byorder_fbacustomerreturnperorderfee+report.byorder_fbacustomerreturnweightbasedfee)";
                    } else {
                        $fields['amazon_fba_return_processing_fee'] = "sum( report.byorder_fba_refund_treatment_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbacustomerreturnperorderfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbacustomerreturnweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)))";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_fba_return_processing_fee'] = "sum( report.report_fba_refund_treatment_fee + report.report_fbacustomerreturnperorderfee + report.report_fbacustomerreturnweightbasedfee)";
                    } else {
                        $fields['amazon_fba_return_processing_fee'] = "sum( report.report_fba_refund_treatment_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbacustomerreturnperorderfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbacustomerreturnweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)))";
                    }
                }
            }
            if (in_array('amazon_fba_monthly_storage_fee', $targets)) {  //FBA月仓储费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_fba_monthly_storage_fee'] = "sum( report.byorder_estimated_monthly_storage_fee )";
                    } else {
                        $fields['amazon_fba_monthly_storage_fee'] = "sum( report.byorder_estimated_monthly_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    $estimated_monthly_storage_fee_field = "report.report_estimated_monthly_storage_fee";
                    if ($datas['is_month_table'] == 1){
                        $estimated_monthly_storage_fee_field = " report.monthly_sku_estimated_monthly_storage_fee";
                    }
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_fba_monthly_storage_fee'] = "sum( {$estimated_monthly_storage_fee_field} )";
                    } else {
                        $fields['amazon_fba_monthly_storage_fee'] = "sum( {$estimated_monthly_storage_fee_field} * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                }
            }
            if (in_array('amazon_long_term_storage_fee', $targets)) { //FBA长期仓储费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_long_term_storage_fee'] = 'SUM(report.byorder_long_term_storage_fee)';
                    } else {
                        $fields['amazon_long_term_storage_fee'] = 'SUM(report.byorder_long_term_storage_fee  * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_long_term_storage_fee'] = 'SUM(report.report_long_term_storage_fee)';
                    } else {
                        $fields['amazon_long_term_storage_fee'] = 'SUM(report.report_long_term_storage_fee  * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    }
                }
            }
            if (in_array('amazon_fee_rate', $targets)) {  //亚马逊费用占比
                $fields['amazon_fee_rate'] = '(' . $fields['amazon_fee'] . ") * 1.0000 / nullif( " . $fields['sale_sales_quota'] . " , 0 ) ";
            }

            if (in_array('purchase_logistics_cost_rate', $targets)) {  // 成本/物流费用占比
                $fields['purchase_logistics_cost_rate'] = '(' . $fields['purchase_logistics_purchase_cost'] . ' + ' . $fields['purchase_logistics_logistics_cost'] . ") * 1.0000 / nullif( " . $fields['sale_sales_quota'] . " , 0 ) ";
            }
            if (in_array('operate_fee', $targets) || in_array('operate_fee_rate', $targets) || $isCalTotalPay) {  //运营费用
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['operate_fee'] = "sum( 0- report.byorder_reserved_field16 ) ";
                } else {
                    $fields['operate_fee'] = "sum( (0 -  report.byorder_reserved_field16) * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                }
            }
            if (in_array('operate_fee_rate', $targets)) {  //运营费用占比
                $fields['operate_fee_rate'] = '(' . $fields['operate_fee'] . ") * 1.0000 / nullif( " . $fields['sale_sales_quota'] . " , 0 ) ";
            }
            if (in_array('evaluation_fee', $targets) || in_array('evaluation_fee_rate', $targets) || $isCalTotalPay) {  //测评费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['evaluation_fee'] = "sum( report.byorder_reserved_field10 ) ";
                    } else {
                        $fields['evaluation_fee'] = "sum( report.byorder_reserved_field10 * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                    }
                }else{
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['evaluation_fee'] = "sum( report.report_reserved_field10 ) ";
                    } else {
                        $fields['evaluation_fee'] = "sum( report.report_reserved_field10 * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                    }
                }
            }
            if (in_array('evaluation_fee_rate', $targets)) {  //测评费用占比
                $fields['evaluation_fee_rate'] = '(' . $fields['evaluation_fee'] . ") * 1.0000 / nullif( " . $fields['sale_sales_quota'] . " , 0 ) ";
            }

            if (in_array('cpc_sp_cost', $targets) || $isCalTotalPay) {  //CPC_SP花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['cpc_sp_cost'] = " sum( report.byorder_cpc_cost) ";
                } else {
                    $fields['cpc_sp_cost'] = " sum( report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1))) ";
                }
            }
            if (in_array('cpc_sd_cost', $targets) || $isCalTotalPay) {  //CPC_SD花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['cpc_sd_cost'] = " sum( report.byorder_cpc_sd_cost) ";
                } else {
                    $fields['cpc_sd_cost'] = " sum( report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1))) ";
                }
            }

            if (in_array('cpc_cost', $targets) || in_array('cpc_cost_rate', $targets) || in_array('cpc_avg_click_cost', $targets) || in_array('cpc_acos', $targets)) {  //CPC花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['cpc_cost'] = " sum( report.byorder_cpc_cost + report.byorder_cpc_sd_cost ) ";
                } else {
                    $fields['cpc_cost'] = " sum( report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                }
            }
            if (in_array('cpc_cost_rate', $targets)) {  //CPC花费占比
                $fields['cpc_cost_rate'] = '(' . $fields['cpc_cost'] . ") * 1.0000 / nullif( " . $fields['sale_sales_quota'] . " , 0 ) ";
            }
            if (in_array('cpc_exposure', $targets) || in_array('cpc_click_rate', $targets)) {  //CPC曝光量
                $fields['cpc_exposure'] = "sum( report.byorder_reserved_field1 + report.byorder_reserved_field2 )";
            }
            if (in_array('cpc_click_number', $targets) || in_array('cpc_click_rate', $targets) || in_array('cpc_click_conversion_rate', $targets) || in_array('cpc_avg_click_cost', $targets)) {  //CPC点击次数
                $fields['cpc_click_number'] = "sum( report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks )";
            }
            if (in_array('cpc_click_rate', $targets)) {  //CPC点击率
                $fields['cpc_click_rate'] = '('.$fields['cpc_click_number'].')' . " * 1.0000 / nullif( " . $fields['cpc_exposure'] . " , 0 ) ";
            }
            if (in_array('cpc_order_number', $targets) || in_array('cpc_order_rate', $targets) || in_array('cpc_click_conversion_rate', $targets)) {  //CPC订单数
                $fields['cpc_order_number'] = 'sum( report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" ) ';
            }
            if (in_array('cpc_order_rate', $targets)) {  //cpc订单占比
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['cpc_order_rate'] = '(' . $fields['cpc_order_number'] . ") * 1.0000 / nullif( SUM(report.byorder_sales_volume+report.byorder_group_id ) , 0 )  ";
                }else{
                    $fields['cpc_order_rate'] = '(' . $fields['cpc_order_number'] . ") * 1.0000 / nullif( SUM(report.report_sales_volume +report.report_group_id  ) , 0 ) ";
                }

            }
            if (in_array('cpc_click_conversion_rate', $targets)) {  //cpc点击转化率
                $fields['cpc_click_conversion_rate'] = '('.$fields['cpc_order_number'] . ") * 1.0000 / nullif( " . $fields['cpc_click_number'] . " , 0 ) ";
            }
            if (in_array('cpc_turnover', $targets) || in_array('cpc_turnover_rate', $targets) || in_array('cpc_acos', $targets)) {  //CPC成交额
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['cpc_turnover'] = 'sum( report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d"  )';
                } else {
                    $fields['cpc_turnover'] = 'sum( report."byorder_sp_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1)) + report."byorder_sd_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1))  )';
                }
            }
            if (in_array('cpc_turnover_rate', $targets)) {  //CPC成交额占比
                $fields['cpc_turnover_rate'] = '(' . $fields['cpc_turnover'] . ") * 1.0000 / nullif( " . $fields['sale_sales_quota'] . " , 0 ) ";
            }
            if (in_array('cpc_avg_click_cost', $targets)) {  //CPC平均点击花费
                $fields['cpc_avg_click_cost'] = '('.$fields['cpc_cost'] . ") * 1.0000 / nullif( " . $fields['cpc_click_number'] . " , 0 ) ";
            }
            if (in_array('cpc_acos', $targets)) {  // ACOS
                $fields['cpc_acos'] = '('.$fields['cpc_cost'] . ") * 1.0000 / nullif( " . $fields['cpc_turnover'] . " , 0 ) ";
            }
            if (in_array('cpc_direct_sales_volume', $targets) || in_array('cpc_direct_sales_volume_rate', $targets)) {  //CPC直接销量
                $fields['cpc_direct_sales_volume'] = 'sum( report."byorder_sd_attributedConversions7dSameSKU" + report."byorder_sp_attributedConversions7dSameSKU" )';
            }
            if (in_array('cpc_direct_sales_quota', $targets)) {  //CPC直接销售额
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['cpc_direct_sales_quota'] = 'sum( report."byorder_sd_attributedSales7dSameSKU" + report."byorder_sp_attributedSales7dSameSKU" )';
                } else {
                    $fields['cpc_direct_sales_quota'] = 'sum( report."byorder_sd_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1))  + report."byorder_sp_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1))  )';
                }
            }
            if (in_array('cpc_direct_sales_volume_rate', $targets)) {  // CPC直接销量占比
                $fields['cpc_direct_sales_volume_rate'] = '(' . $fields['cpc_direct_sales_volume'] . ") * 1.0000 / nullif( " . $fields['sale_sales_volume'] . " , 0 ) ";
            }
            if (in_array('cpc_indirect_sales_volume', $targets) || in_array('cpc_indirect_sales_volume_rate', $targets)) {  //CPC间接销量
                $fields['cpc_indirect_sales_volume'] = 'sum( report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" - report."byorder_sd_attributedConversions7dSameSKU" - report."byorder_sp_attributedConversions7dSameSKU" ) ';
            }
            if (in_array('cpc_indirect_sales_quota', $targets)) {  //CPC间接销售额
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['cpc_indirect_sales_quota'] = 'sum(report."byorder_sd_attributedSales7d" + report."byorder_sp_attributedSales7d"  - report."byorder_sd_attributedSales7dSameSKU" - report."byorder_sp_attributedSales7dSameSKU"  )';
                } else {
                    $fields['cpc_indirect_sales_quota'] = 'sum(report."byorder_sd_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1))  + report."byorder_sp_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1)) - report."byorder_sd_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1))  - report."byorder_sp_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1))  )';
                }
            }
            if (in_array('cpc_sales_quota', $targets)) {  //CPC销售额=CPC直接销售额+CPC间接销售额
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['cpc_sales_quota'] = 'sum( report."byorder_sd_attributedSales7d" + report."byorder_sp_attributedSales7d")';
                } else {
                    $fields['cpc_sales_quota'] = 'sum(report."byorder_sd_attributedSales7d" / COALESCE(rates.rate ,1) * {:RATE}  + report."byorder_sp_attributedSales7d" / COALESCE(rates.rate ,1) * {:RATE}) ';
                }
            }

            if (in_array('cpc_indirect_sales_volume_rate', $targets)) {  //CPC间接销量占比
                $fields['cpc_indirect_sales_volume_rate'] = '(' . $fields['cpc_indirect_sales_volume'] . ") * 1.0000 / nullif( " . $fields['sale_sales_volume'] . " , 0 ) ";
            }

            if (in_array('other_vat_fee', $targets) || $isCalTotalPay) { //VAT
                if($datas['finance_datas_origin'] == 1){
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['other_vat_fee'] = "SUM(0-report.byorder_reserved_field17)";
                    } else {
                        $fields['other_vat_fee'] = "SUM((0-report.byorder_reserved_field17) * ({:RATE} / COALESCE(rates.rate ,1)))";
                    }
                }else{
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['other_vat_fee'] = "SUM(0-report.report_reserved_field17)";
                    } else {
                        $fields['other_vat_fee'] = "SUM((0-report.report_reserved_field17) * ({:RATE} / COALESCE(rates.rate ,1)))";
                    }
                }
            }

            //费用分摊
            $goodsSplitFields = $this->default_goods_split_fields;

            if (in_array('goods_promote_coupon', $targets))
            {
                $tempField = $goodsSplitFields['goods_promote_coupon'];

                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['goods_promote_coupon'] = "SUM(report.monthly_sku_{$tempField})";
                } else {
                    $fields['goods_promote_coupon'] = "SUM(report.monthly_sku_{$tempField} * ({:RATE} / COALESCE(rates.rate ,1)))";
                }
            }

            if (in_array('goods_other_review_enrollment_fee', $targets))
            {
                $tempField = $goodsSplitFields['goods_other_review_enrollment_fee'];

                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['goods_other_review_enrollment_fee'] = "SUM(report.monthly_sku_{$tempField})";
                } else {
                    $fields['goods_other_review_enrollment_fee'] = "SUM(report.monthly_sku_{$tempField} * ({:RATE} / COALESCE(rates.rate ,1)))";
                }
            }

            if (in_array('goods_promote_run_lightning_deal_fee', $targets))
            {
                $tempField = $goodsSplitFields['goods_promote_run_lightning_deal_fee'];

                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['goods_promote_run_lightning_deal_fee'] = "SUM(report.monthly_sku_{$tempField})";
                } else {
                    $fields['goods_promote_run_lightning_deal_fee'] = "SUM(report.monthly_sku_{$tempField} * ({:RATE} / COALESCE(rates.rate ,1)))";
                }
            }

            if (in_array('fba_sales_stock', $targets)) {  //可售库存
                $fields['fba_sales_stock'] = '1';
            }
            if (in_array('fba_sales_day', $targets)) {  //可售天数
                $fields['fba_sales_day'] = '1';
            }
            if (in_array('fba_reserve_stock', $targets)) {  //预留库存
                $fields['fba_reserve_stock'] = '1';
            }
            if (in_array('fba_recommended_replenishment', $targets)) {  //建议补货量
                $fields['fba_recommended_replenishment'] = '1';
            }
            if (in_array('fba_special_purpose', $targets)) {  //FBA专用
                $fields['fba_special_purpose'] = '1';
            }

            $erp_value = $datas['is_distinct_channel'] == 0 && $datas['count_dimension'] == 'sku' ? 'NULL' : '1';
            if (in_array('ark_erp_purchasing_num', $targets)) { //采购在途
                $fields['ark_erp_purchasing_num'] = $erp_value;
            }
            if (in_array('ark_erp_send_num', $targets)) { //调拨在途
                $fields['ark_erp_send_num'] = $erp_value;
            }
            if (in_array('ark_erp_good_num', $targets)) { //库存良品量
                $fields['ark_erp_good_num'] = $erp_value;
            }
            if (in_array('ark_erp_bad_num', $targets)) { //库存次品量
                $fields['ark_erp_bad_num'] = $erp_value;
            }
            if (in_array('ark_erp_lock_num', $targets)) { //库存锁仓量
                $fields['ark_erp_lock_num'] = $erp_value;
            }
            if (in_array('ark_erp_goods_cost_total', $targets)) { //ERP在库总成本
                $fields['ark_erp_goods_cost_total'] = $erp_value;
            }

            if (in_array('cost_profit_total_income', $targets) || $isCalTotalPay) {   //总收入
                if ($datas['sale_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['cost_profit_total_income'] = "sum( report.byorder_sales_quota )";
                    } else {
                        $fields['cost_profit_total_income'] = "sum( report.byorder_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                } elseif ($datas['sale_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['cost_profit_total_income'] = "sum( report.report_sales_quota )";
                    } else {
                        $fields['cost_profit_total_income'] = "sum( report.report_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                }


            }

            //调整总收入、总支出、毛利润计算方式：
            //总收入=商品销售额+ 退款返还Promote折扣
            //总支出=亚马逊费用 + 退款 + promote折扣 + cpc_sp_cost + cpc_sd_cost + 商品成本 + 物流 + 测评费用 + 运营费用 + VAT
            //毛利润=总收入+总支出（总支出为负值），毛利率=毛利润/总收入
            if (in_array('cost_profit_total_pay', $targets) || $isCalTotalPay) {   //总支出
                $fields['cost_profit_total_pay'] ="{$fields['amazon_fee']}+{$fields['sale_refund']}+{$fields['promote_discount']}+{$fields['cpc_sp_cost']}
                                                +{$fields['cpc_sd_cost']}+{$fields['purchase_logistics_purchase_cost']}+{$fields['purchase_logistics_logistics_cost']}+{$fields['evaluation_fee']}
                                                +{$fields['operate_fee']}+{$fields['other_vat_fee']}+{$fields['promote_refund_discount']}";
            }
//        if (in_array('cost_profit_profit', $targets) || in_array('cost_profit_profit_rate', $targets)) {
//            $fields['cost_profit_profit'] = $fields['cost_profit_total_income'] . "+" . $fields['cost_profit_total_pay'];
//            if (in_array('cost_profit_profit_rate', $targets)) {  //毛利率
//                $fields['cost_profit_profit_rate'] = '('.$fields['cost_profit_profit'] . ") * 1.0000 / nullif( " . $fields['cost_profit_total_income'] . " ,0) ";
//            }
//        }
            if (in_array('cost_profit_profit', $targets) || in_array('cost_profit_profit_rate', $targets)) {  //毛利润
                //商品利润聚合数据只聚合财务维度 。 如果销售额或退款维度与财务不一致，需要转换修复
                $repair_data = $this->tax_field ;
                if ($datas['finance_datas_origin'] == '1') {
                    if($datas['sale_datas_origin'] == '2'){
                        $repair_data.= " + report.report_sales_quota - report.byorder_sales_quota  " ;
                    }
                    if($datas['refund_datas_origin'] == '2'){
                        $repair_data.= empty($repair_data) ? "  + report.byorder_refund - report.report_refund " : " + report.byorder_refund - report.report_refund " ;
                    }

                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['cost_profit_profit'] = '(SUM(report.byorder_goods_profit'.$repair_data.')'  . '+'. $fields['purchase_logistics_purchase_cost'] . '+' . $fields['purchase_logistics_logistics_cost'].')';
                    } else {
                        $fields['cost_profit_profit'] = '(SUM((report.byorder_goods_profit'.$repair_data.') * ({:RATE} / COALESCE(rates.rate ,1)))' . '+' . $fields['purchase_logistics_purchase_cost'] . '+' . $fields['purchase_logistics_logistics_cost'].')';
                    }

            } else {
                if($datas['sale_datas_origin'] == '1'){
                    $repair_data.= " + report.byorder_sales_quota - report.report_sales_quota  " ;
                }
                if($datas['refund_datas_origin'] == '1'){
                    $repair_data.= empty($repair_data) ? " + report.report_refund - report.byorder_refund " : " + report.report_refund - report.byorder_refund" ;
                }
                $estimated_monthly_storage_fee_field = "";
                if ($datas['is_month_table'] == 1){
                    $estimated_monthly_storage_fee_field = " - report.report_estimated_monthly_storage_fee + report.monthly_sku_estimated_monthly_storage_fee";
                }
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['cost_profit_profit'] = '(SUM((report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost)'.$repair_data.$estimated_monthly_storage_fee_field.')+' . $fields['purchase_logistics_purchase_cost'] . '+' . $fields['purchase_logistics_logistics_cost'].')';
                } else {
                    $fields['cost_profit_profit'] = '(SUM(((report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost)'.$repair_data.$estimated_monthly_storage_fee_field.') * ({:RATE} / COALESCE(rates.rate ,1)))' . '+' . $fields['purchase_logistics_purchase_cost'] . '+' . $fields['purchase_logistics_logistics_cost'].')';
                }

                }

            }
            if (in_array('cost_profit_profit_rate', $targets)) {  //毛利率
                $fields['cost_profit_profit_rate'] = $fields['cost_profit_profit'] . " /  nullif( " . $fields['sale_sales_quota'] . " , 0 ) ";
            }

            if (in_array('sales_order_quantity', $targets)) {  //订单明细数
                $tmp_field = $datas['sale_datas_origin'] == '1' ? 'byorder_order_quantity' : 'report_order_quantity';
                $fields['sales_order_quantity'] = "sum( report.{$tmp_field} )";
            }

            if (in_array('sales_evaluation_nums', $targets)) {  //测评销量
                $tmp_field = $datas['sale_datas_origin'] == '1' ? 'byorderitem_evaluation_nums' : 'reportitem_evaluation_nums';
                $fields['sales_evaluation_nums'] = "sum( report.{$tmp_field} )";
            }

            if (in_array('sales_evaluation_order_nums', $targets)) {  //测评订单量
                $tmp_field = $datas['sale_datas_origin'] == '1' ? 'byorderitem_evaluation_order_nums' : 'reportitem_evaluation_order_nums';
                $fields['sales_evaluation_order_nums'] = "sum( report.{$tmp_field} )";
            }

            if (in_array('fba_sales_refund', $targets)) {  //FBA退款金额
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorderitem_reserved_field12' : 'reportitem_reserved_field12';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['fba_sales_refund'] = "sum( report.{$tmp_field} )";
                } else {
                    $fields['fba_sales_refund'] = "sum( report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('fbm_sales_refund', $targets)) {  //FBM退款金额
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorderitem_reserved_field13' : 'reportitem_reserved_field13';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['fbm_sales_refund'] = "sum( report.{$tmp_field} )";
                } else {
                    $fields['fbm_sales_refund'] = "sum( report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('amazon_fba_lost_num', $targets)) {  //仓库丢失赔偿数量
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_lost_num' : 'report_lost_num';
                $fields['amazon_fba_lost_num'] = "sum( report.{$tmp_field} )";
            }

            if (in_array('amazon_fba_damage_num', $targets)) {  //仓库损坏赔偿数量
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_damage_num' : 'report_damage_num';
                $fields['amazon_fba_damage_num'] = "sum( report.{$tmp_field} )";
            }

            if (in_array('buyer_evaluation_bad_review', $targets)) {  //商品的Review中差评
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorderitem_in_bad_reviews' : 'reportitem_in_bad_reviews';
                $fields['buyer_evaluation_bad_review'] = "sum( report.{$tmp_field} )";
            }

            if (in_array('purchase_purchase_cost_unit', $targets)) {  //单位采购成本
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['purchase_purchase_cost_unit'] = "max( report.goods_purchasing_cost )";
                } else {
                    $fields['purchase_purchase_cost_unit'] = "max( report.goods_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('purchase_fba_head_course_unit', $targets)) {  //单位FBA头程运费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['purchase_fba_head_course_unit'] = "max( report.goods_logistics_head_course )";
                } else {
                    $fields['purchase_fba_head_course_unit'] = "max( report.goods_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('purchase_fbm_head_course_unit', $targets)) {  //单位FBM头程运费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['purchase_fbm_head_course_unit'] = "max( report.goods_fbm_logistics_head_course )";
                } else {
                    $fields['purchase_fbm_head_course_unit'] = "max( report.goods_fbm_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('amazon_market_vat_principal', $targets)) {  //MarketplaceFacilitatorVAT-Principal
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_cpc_sb_sales_quota' : 'report_cpc_sb_sales_quota';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_market_vat_principal'] = "sum( report.{$tmp_field} )";
                } else {
                    $fields['amazon_market_vat_principal'] = "sum( report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('amazon_market_vat_shipping', $targets)) {  //MarketplaceFacilitatorVAT-Shipping
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_cpc_sb_cost' : 'report_cpc_sb_cost';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_market_vat_shipping'] = "sum( report.{$tmp_field} )";
                } else {
                    $fields['amazon_market_vat_shipping'] = "sum( report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('amazon_market_vat_principal_refund', $targets)) {  //MarketplaceFacilitatorVAT-Principal-refund
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_refund_rate' : 'report_refund_rate';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_market_vat_principal_refund'] = "sum( report.{$tmp_field} )";
                } else {
                    $fields['amazon_market_vat_principal_refund'] = "sum( report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('amazon_market_vat_shipping_refund', $targets)) {  //MarketplaceFacilitatorVAT-Shipping-refund
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_profit_margin' : 'report_profit_margin';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_market_vat_shipping_refund'] = "sum( report.{$tmp_field} )";
                } else {
                    $fields['amazon_market_vat_shipping_refund'] = "sum( report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }
            $this->getUnTimeFields($fields,$datas,$targets);

        }


        //加入自定义指标
        $fba_target_key = $operation_table_field = $erp_target_key = [];
        $is_count = !empty($datas['is_count']) ? $datas['is_count'] : 0;
        $datas['list_type'] = 1;//1-商品 2-店铺 fba用的
        $this->getCustomTargetFields($fields,$this->customTargetsList,$targets,$targets_temp, $datas,$fba_target_key,$operation_table_field,$is_count,$isMysql, $erp_target_key);
        return ['fields' => $fields,'fba_target_key' => $fba_target_key, 'erp_target_key' => $erp_target_key];
    }

    private function getGoodsTheSameFields($datas,$fields,$isMysql = false){
        $fields['user_id'] = 'max(report.user_id)';
        $fields['goods_id'] = 'max(report.amazon_goods_id)';
        $fields['site_country_id'] = 'max(report.site_id)';

        if ($datas['is_distinct_channel'] != '1'){
            $fields['channel_num'] = 'COUNT(DISTINCT(report.channel_id))';
            $fields['channel_id'] = 'max(report.channel_id)';
            $fields['site_id'] = 'max(report.site_id)';
            if (in_array($datas['count_dimension'],['parent_asin','asin','sku']) && $datas['is_count'] == 0){
                if ($isMysql){
                    $fields['all_channel_id'] = "GROUP_CONCAT(DISTINCT report.channel_id)";
                }else{
                    $fields['all_channel_id'] = "array_join(array_agg(DISTINCT report.channel_id), ',')";
                }
            }


        }
        if (in_array($datas['count_dimension'],['parent_asin','asin','sku']) && isset($datas['is_goods_details']) && $datas['is_goods_details'] == 1 && $datas['is_count'] == 0){
            if ($isMysql){
                $fields['all_goods_g_amazon_goods_id'] = "GROUP_CONCAT(DISTINCT amazon_goods.goods_g_amazon_goods_id)";
                $fields['group'] = "GROUP_CONCAT(DISTINCT report.goods_group_name)";
                $fields['goods_operation_user_admin_id'] = "GROUP_CONCAT(DISTINCT amazon_goods.goods_operation_user_admin_id)";

            }else{
                $fields['all_goods_g_amazon_goods_id'] = "array_join(array_agg(DISTINCT amazon_goods.goods_g_amazon_goods_id), ',')";
                $fields['group'] = "array_join(array_agg(DISTINCT report.goods_group_name), ',')";
                $fields['goods_operation_user_admin_id'] = "array_join(array_agg(DISTINCT amazon_goods.goods_operation_user_admin_id), ',')";
            }
        }
        if (in_array($datas['count_dimension'],['group']) && isset($datas['is_goods_details']) && $datas['is_goods_details'] == 1 && $datas['is_count'] == 0){
            if ($isMysql){

                $fields['goods_operation_user_admin_id'] = "GROUP_CONCAT(DISTINCT amazon_goods.goods_operation_user_admin_id)";

            }else{
                $fields['goods_operation_user_admin_id'] = "array_join(array_agg(DISTINCT amazon_goods.goods_operation_user_admin_id), ',')";
            }
        }

        if (in_array($datas['count_dimension'],['parent_asin','asin','sku','isku'])){
            if ($datas['currency_code'] == 'ORIGIN') {
                $fields['goods_price_min'] = 'min(report.goods_price)';
                $fields['goods_price_max'] = 'max(report.goods_price)';
            } else {
                $fields['goods_price_min'] = 'min(report.goods_price* ({:RATE} / COALESCE(rates.rate ,1)))';
                $fields['goods_price_max'] = 'max(report.goods_price* ({:RATE} / COALESCE(rates.rate ,1)))';

            }

            $fields['min_transport_mode'] = ' min(report.goods_Transport_mode) ' ;
            $fields['max_transport_mode'] = ' max(report.goods_Transport_mode) ' ;
        }

        if ($datas['count_dimension'] == 'parent_asin') {
            $fields['parent_asin'] = "max(report.goods_parent_asin)";
            $fields['image'] = 'max(report.goods_image)';
            $fields['title'] = 'max(report.goods_title)';
            if($datas['is_distinct_channel'] == '1'){
                $fields['channel_id'] = 'max(report.channel_id)';
                $fields['site_id'] = 'max(report.site_id)';
                $fields['goods_product_category_name_1'] = 'max(report.goods_product_category_name_1)';
                $fields['goods_product_category_name_2'] = 'max(report.goods_product_category_name_2)';
                $fields['goods_product_category_name_3'] = 'max(report.goods_product_category_name_3)';
            }
            $fields['goods_is_care']                 = 'max(report.goods_is_care)';
            $fields['is_keyword']                 = 'max(report.goods_is_keyword)';
            $fields['goods_is_new']                  = 'max(report.goods_is_new)';
            $fields['up_status']                  = 'min(report.goods_up_status)';
            $fields['is_remarks']       = 'max(report.goods_is_remarks)';
            $fields['goods_g_amazon_goods_id']       = 'max(report.goods_g_amazon_goods_id)';
        }else if ($datas['count_dimension'] == 'asin') {
            $fields['asin'] = "max(report.goods_asin)";
            $fields['image'] = 'max(report.goods_image)';
            $fields['title'] = 'max(report.goods_title)';
            if($datas['is_distinct_channel'] == '1'){
                $fields['parent_asin'] = "max(report.goods_parent_asin)";
                $fields['channel_id'] = 'max(report.channel_id)';
                $fields['site_id'] = 'max(report.site_id)';
                $fields['goods_product_category_name_1'] = 'max(report.goods_product_category_name_1)';
                $fields['goods_product_category_name_2'] = 'max(report.goods_product_category_name_2)';
                $fields['goods_product_category_name_3'] = 'max(report.goods_product_category_name_3)';
            }
            if ($datas['is_count'] == 0){
                if ($isMysql){
                    $fields['sku'] = "GROUP_CONCAT(DISTINCT report.goods_sku SEPARATOR '_expsku_')";
                }else{
                    $fields['sku'] = "array_join(array_agg(DISTINCT report.goods_sku), '_expsku_')";
                }
            }

            $fields['goods_is_care']                 = 'max(report.goods_is_care)';
            $fields['is_keyword']                 = 'max(report.goods_is_keyword)';
            $fields['goods_is_new']                  = 'max(report.goods_is_new)';
            $fields['up_status']                  = 'min(report.goods_up_status)';
            $fields['goods_g_amazon_goods_id']       = 'max(report.goods_g_amazon_goods_id)';
            $fields['is_remarks']       = 'max(report.goods_is_remarks)';
        }else if ($datas['count_dimension'] == 'sku') {
            $fields['sku'] = "max(report.goods_sku)";
            $fields['image'] = 'max(report.goods_image)';
            $fields['title'] = 'max(report.goods_title)';
            $fields['up_status']                  = 'min(report.goods_up_status)';

            if($datas['is_distinct_channel'] == '1'){

                $fields['asin'] = "max(report.goods_asin)";
                $fields['parent_asin'] = "max(report.goods_parent_asin)";

                $fields['goods_product_category_name_1'] = 'max(report.goods_product_category_name_1)';
                $fields['goods_product_category_name_2'] = 'max(report.goods_product_category_name_2)';
                $fields['goods_product_category_name_3'] = 'max(report.goods_product_category_name_3)';
                $fields['goods_is_care']                 = 'max(report.goods_is_care)';
                $fields['is_keyword']                 = 'max(report.goods_is_keyword)';
                $fields['goods_is_new']                  = 'max(report.goods_is_new)';
                $fields['isku_id']                       = 'max(report.goods_isku_id)';
                $fields['goods_fnsku']                  = 'max(amazon_goods.goods_fnsku)';
                $fields['channel_id'] = 'max(report.channel_id)';
                $fields['site_id'] = 'max(report.site_id)';
                $fields['class1'] = 'max(report.goods_product_category_name_1)';
                $fields['group'] = 'max(report.goods_group_name)';
                $fields['goods_operation_user_admin_id'] = 'max(report.goods_operation_user_admin_id)';
            }else{
                if ($datas['is_count'] == 0){
                    if ($isMysql){
                        $fields['asin'] = "GROUP_CONCAT(DISTINCT report.goods_asin)";
                    }else{
                        $fields['asin'] = "array_join(array_agg(DISTINCT report.goods_asin), ',')";
                    }
                }

            }
            $fields['goods_g_amazon_goods_id']       = 'max(report.goods_g_amazon_goods_id)';
            $fields['is_remarks']       = 'max(report.goods_is_remarks)';
        } else if ($datas['count_dimension'] == 'isku') {
            $fields['isku_id'] = 'max(report.goods_isku_id)';
        }else if ($datas['count_dimension'] == 'class1') {
            $fields['class1'] = 'max(report.goods_product_category_name_1)';
            $fields['class1_id'] = 'max(report.goods_product_category_id_1)';
        } else if ($datas['count_dimension'] == 'group') {
            $fields['group_id'] = 'max(report.goods_group_id)';
            $fields['group'] = 'max(report.goods_group_name)';
        }else if ($datas['count_dimension'] == 'tags') {
            $fields['tags_id'] = 'max(tags_rel.tags_id)';
            $fields['tags'] = 'max(gtags.tag_name)';
        } else if ($datas['count_dimension'] == 'head_id') {
            $fields['head_id'] = 'max(report.isku_head_id)';
        } else if ($datas['count_dimension'] == 'developer_id') {
            $fields['developer_id'] = 'max(report.isku_developer_id)';
        } elseif($datas['count_dimension'] == 'all_goods') {
            if($datas['is_distinct_channel'] == '1'){
                $fields['channel_id'] = 'max(report.channel_id)';
            }
        } else if($datas['count_dimension'] == 'goods_channel'){
            $fields['channel_id'] = 'max(report.channel_id)';
            $fields['site_id'] = 'max(report.site_id)';
        }elseif($datas['count_dimension'] == 'goods_site_id'){
            $fields['site_id'] = 'max(report.site_id)';
        }elseif($datas['count_dimension'] == 'goods_operators'){
            $fields['goods_operation_user_admin_id'] = 'max(report.goods_operation_user_admin_id)';
            if ($datas['is_distinct_channel'] == 1) {
                $fields['channel_id'] = 'max(report.channel_id)';
                $fields['site_id'] = 'max(report.site_id)';
            }
        }
        return $fields;
    }

    //按商品维度,时间展示字段（新增统计维度完成）
    private function getGoodsTimeFields($datas = [], $time_line,$isMysql = false)
    {
        $fields = [];
        $fields = $this->getGoodsTheSameFields($datas,$fields,$isMysql);

        if($datas['time_target'] == 'goods_views_rate' || $datas['time_target'] == 'goods_buyer_visit_rate'){
            $table = "{$this->table_goods_day_report} ";
            $ym_where = $this->getYnWhere($datas['max_ym'],$datas['min_ym']);
            $where  = $ym_where . " AND  report.user_id_mod = " . $this->dws_user_id_mod ." AND " . $datas['origin_where'];
            if($datas['is_distinct_channel'] == 1 && ($datas['count_dimension'] == 'sku' or $datas['count_dimension'] == 'asin' or $datas['count_dimension'] == 'parent_asin') && $datas['is_count'] != 1){
                $totals_view_session_lists = $this->select($where." AND byorder_number_of_visits>0", 'report.channel_id,SUM(report.byorder_number_of_visits) as total_views_number , SUM(report.byorder_user_sessions) as total_user_sessions', $table,'','',"report.channel_id");
            }else{
                $total_views_session_numbers = $this->get_one($where, 'SUM(report.byorder_number_of_visits) as total_views_number , SUM(report.byorder_user_sessions) as total_user_sessions', $table);
            }
        }

        $target_key = $datas['time_target'];
        $datas_ark_custom_target_md = new DatasArkCustomTargetMySQLModel([], $this->dbhost, $this->codeno);
        //自定义算法
        $target_template = $datas['is_new_index'] == 1 ? 1 : 0;
        $custom_target = $this->timeCustomTarget;
        $keys = [];
        $new_target_keys = [];
        if($custom_target && $custom_target['target_type'] == 2){
            $time_targets = explode(",",$custom_target['formula_fields']);
            //公式所涉及到的新增指标
            $target_key_str = trim("'" . implode("','",$time_targets) . "'");
            $new_target = $datas_ark_custom_target_md->getList("user_id = {$datas['user_id']} AND target_type = 1 AND count_dimension IN (1,2) AND target_key IN ($target_key_str) AND target_template = {$target_template}","target_key,month_goods_field,format_type");
            $keys = array_column($new_target,'target_key');
            $new_target_keys = array_column($new_target,null,'target_key');
        }else{
            $time_targets = array($target_key);
        }
        $time_fields = array();
        $time_fields_arr = array();
        //erp库存指标 进销存明细
        $erpReportTargets = config('common.erp_report_fields_arr');
        foreach ($time_targets as $time_target) {
            if ($datas['is_new_index'] == 1){
                if ($custom_target && $custom_target['target_type'] == 1) {
                    $tempField = "report.monthly_sku_" . $custom_target['month_goods_field'];
                    //新增指标
                    if ($datas['currency_code'] != 'ORIGIN' && $custom_target['format_type'] == 4) {
                        $fields['count_total'] = "sum({$tempField} / COALESCE(rates.rate, 1) * {:RATE})";
                        $time_fields = $this->getTimeFields($time_line, "{$tempField} * ({:RATE} / COALESCE(rates.rate ,1))");
                    } else {
                        $fields['count_total'] = "SUM({$tempField})";
                        $time_fields = $this->getTimeFields($time_line, $tempField);
                    }
                    $fields[$time_target] = $fields['count_total'] ;
                    $time_fields_arr[$time_target] = $time_fields ;
                } elseif (in_array($time_target, $keys)) {
                    $tempField = "report.monthly_sku_" . $new_target_keys[$time_target]['month_goods_field'];
                    //新增指标
                    if ($datas['currency_code'] != 'ORIGIN' && $new_target_keys[$time_target]['format_type'] == 4) {
                        $fields['count_total'] = "sum({$tempField} / COALESCE(rates.rate, 1) * {:RATE})";
                        $time_fields = $this->getTimeFields($time_line, "{$tempField} * ({:RATE} / COALESCE(rates.rate ,1))");
                    } else {
                        $fields['count_total'] = "SUM({$tempField})";
                        $time_fields = $this->getTimeFields($time_line, $tempField);
                    }
                    $fields[$time_target] = $fields['count_total'] ;
                    $time_fields_arr[$time_target] = $time_fields ;
                } elseif (isset($erpReportTargets[$time_target])){
                    //erp库存指标
                    $tempFormatType = $erpReportTargets[$time_target]['format_type'] ?? 0;
                    $erp_function = $datas['is_count'] == 1 ? 'SUM' : 'max';

                    if ($datas['currency_code'] != 'CNY' && $tempFormatType == 4){
                        $fields['count_total'] = "SUM(warehouse_storage.{$time_target} * {:RATE})";
                        $time_fields = $this->getErpReportTimeFields($time_line, "warehouse_storage.{$time_target} * {:RATE}", $erp_function);
                    }else{
                        if ($time_target == 'erp_period_current_stock_rate'){
                            $field1 = "warehouse_storage.erp_period_current_out_cost * 2";
                            $field2 = "(warehouse_storage.erp_period_start_goods_cost_total_begin + warehouse_storage.erp_period_end_goods_cost_total_end)";
                            $fields['count_total'] = "SUM({$field1}) / NULLIF(SUM({$field2}), 0)";
                            $time_fields = $this->getErpReportTimeFields($time_line, $field1, 'SUM', $field2);
                        }else{
                            $fields['count_total'] = "SUM(warehouse_storage.{$time_target})";
                            $time_fields = $this->getErpReportTimeFields($time_line, "warehouse_storage.{$time_target}", $erp_function);
                        }
                    }
                    $fields[$time_target] = $fields['count_total'];
                    $time_fields_arr[$time_target] = $time_fields;
                } else{
                    $return_field = $this->handleNewIndexTimeField($datas,$fields,$time_target,1,$isMysql);
                    if(!empty($return_field['count_total']) && !empty($return_field['molecule'])){
                        $fields['count_total'] = $return_field['count_total'];
                        if (!empty($return_field['denominator'])){
                            $time_fields = $this->getTimeFields($time_line, $return_field['molecule'], $return_field['denominator']);
                        }else{
                            $time_fields = $this->getTimeFields($time_line, $return_field['molecule']);
                        }
                        $fields[$time_target] = $fields['count_total'] ;
                        $time_fields_arr[$time_target] = $time_fields ;
                    }
                }

                continue;
            }
            if ($time_target == 'goods_visitors') {  // 买家访问次数
                $fields['count_total'] = "SUM(report.byorder_user_sessions)";
                $time_fields = $this->getTimeFields($time_line, 'report.byorder_user_sessions');
            } else if ($time_target == 'goods_conversion_rate') { //订单商品数量转化率
                $fields['count_total'] = 'sum( report.byorder_quantity_of_goods_ordered ) * 1.0000 / nullif(sum( report.byorder_user_sessions ) ,0)';
                $time_fields = $this->getTimeFields($time_line, 'report.byorder_quantity_of_goods_ordered', 'report.byorder_user_sessions');
            } else if ($time_target == 'goods_rank') { //大类目rank
                $fields['count_total'] = "min(nullif(report.goods_rank,0))";
                $time_fields = $this->getTimeFields($time_line, 'nullif(report.goods_rank,0)', '', 'MIN');
            } else if ($time_target == 'goods_min_rank') { //小类目rank
                $fields['count_total'] = "min(nullif(report.goods_min_rank,0))";
                $time_fields = $this->getTimeFields($time_line, 'nullif(report.goods_min_rank,0)', '', 'MIN');
            } else if ($time_target == 'goods_views_number') { //页面浏览次数
                $fields['count_total'] = "SUM(report.byorder_number_of_visits)";
                $time_fields = $this->getTimeFields($time_line, 'report.byorder_number_of_visits');
            } else if ($time_target == 'goods_views_rate') { //页面浏览次数百分比 (需要计算)

                if ($datas['is_distinct_channel'] == 1 && ($datas['count_dimension'] == 'sku' or $datas['count_dimension'] == 'asin' or $datas['count_dimension'] == 'parent_asin') && $datas['is_count'] != 1) {
                    if (!empty($totals_view_session_lists)) {
                        $case = "CASE ";
                        foreach ($totals_view_session_lists as $total_views_numbers_list) {
                            $case .= " WHEN max(report.channel_id) = " . $total_views_numbers_list['channel_id'] . " THEN sum( report.byorder_number_of_visits ) / round(" . $total_views_numbers_list['total_views_number'] . ",2) ";
                        }
                        $case .= " ELSE 0 END";
                        $fields['goods_views_rate'] = $case;
                        $time_fields = $this->getTimeFields($time_line, $case);
                    } else {
                        $fields['count_total'] = 0;
                        $time_fields = $this->getTimeFields($time_line, 0);
                    }

                } else {
                    if (!empty($total_views_session_numbers) && intval($total_views_session_numbers['total_views_number']) > 0) {
                        $fields['count_total'] = "sum( report.byorder_number_of_visits ) / round(" . intval($total_views_session_numbers['total_views_number']) . ',2)';
                        $time_fields = $this->getTimeFields($time_line, "  report.byorder_number_of_visits  / round(" . intval($total_views_session_numbers['total_views_number']) . ',2)');
                    } else {
                        $fields['count_total'] = 0;
                        $time_fields = $this->getTimeFields($time_line, 0);
                    }
                }
            } else if ($time_target == 'goods_buyer_visit_rate') { //买家访问次数百分比 （需要计算）
                if ($datas['is_distinct_channel'] == 1 && ($datas['count_dimension'] == 'sku' or $datas['count_dimension'] == 'asin' or $datas['count_dimension'] == 'parent_asin') && $datas['is_count'] != 1) {
                    if (!empty($totals_view_session_lists)) {
                        $case = "CASE ";
                        foreach ($totals_view_session_lists as $total_user_sessions_list) {
                            $case .= " WHEN max(report.channel_id) = " . $total_user_sessions_list['channel_id'] . " THEN sum( report.byorder_user_sessions ) / round(" . $total_user_sessions_list['total_user_sessions'] . ",2)";
                        }
                        $case .= " ELSE 0 END";

                        $fields['count_total'] = $case;
                        $time_fields = $this->getTimeFields($time_line, $case);
                    } else {
                        $fields['count_total'] = 0;
                        $time_fields = $this->getTimeFields($time_line, 0);
                    }
                } else {
                    if (!empty($total_views_session_numbers) && intval($total_views_session_numbers['total_user_sessions']) > 0) {
                        $fields['count_total'] = " sum( report.byorder_user_sessions ) / round(" . intval($total_views_session_numbers['total_user_sessions']) . ",2)";
                        $time_fields = $this->getTimeFields($time_line, " report.byorder_user_sessions  / round(" . intval($total_views_session_numbers['total_user_sessions']) . ",2)");
                    } else {
                        $fields['count_total'] = 0;
                        $time_fields = $this->getTimeFields($time_line, 0);
                    }
                }
            } else if ($time_target == 'goods_buybox_rate') { //购买按钮赢得率
                $fields['count_total'] = " (sum( byorder_buy_button_winning_num )  * 1.0000 / nullif(sum( report.byorder_number_of_visits ) ,0) ) ";
                $time_fields = $this->getTimeFields($time_line, "byorder_buy_button_winning_num * 1.0000", "report.byorder_number_of_visits");
            } else if ($time_target == 'sale_sales_volume') { //销售量
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['count_total'] = " sum( report.byorder_sales_volume  +  report.byorder_group_id) ";
                    $time_fields = $this->getTimeFields($time_line, "report.byorder_sales_volume  +  report.byorder_group_id");
                } elseif ($datas['sale_datas_origin'] == '2') {
                    $fields['count_total'] = " sum( report.report_sales_volume  +  report.byorder_group_id ) ";
                    $time_fields = $this->getTimeFields($time_line, "report.report_sales_volume  +  report.report_group_id");
                }
            } else if ($time_target == 'sale_many_channel_sales_volume') { //多渠道数量
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['count_total'] = "sum( report.byorder_group_id )";
                    $time_fields = $this->getTimeFields($time_line, "report.byorder_group_id");
                } elseif ($datas['sale_datas_origin'] == '2') {
                    $fields['count_total'] = "sum( report.report_group_id )";
                    $time_fields = $this->getTimeFields($time_line, "report.report_group_id");
                }
            } else if ($time_target == 'sale_sales_quota') {  //商品销售额
                if ($datas['sale_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_sales_quota )";
                        $time_fields = $this->getTimeFields($time_line, "report.byorder_sales_quota");
                    } else {
                        $fields['count_total'] = "sum( report.byorder_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, "report.byorder_sales_quota * ({:RATE} / COALESCE(rates.rate ,1))");
                    }
                } elseif ($datas['sale_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_sales_quota )";
                        $time_fields = $this->getTimeFields($time_line, "report.report_sales_quota");
                    } else {
                        $fields['count_total'] = "sum( report.report_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, "report.report_sales_quota * ({:RATE} / COALESCE(rates.rate ,1))");
                    }
                }
            }else if ($time_target == 'sales_evaluation_quote') {  //商品销售额
                if ($datas['sale_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorderitem_reserved_field72 )";
                        $time_fields = $this->getTimeFields($time_line, "report.byorderitem_reserved_field72");
                    } else {
                        $fields['count_total'] = "sum( report.byorderitem_reserved_field72 * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, "report.byorderitem_reserved_field72 * ({:RATE} / COALESCE(rates.rate ,1))");
                    }
                } elseif ($datas['sale_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_reserved_field72 )";
                        $time_fields = $this->getTimeFields($time_line, "report.report_reserved_field72");
                    } else {
                        $fields['count_total'] = "sum( report.report_reserved_field72 * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, "report.report_reserved_field72 * ({:RATE} / COALESCE(rates.rate ,1))");
                    }
                }
            } else if ($time_target == 'sale_return_goods_number') {  //退款量
                if ($datas['refund_datas_origin'] == '1') {
                    $fields['count_total'] = "sum(report.byorder_refund_num )";
                    $time_fields = $this->getTimeFields($time_line, "report.byorder_refund_num");
                } elseif ($datas['refund_datas_origin'] == '2') {
                    $fields['count_total'] = "sum(report.report_refund_num )";
                    $time_fields = $this->getTimeFields($time_line, "report.report_refund_num");
                }
            } else if ($time_target == 'sale_refund') {  //退款
                if ($datas['refund_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( 0 - report.byorder_refund )";
                        $time_fields = $this->getTimeFields($time_line, "( 0 - report.byorder_refund )");
                    } else {
                        $fields['count_total'] = "sum( ( 0 - report.byorder_refund) * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($time_line, "( 0 - report.byorder_refund ) * ({:RATE} / COALESCE(rates.rate ,1)) ");
                    }
                } elseif ($datas['refund_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( 0 - report.report_refund )";
                        $time_fields = $this->getTimeFields($time_line, "(0 - report.report_refund) ");
                    } else {
                        $fields['count_total'] = "sum( (0 - report.report_refund) * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($time_line, " (0 - report.report_refund) * ({:RATE} / COALESCE(rates.rate ,1)) ");
                    }
                }
            } else if ($time_target == 'sale_refund_rate') {  //退款率
                if ($datas['sale_datas_origin'] == '1') {
                    if ($datas['refund_datas_origin'] == '1') {
                        $fields['count_total'] = "sum(report.byorder_refund_num) * 1.0000 / nullif(SUM((report.byorder_sales_volume + report.byorder_group_id)),0)";
                        $time_fields = $this->getTimeFields($time_line, "report.byorder_refund_num * 1.0000", "(report.byorder_sales_volume+ report.byorder_group_id)");
                    } elseif ($datas['refund_datas_origin'] == '2') {
                        $fields['count_total'] = "sum(report.report_refund_num) * 1.0000 / nullif(SUM((report.byorder_sales_volume+ report.byorder_group_id)),0)";
                        $time_fields = $this->getTimeFields($time_line, "report.report_refund_num * 1.0000 ", "(report.byorder_sales_volume+ report.byorder_group_id)");
                    }
                } else {
                    if ($datas['refund_datas_origin'] == '1') {
                        $fields['count_total'] = "sum(report.byorder_refund_num) * 1.0000  / nullif(SUM((report.report_sales_volume+ report.report_group_id)),0)";
                        $time_fields = $this->getTimeFields($time_line, "report.byorder_refund_num * 1.0000 ", "(report.report_sales_volume+ report.report_group_id)");
                    } elseif ($datas['refund_datas_origin'] == '2') {
                        $fields['count_total'] = "sum(report.report_refund_num) * 1.0000 / nullif(SUM((report.report_sales_volume+ report.report_group_id)),0)";
                        $time_fields = $this->getTimeFields($time_line, "report.report_refund_num * 1.0000 ", "(report.report_sales_volume+ report.report_group_id)");
                    }
                }
            } else if ($time_target == 'promote_discount') {  //promote折扣
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "SUM(report.byorder_promote_discount)";
                        $time_fields = $this->getTimeFields($time_line, "report.byorder_promote_discount");
                    } else {
                        $fields['count_total'] = "SUM(report.byorder_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, "report.byorder_promote_discount * ({:RATE} / COALESCE(rates.rate ,1))");
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "SUM(report.report_promote_discount)";
                        $time_fields = $this->getTimeFields($time_line, "report.report_promote_discount");
                    } else {
                        $fields['count_total'] = "SUM(report.report_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, "report.report_promote_discount * ({:RATE} / COALESCE(rates.rate ,1))");
                    }
                }
            } else if ($time_target == 'promote_refund_discount') {  //退款返还promote折扣
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "SUM(report.byorder_refund_promote_discount)";
                        $time_fields = $this->getTimeFields($time_line, "report.report_refund_promote_discount");
                    } else {
                        $fields['count_total'] = "SUM(report.byorder_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, "report.byorder_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) ");
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "SUM(report.report_refund_promote_discount)";
                        $time_fields = $this->getTimeFields($time_line, "report.report_refund_promote_discount");
                    } else {
                        $fields['count_total'] = "SUM(report.report_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, "report.report_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1))");
                    }
                }
            } else if ($time_target == 'cost_profit_profit') {  //毛利润
                //商品利润聚合数据只聚合财务维度 。 如果销售额或退款维度与财务不一致，需要转换修复

                $repair_data = $this->tax_field;
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['sale_datas_origin'] == '2') {
                        $repair_data .= " + report.report_sales_quota - report.byorder_sales_quota  ";
                    }
                    if ($datas['refund_datas_origin'] == '2') {
                        $repair_data .= " + report.byorder_refund - report.report_refund ";
                    }

                    if ($datas['currency_code'] == 'ORIGIN') {
                        if ($datas['cost_count_type'] == '1') {
                            if (empty($repair_data)) {
                                $fields['count_total'] = 'SUM(report.byorder_goods_profit + report.byorder_purchasing_cost + report.byorder_logistics_head_course)';
                                $time_fields = $this->getTimeFields($time_line, ' report.byorder_goods_profit + report.byorder_purchasing_cost + report.byorder_logistics_head_course');
                            } else {
                                $fields['count_total'] = "SUM(report.byorder_goods_profit + report.byorder_purchasing_cost + report.byorder_logistics_head_course  {$repair_data} )";
                                $time_fields = $this->getTimeFields($time_line, " report.byorder_goods_profit + report.byorder_purchasing_cost + report.byorder_logistics_head_course  {$repair_data} ");
                            }
                        } else {
                            if (empty($repair_data)) {
                                $fields['count_total'] = 'SUM(  report.first_purchasing_cost + report.first_logistics_head_course  + report.byorder_goods_profit )';
                                $time_fields = $this->getTimeFields($time_line, ' report.first_purchasing_cost + report.first_logistics_head_course  + report.byorder_goods_profit ');
                            } else {
                                $fields['count_total'] = "SUM(  report.first_purchasing_cost + report.first_logistics_head_course  + report.byorder_goods_profit  {$repair_data} )";
                                $time_fields = $this->getTimeFields($time_line, " report.first_purchasing_cost + report.first_logistics_head_course  + report.byorder_goods_profit  {$repair_data}");
                            }
                        }
                    } else {
                        if ($datas['cost_count_type'] == '1') {
                            if (empty($repair_data)) {
                                $fields['count_total'] = 'SUM(report.byorder_goods_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) )';
                                $time_fields = $this->getTimeFields($time_line, ' report.byorder_goods_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))');
                            } else {
                                $fields['count_total'] = 'SUM( (report.byorder_goods_profit  ' . $repair_data . ') * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))    )';
                                $time_fields = $this->getTimeFields($time_line, ' (report.byorder_goods_profit  ' . $repair_data . ') * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))');
                            }
                        } else {
                            if (empty($repair_data)) {
                                $fields['count_total'] = 'SUM(  report.first_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_goods_profit * ({:RATE} / COALESCE(rates.rate ,1)) )';
                                $time_fields = $this->getTimeFields($time_line, ' report.first_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_goods_profit * ({:RATE} / COALESCE(rates.rate ,1))');
                            } else {
                                $fields['count_total'] = 'SUM(  (report.first_purchasing_cost  ' . $repair_data . ') * ({:RATE} / COALESCE(rates.rate ,1)) + report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_goods_profit * ({:RATE} / COALESCE(rates.rate ,1)) )';
                                $time_fields = $this->getTimeFields($time_line, ' (report.first_purchasing_cost ' . $repair_data . ') * ({:RATE} / COALESCE(rates.rate ,1)) + report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_goods_profit * ({:RATE} / COALESCE(rates.rate ,1))');
                            }
                        }

                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    $estimated_monthly_storage_fee_field = "";
                    if ($datas['is_month_table'] == 1){
                        $estimated_monthly_storage_fee_field = " - report.report_estimated_monthly_storage_fee + report.monthly_sku_estimated_monthly_storage_fee";
                    }
                    if ($datas['sale_datas_origin'] == '1') {
                        $repair_data .= " + report.byorder_sales_quota - report.report_sales_quota  ";
                    }
                    if ($datas['refund_datas_origin'] == '1') {
                        $repair_data .= " + report.report_refund - report.byorder_refund ";
                    }
                    if ($datas['currency_code'] == 'ORIGIN') {
                        if ($datas['cost_count_type'] == '1') {
                            if (empty($repair_data)) {
                                $fields['count_total'] = 'SUM((report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost) + report.report_purchasing_cost + report.report_logistics_head_course'.$estimated_monthly_storage_fee_field.')';
                                $time_fields = $this->getTimeFields($time_line, ' (report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost) + report.report_purchasing_cost + report.report_logistics_head_course'.$estimated_monthly_storage_fee_field);
                            } else {
                                $fields['count_total'] = "SUM((report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost) + report.report_purchasing_cost + report.report_logistics_head_course  {$repair_data} {$estimated_monthly_storage_fee_field})";
                                $time_fields = $this->getTimeFields($time_line, " (report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost) + report.report_purchasing_cost + report.report_logistics_head_course  {$repair_data} {$estimated_monthly_storage_fee_field}");
                            }

                        } else {
                            if (empty($repair_data)) {
                                $fields['count_total'] = 'SUM( report.first_purchasing_cost + report.first_logistics_head_course +  (report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost)'.$estimated_monthly_storage_fee_field.')';
                                $time_fields = $this->getTimeFields($time_line, '(report.first_purchasing_cost + report.first_logistics_head_course) +  (report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost)'.$estimated_monthly_storage_fee_field);
                            } else {
                                $fields['count_total'] = "SUM( report.first_purchasing_cost + report.first_logistics_head_course +  (report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost)  {$repair_data} {$estimated_monthly_storage_fee_field})";
                                $time_fields = $this->getTimeFields($time_line, "(report.first_purchasing_cost + report.first_logistics_head_course) +  (report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost) {$repair_data} {$estimated_monthly_storage_fee_field}");
                            }
                        }
                    } else {
                        if ($datas['cost_count_type'] == '1') {
                            if (empty($repair_data)) {
                                $fields['count_total'] = 'SUM(((report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost)'.$estimated_monthly_storage_fee_field.') * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)))';
                                $time_fields = $this->getTimeFields($time_line, ' ((report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost)'.$estimated_monthly_storage_fee_field.') * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))');
                            } else {
                                $fields['count_total'] = 'SUM(((report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost)  ' . $repair_data .$estimated_monthly_storage_fee_field. ') * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)))';
                                $time_fields = $this->getTimeFields($time_line, ' ((report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost)  ' . $repair_data.$estimated_monthly_storage_fee_field . ') * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))');
                            }
                        } else {
                            if (empty($repair_data)) {
                                $fields['count_total'] = 'SUM(  ( report.first_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) ) + ((report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost)'.$estimated_monthly_storage_fee_field.') * ({:RATE} / COALESCE(rates.rate ,1)) )';
                                $time_fields = $this->getTimeFields($time_line, ' ( report.first_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) ) + ((report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost)'.$estimated_monthly_storage_fee_field.') * ({:RATE} / COALESCE(rates.rate ,1)) ');
                            } else {
                                $fields['count_total'] = 'SUM(  ( (report.first_purchasing_cost  ' . $repair_data.$estimated_monthly_storage_fee_field . ') * ({:RATE} / COALESCE(rates.rate ,1)) + report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) ) + (report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost) * ({:RATE} / COALESCE(rates.rate ,1)) )';
                                $time_fields = $this->getTimeFields($time_line, ' ( (report.first_purchasing_cost ' . $repair_data.$estimated_monthly_storage_fee_field . ') * ({:RATE} / COALESCE(rates.rate ,1)) + report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) ) + (report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost) * ({:RATE} / COALESCE(rates.rate ,1)) ');
                            }

                        }

                    }
                }
            } else if ($time_target == 'cost_profit_profit_rate') {  //毛利率
                $repair_data = $this->tax_field ;
                $rate_fields = $datas['currency_code'] == 'ORIGIN' ? " * 1.0000" : " * ({:RATE} / COALESCE(rates.rate ,1))";
                $estimated_monthly_storage_fee_field = "";
                if ($datas['is_month_table'] == 1){
                    $estimated_monthly_storage_fee_field = " - report.report_estimated_monthly_storage_fee + report.monthly_sku_estimated_monthly_storage_fee";
                }
                if ($datas['sale_datas_origin'] == 1) {

                    if ($datas['finance_datas_origin'] == '1') {
                        if($datas['sale_datas_origin'] == '2'){
                            $repair_data.= " +report.report_sales_quota - report.byorder_sales_quota  " ;
                        }
                        if($datas['refund_datas_origin'] == '2'){
                            $repair_data.= empty($repair_data) ? "  +report.byorder_refund - report.report_refund " : " + report.byorder_refund - report.report_refund " ;
                        }
                        if ($datas['cost_count_type'] == '1') {
                            $fields['count_total'] = '(SUM((report.byorder_goods_profit + report.byorder_purchasing_cost + report.byorder_logistics_head_course'.$repair_data.") {$rate_fields}))  * 1.0000 / nullif(sum(report.byorder_sales_quota {$rate_fields}),0)";
                            $time_fields = $this->getTimeFields($time_line, ' (report.byorder_goods_profit + report.byorder_purchasing_cost + report.byorder_logistics_head_course'.$repair_data . ") {$rate_fields}", 'report.byorder_sales_quota' . $rate_fields);
                        } else {
                            $fields['count_total'] = '(SUM( ( (report.first_purchasing_cost + report.first_logistics_head_course) +  report.byorder_goods_profit'.$repair_data.") {$rate_fields}))  * 1.0000 / nullif(sum(report.byorder_sales_quota {$rate_fields}),0)";
                            $time_fields = $this->getTimeFields($time_line, '((report.first_purchasing_cost + report.first_logistics_head_course) +  report.byorder_goods_profit'.$repair_data . ") {$rate_fields}", 'report.byorder_sales_quota' . $rate_fields);
                        }
                    } elseif ($datas['finance_datas_origin'] == '2') {

                        if($datas['sale_datas_origin'] == '1'){
                            $repair_data.= " +report.byorder_sales_quota - report.report_sales_quota  " ;
                        }
                        if($datas['refund_datas_origin'] == '1'){
                            $repair_data.= empty($repair_data) ? "  +report.report_refund - report.byorder_refund " : " + report.report_refund - report.byorder_refund" ;
                        }
                        if ($datas['cost_count_type'] == '1') {
                            $fields['count_total'] = '(SUM(((report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost) + report.report_purchasing_cost + report.report_logistics_head_course'.$repair_data.$estimated_monthly_storage_fee_field.") {$rate_fields}))  * 1.0000 / nullif(sum(report.byorder_sales_quota {$rate_fields}),0)";
                            $time_fields = $this->getTimeFields($time_line, ' ((report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost) + report.report_purchasing_cost + report.report_logistics_head_course'.$repair_data .$estimated_monthly_storage_fee_field. ") {$rate_fields}", 'report.byorder_sales_quota' . $rate_fields);
                        } else {
                            $fields['count_total'] = '(SUM( (( report.first_purchasing_cost + report.first_logistics_head_course ) + (report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost) '.$repair_data.$estimated_monthly_storage_fee_field.") {$rate_fields}))  * 1.0000 / nullif(sum(report.byorder_sales_quota {$rate_fields}),0)";
                            $time_fields = $this->getTimeFields($time_line, ' (( report.first_purchasing_cost + report.first_logistics_head_course ) + (report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost)'.$repair_data . ") {$rate_fields}{$estimated_monthly_storage_fee_field}", 'report.byorder_sales_quota' . $rate_fields);
                        }
                    }
                } else {
                    if ($datas['finance_datas_origin'] == '1') {
                        if ($datas['cost_count_type'] == '1') {
                            if($datas['sale_datas_origin'] == '2'){
                                $repair_data.= " +report.report_sales_quota - report.byorder_sales_quota  " ;
                            }
                            if($datas['refund_datas_origin'] == '2'){
                                $repair_data.= empty($repair_data) ? "  +report.byorder_refund - report.report_refund " : " + report.byorder_refund - report.report_refund " ;
                            }
                            $fields['count_total'] = '(SUM((report.byorder_goods_profit + report.byorder_purchasing_cost + report.byorder_logistics_head_course'.$repair_data.") {$rate_fields}))  * 1.0000 / nullif(sum(report.report_sales_quota {$rate_fields}),0)";
                            $time_fields = $this->getTimeFields($time_line, '( report.byorder_goods_profit + report.byorder_purchasing_cost + report.byorder_logistics_head_course'.$repair_data . ") {$rate_fields}", 'report.report_sales_quota' . $rate_fields);
                        } else {
                            $fields['count_total'] = '(SUM( ((report.first_purchasing_cost + report.first_logistics_head_course) +  report.byorder_goods_profit '.$repair_data.") {$rate_fields}))  * 1.0000 / nullif(sum(report.report_sales_quota {$rate_fields}),0)";
                            $time_fields = $this->getTimeFields($time_line, '( (report.first_purchasing_cost + report.first_logistics_head_course) +  report.byorder_goods_profit'.$repair_data . ") {$rate_fields}", 'report.report_sales_quota' . $rate_fields);
                        }
                    } elseif ($datas['finance_datas_origin'] == '2') {
                        if($datas['sale_datas_origin'] == '1'){
                            $repair_data.= " +report.byorder_sales_quota - report.report_sales_quota  " ;
                        }
                        if($datas['refund_datas_origin'] == '1'){
                            $repair_data.= empty($repair_data) ? "  +report.report_refund - report.byorder_refund " : " + report.report_refund - report.byorder_refund" ;
                        }
                        if ($datas['cost_count_type'] == '1') {
                            $fields['count_total'] = '(SUM(((report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost) + report.report_purchasing_cost + report.report_logistics_head_course'.$repair_data.$estimated_monthly_storage_fee_field.") {$rate_fields}))  * 1.0000 / nullif(sum(report.report_sales_quota {$rate_fields}),0)";
                            $time_fields = $this->getTimeFields($time_line, ' ((report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost) + report.report_purchasing_cost + report.report_logistics_head_course'.$repair_data.$estimated_monthly_storage_fee_field . ") {$rate_fields}", 'report.report_sales_quota' . $rate_fields);
                        } else {
                            $fields['count_total'] = '(SUM( (( report.first_purchasing_cost + report.first_logistics_head_course) +  (report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost) '.$repair_data.$estimated_monthly_storage_fee_field.") {$rate_fields})) * 1.0000 / nullif(sum(report.report_sales_quota {$rate_fields}),0)";
                            $time_fields = $this->getTimeFields($time_line, ' (( report.first_purchasing_cost + report.first_logistics_head_course) +  (report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost)'.$repair_data.$estimated_monthly_storage_fee_field . ") {$rate_fields}", 'report.report_sales_quota' . $rate_fields);
                        }
                    }
                }
            } else if ($time_target == 'amazon_fee') {  //亚马逊费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(report.byorder_goods_amazon_fee'.$this->tax_field.')';
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_goods_amazon_fee');
                    } else {
                        $fields['count_total'] = 'SUM((report.byorder_goods_amazon_fee '.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1)) )';
                        $time_fields = $this->getTimeFields($time_line, '(report.byorder_goods_amazon_fee'.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1)) ');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    $estimated_monthly_storage_fee_field = "";
                    if ($datas['is_month_table'] == 1){
                        $estimated_monthly_storage_fee_field = " - report.report_estimated_monthly_storage_fee + report.monthly_sku_estimated_monthly_storage_fee";
                    }
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(report.report_goods_amazon_fee'.$estimated_monthly_storage_fee_field.$this->tax_field.')';
                        $time_fields = $this->getTimeFields($time_line, 'report.report_goods_amazon_fee'.$estimated_monthly_storage_fee_field.$this->tax_field);
                    } else {
                        $fields['count_total'] = 'SUM((report.report_goods_amazon_fee'.$estimated_monthly_storage_fee_field.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1)) )';
                        $time_fields = $this->getTimeFields($time_line, '(report.report_goods_amazon_fee'.$estimated_monthly_storage_fee_field.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1)) ');
                    }
                }
            } else if ($time_target == 'amazon_sales_commission') {  //亚马逊销售佣金
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_platform_sales_commission + report.byorder_reserved_field21 ) ";
                        $time_fields = $this->getTimeFields($time_line, '(report.byorder_platform_sales_commission + report.byorder_reserved_field21)');
                    } else {
                        $fields['count_total'] = "sum( (report.byorder_platform_sales_commission+report.byorder_reserved_field21) * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($time_line, '(report.byorder_platform_sales_commission+report.byorder_reserved_field21) * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_platform_sales_commission +report.report_reserved_field21  ) ";
                        $time_fields = $this->getTimeFields($time_line, '(report.report_platform_sales_commission +report.report_reserved_field21)');
                    } else {
                        $fields['count_total'] = "sum( (report.report_platform_sales_commission +report.report_reserved_field21) * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($time_line, '(report.report_platform_sales_commission+report.report_reserved_field21) * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'amazon_fba_delivery_fee') {  //FBA代发货费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_fba_generation_delivery_cost + report.byorder_fbaperorderfulfillmentfee + report.byorder_fbaweightbasedfee - report.byorder_profit)";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_fba_generation_delivery_cost + report.byorder_fbaperorderfulfillmentfee + report.byorder_fbaweightbasedfee - report.byorder_profit');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_fba_generation_delivery_cost * ({:RATE} / COALESCE(rates.rate ,1))+ report.byorder_fbaperorderfulfillmentfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbaweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)) -report.byorder_profit * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_fba_generation_delivery_cost * ({:RATE} / COALESCE(rates.rate ,1))+ report.byorder_fbaperorderfulfillmentfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbaweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)) -report.byorder_profit * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_fba_generation_delivery_cost + report.report_fbaperorderfulfillmentfee + report.report_fbaweightbasedfee - report.report_profit)";
                        $time_fields = $this->getTimeFields($time_line, ' report.report_fba_generation_delivery_cost + report.report_fbaperorderfulfillmentfee + report.report_fbaweightbasedfee - report.report_profit');
                    } else {
                        $fields['count_total'] = "sum( report.report_fba_generation_delivery_cost * ({:RATE} / COALESCE(rates.rate ,1))+ report.report_fbaperorderfulfillmentfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbaweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)) - report.report_profit * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, 'report.report_fba_generation_delivery_cost * ({:RATE} / COALESCE(rates.rate ,1))+ report.report_fbaperorderfulfillmentfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbaweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)) - report.report_profit * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'amazon_multi_channel_delivery_fee') {  //多渠道配送费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_profit ) ";
                        $time_fields = $this->getTimeFields($time_line, ' report.byorder_profit');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_profit * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_profit * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_profit ) ";
                        $time_fields = $this->getTimeFields($time_line, ' report.report_profit');
                    } else {
                        $fields['count_total'] = "sum( report.report_profit * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($time_line, 'report.report_profit * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'amazon_settlement_fee') {  //结算费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_order_variableclosingfee + report.byorder_fixedclosingfee + report.byorder_refund_variableclosingfee )";
                        $time_fields = $this->getTimeFields($time_line, ' report.byorder_order_variableclosingfee + report.byorder_fixedclosingfee + report.byorder_refund_variableclosingfee');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_order_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fixedclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_refund_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_order_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fixedclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_refund_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) ');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_order_variableclosingfee + report.report_fixedclosingfee + report.report_refund_variableclosingfee )";
                        $time_fields = $this->getTimeFields($time_line, ' report.report_order_variableclosingfee + report.report_fixedclosingfee + report.report_refund_variableclosingfee');
                    } else {
                        $fields['count_total'] = "sum( report.report_order_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fixedclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_refund_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, ' report.report_order_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fixedclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_refund_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'amazon_other_fee') {  //其他亚马逊费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_goods_amazon_other_fee{$this->tax_field}) ";
                        $time_fields = $this->getTimeFields($time_line, ' report.byorder_goods_amazon_other_fee'.$this->tax_field);
                    } else {
                        $fields['count_total'] = "sum( (report.byorder_goods_amazon_other_fee{$this->tax_field})  * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($time_line, ' (report.byorder_goods_amazon_other_fee'.$this->tax_field.')  * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_goods_amazon_other_fee{$this->tax_field}) ";
                        $time_fields = $this->getTimeFields($time_line, ' (report.report_goods_amazon_other_fee'.$this->tax_field.')');
                    } else {
                        $fields['count_total'] = "sum( (report.report_goods_amazon_other_fee {$this->tax_field}) * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($time_line, ' (report.report_goods_amazon_other_fee'.$this->tax_field.')  * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'amazon_return_shipping_fee') {  //返还运费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_returnshipping )";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_returnshipping ');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_returnshipping * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, ' report.byorder_returnshipping * ({:RATE} / COALESCE(rates.rate ,1)) ');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_returnshipping )";
                        $time_fields = $this->getTimeFields($time_line, 'report.report_returnshipping ');
                    } else {
                        $fields['count_total'] = "sum( report.report_returnshipping * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, ' report.report_returnshipping * ({:RATE} / COALESCE(rates.rate ,1)) ');
                    }
                }
            } else if ($time_target == 'amazon_return_sale_commission') {  //返还亚马逊销售佣金
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_return_and_return_sales_commission )";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_return_and_return_sales_commission');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_return_and_return_sales_commission * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, ' report.byorder_return_and_return_sales_commission * ({:RATE} / COALESCE(rates.rate ,1)) ');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_return_and_return_sales_commission )";
                        $time_fields = $this->getTimeFields($time_line, 'report.report_return_and_return_sales_commission');
                    } else {
                        $fields['count_total'] = "sum( report.report_return_and_return_sales_commission * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, 'report.report_return_and_return_sales_commission * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'amazon_refund_deducted_commission') {  //退款扣除佣金
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_return_and_return_commission )";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_return_and_return_commission');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_return_and_return_commission * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_return_and_return_commission * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_return_and_return_commission )";
                        $time_fields = $this->getTimeFields($time_line, 'report.report_return_and_return_commission');
                    } else {
                        $fields['count_total'] = "sum( report.report_return_and_return_commission * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, 'report.report_return_and_return_commission * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'amazon_fba_return_processing_fee') {  //FBA退货处理费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_fba_refund_treatment_fee + report.byorder_fbacustomerreturnperorderfee+report.byorder_fbacustomerreturnweightbasedfee)";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_fba_refund_treatment_fee + report.byorder_fbacustomerreturnperorderfee+report.byorder_fbacustomerreturnweightbasedfee');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_fba_refund_treatment_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbacustomerreturnperorderfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbacustomerreturnweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)))";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_fba_refund_treatment_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbacustomerreturnperorderfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbacustomerreturnweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_fba_refund_treatment_fee + report.report_fbacustomerreturnperorderfee + report.report_fbacustomerreturnweightbasedfee)";
                        $time_fields = $this->getTimeFields($time_line, 'report.report_fba_refund_treatment_fee + report.report_fbacustomerreturnperorderfee + report.report_fbacustomerreturnweightbasedfee');
                    } else {
                        $fields['count_total'] = "sum( report.report_fba_refund_treatment_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbacustomerreturnperorderfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbacustomerreturnweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)))";
                        $time_fields = $this->getTimeFields($time_line, 'report.report_fba_refund_treatment_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbacustomerreturnperorderfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbacustomerreturnweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'amazon_fba_monthly_storage_fee') {  //FBA月仓储费
                $estimated_monthly_storage_fee_field = "report.report_estimated_monthly_storage_fee";
                if ($datas['is_month_table'] == 1){
                    $estimated_monthly_storage_fee_field = " report.monthly_sku_estimated_monthly_storage_fee";
                }
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_estimated_monthly_storage_fee )";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_estimated_monthly_storage_fee');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_estimated_monthly_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_estimated_monthly_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( {$estimated_monthly_storage_fee_field} )";
                        $time_fields = $this->getTimeFields($time_line, $estimated_monthly_storage_fee_field);
                    } else {
                        $fields['count_total'] = "sum( {$estimated_monthly_storage_fee_field} * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, "{$estimated_monthly_storage_fee_field} * ({:RATE} / COALESCE(rates.rate ,1)) ");
                    }
                }
            } elseif ($time_target == 'amazon_long_term_storage_fee') { //FBA长期仓储费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(report.byorder_long_term_storage_fee)';
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_long_term_storage_fee');
                    } else {
                        $fields['count_total'] = 'SUM(report.byorder_long_term_storage_fee  * ({:RATE} / COALESCE(rates.rate ,1)) )';
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_long_term_storage_fee  * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(report.report_long_term_storage_fee)';
                        $time_fields = $this->getTimeFields($time_line, 'report.report_long_term_storage_fee');
                    } else {
                        $fields['count_total'] = 'SUM(report.report_long_term_storage_fee  * ({:RATE} / COALESCE(rates.rate ,1)) )';
                        $time_fields = $this->getTimeFields($time_line, 'report.report_long_term_storage_fee  * ({:RATE} / COALESCE(rates.rate ,1)) ');
                    }
                }
            } else if ($time_target == 'amazon_fee_rate') {  //亚马逊费用占比
                $rate_fields = $datas['currency_code'] == 'ORIGIN' ? " * 1.0000" : " * ({:RATE} / COALESCE(rates.rate ,1))";
                $estimated_monthly_storage_fee_field = "";
                if ($datas['is_month_table'] == 1){
                    $estimated_monthly_storage_fee_field = " - report.report_estimated_monthly_storage_fee + report.monthly_sku_estimated_monthly_storage_fee";
                }
                if ($datas['sale_datas_origin'] == 1) {
                    if ($datas['finance_datas_origin'] == '1') {
                        $fields['count_total'] = "sum( (report.byorder_goods_amazon_fee {$this->tax_field}) {$rate_fields}) * 1.0000 / nullif(sum( report.byorder_sales_quota {$rate_fields} ),0)";
                        $time_fields = $this->getTimeFields($time_line, '(report.byorder_goods_amazon_fee '.$this->tax_field.')' . $rate_fields, 'report.byorder_sales_quota' . $rate_fields);
                    } else {
                        $fields['count_total'] = "sum( (report.report_goods_amazon_fee{$estimated_monthly_storage_fee_field}{$this->tax_field}) {$rate_fields}  ) * 1.0000 / nullif(sum( report.byorder_sales_quota {$rate_fields} ),0)";
                        $time_fields = $this->getTimeFields($time_line, '(report.report_goods_amazon_fee '.$estimated_monthly_storage_fee_field.$this->tax_field.')' . $rate_fields, 'report.byorder_sales_quota' . $rate_fields);
                    }
                } else {
                    if ($datas['finance_datas_origin'] == '1') {
                        $fields['count_total'] = "sum( (report.byorder_goods_amazon_fee{$this->tax_field}) {$rate_fields} ) * 1.0000 / nullif(sum( report.report_sales_quota {$rate_fields} ),0)";
                        $time_fields = $this->getTimeFields($time_line, '(report.byorder_goods_amazon_fee '.$this->tax_field.')' . $rate_fields, 'report.report_sales_quota' . $rate_fields);
                    } else {
                        $fields['count_total'] = "sum( (report.report_goods_amazon_fee {$estimated_monthly_storage_fee_field} {$this->tax_field}){$rate_fields}  ) * 1.0000 / nullif(sum( report.report_sales_quota {$rate_fields} ),0)";
                        $time_fields = $this->getTimeFields($time_line, '(report.report_goods_amazon_fee '.$estimated_monthly_storage_fee_field .$this->tax_field.')' . $rate_fields, 'report.report_sales_quota' . $rate_fields);
                    }
                }
            } else if ($time_target == 'purchase_logistics_purchase_cost') {  //采购成本
                if ($datas['cost_count_type'] == '1') {
                    if ($datas['finance_datas_origin'] == '1') {
                        if ($datas['currency_code'] == 'ORIGIN') {
                            $fields['count_total'] = " sum( report.byorder_purchasing_cost ) ";
                            $time_fields = $this->getTimeFields($time_line, 'report.byorder_purchasing_cost');
                        } else {
                            $fields['count_total'] = " sum( report.byorder_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                            $time_fields = $this->getTimeFields($time_line, ' report.byorder_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) ');
                        }
                    } else {
                        if ($datas['currency_code'] == 'ORIGIN') {
                            $fields['count_total'] = " sum( report.report_purchasing_cost ) ";
                            $time_fields = $this->getTimeFields($time_line, 'report.report_purchasing_cost');
                        } else {
                            $fields['count_total'] = " sum( report.report_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                            $time_fields = $this->getTimeFields($time_line, ' report.report_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) ');
                        }
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = " sum(  (report.first_purchasing_cost) ) ";
                        $time_fields = $this->getTimeFields($time_line, '(report.first_purchasing_cost)');
                    } else {
                        $fields['count_total'] = " sum( (report.first_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) ) ) ";
                        $time_fields = $this->getTimeFields($time_line, ' (report.first_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1))) ');
                    }
                }

            } else if ($time_target == 'purchase_logistics_logistics_cost') {  // 物流/头程
                if ($datas['cost_count_type'] == '1') {
                    if ($datas['finance_datas_origin'] == '1') {
                        if ($datas['currency_code'] == 'ORIGIN') {
                            $fields['count_total'] = " sum( report.byorder_logistics_head_course ) ";
                            $time_fields = $this->getTimeFields($time_line, ' report.byorder_logistics_head_course');
                        } else {
                            $fields['count_total'] = " sum( report.byorder_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                            $time_fields = $this->getTimeFields($time_line, 'report.byorder_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))');
                        }
                    } else {
                        if ($datas['currency_code'] == 'ORIGIN') {
                            $fields['count_total'] = " sum( report.report_logistics_head_course ) ";
                            $time_fields = $this->getTimeFields($time_line, ' report.report_logistics_head_course');
                        } else {
                            $fields['count_total'] = " sum( report.report_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                            $time_fields = $this->getTimeFields($time_line, 'report.report_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))');
                        }
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = " sum(( report.first_logistics_head_course) ) ";
                        $time_fields = $this->getTimeFields($time_line, ' (report.first_logistics_head_course)');
                    } else {
                        $fields['count_total'] = " sum( (report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) ) ) ";
                        $time_fields = $this->getTimeFields($time_line, '(report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) )');
                    }
                }
            } else if ($time_target == 'purchase_logistics_cost_rate') {  // 成本/物流费用占比
                $rate_fields = $datas['currency_code'] == 'ORIGIN' ? " * 1.0000" : " * ({:RATE} / COALESCE(rates.rate ,1))";
                if ($datas['sale_datas_origin'] == 1) {
                    if ($datas['cost_count_type'] == '1') {
                        if ($datas['finance_datas_origin'] == '1') {
                            $fields['count_total'] = " sum( (report.byorder_logistics_head_course + report.byorder_purchasing_cost) {$rate_fields} ) * 1.0000 / nullif(sum( report.byorder_sales_quota {$rate_fields} ),0)  ";
                            $time_fields = $this->getTimeFields($time_line, ' (report.byorder_logistics_head_course  + report.byorder_purchasing_cost) ' . $rate_fields, 'report.byorder_sales_quota' . $rate_fields);
                        } else {
                            $fields['count_total'] = " sum( report.report_logistics_head_course + report.report_purchasing_cost {$rate_fields} ) * 1.0000 / nullif(sum( report.byorder_sales_quota {$rate_fields} ),0)  ";
                            $time_fields = $this->getTimeFields($time_line, ' (report.report_logistics_head_course + report.report_purchasing_cost)' . $rate_fields, 'report.byorder_sales_quota' . $rate_fields);
                        }
                    } else {
                        $fields['count_total'] = " sum( (report.first_logistics_head_course + report.first_purchasing_cost) {$rate_fields}) * 1.0000 / nullif(sum( report.byorder_sales_quota {$rate_fields} ),0)  ";
                        $time_fields = $this->getTimeFields($time_line, '( report.first_logistics_head_course + report.first_purchasing_cost)' . $rate_fields, 'report.byorder_sales_quota' . $rate_fields);
                    }
                } else {
                    if ($datas['cost_count_type'] == '1') {
                        if ($datas['finance_datas_origin'] == '1') {
                            $fields['count_total'] = " sum( (report.byorder_logistics_head_course + report.byorder_purchasing_cost) {$rate_fields} ) * 1.0000 / nullif(sum( report.report_sales_quota {$rate_fields} ),0)  ";
                            $time_fields = $this->getTimeFields($time_line, ' (report.byorder_logistics_head_course  + report.byorder_purchasing_cost) ' . $rate_fields, 'report.report_sales_quota' . $rate_fields);
                        } else {
                            $fields['count_total'] = " sum( (report.report_logistics_head_course + report.report_purchasing_cost) {$rate_fields} ) * 1.0000 / nullif(sum( report.report_sales_quota {$rate_fields} ),0)  ";
                            $time_fields = $this->getTimeFields($time_line, ' (report.report_logistics_head_course + report.report_purchasing_cost)' . $rate_fields, 'report.report_sales_quota' . $rate_fields);
                        }
                    } else {
                        $fields['count_total'] = " sum( (report.first_logistics_head_course + report.first_purchasing_cost) {$rate_fields}) * 1.0000 / nullif(sum( report.report_sales_quota {$rate_fields} ),0)  ";
                        $time_fields = $this->getTimeFields($time_line, '( report.first_logistics_head_course + report.first_purchasing_cost)' . $rate_fields, 'report.report_sales_quota' . $rate_fields);
                    }
                }
            } else if ($time_target == 'operate_fee') {  //运营费用
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "sum(0 -  report.byorder_reserved_field16 ) ";
                    $time_fields = $this->getTimeFields($time_line, '0 - report.byorder_reserved_field16');
                } else {
                    $fields['count_total'] = "sum((0 -  report.byorder_reserved_field16 )* ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                    $time_fields = $this->getTimeFields($time_line, '  (0 - report.byorder_reserved_field16) * ({:RATE} / COALESCE(rates.rate ,1)) ');
                }
            } else if ($time_target == 'operate_fee_rate') {  //运营费用占比
                $rate_fields = $datas['currency_code'] == 'ORIGIN' ? " * 1.0000" : " * ({:RATE} / COALESCE(rates.rate ,1))";
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['count_total'] = "SUM( (0 - report.byorder_reserved_field16) {$rate_fields} )  * 1.0000 / nullif(SUM(report.byorder_sales_quota {$rate_fields}),0)";
                    $time_fields = $this->getTimeFields($time_line, '(0 - report.byorder_reserved_field16)' . $rate_fields, 'report.byorder_sales_quota' . $rate_fields);
                } else {
                    $fields['count_total'] = "SUM( (0 - report.byorder_reserved_field16) {$rate_fields})  * 1.0000 / nullif(SUM(report.report_sales_quota {$rate_fields}),0)";
                    $time_fields = $this->getTimeFields($time_line, '(0 - report.byorder_reserved_field16)' . $rate_fields, 'report.report_sales_quota' . $rate_fields);
                }
            } else if ($time_target == 'evaluation_fee') {  //测评费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_reserved_field10 ) ";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_reserved_field10');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_reserved_field10 * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($time_line, ' report.byorder_reserved_field10 * ({:RATE} / COALESCE(rates.rate ,1)) ');
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_reserved_field10 ) ";
                        $time_fields = $this->getTimeFields($time_line, 'report.report_reserved_field10');
                    } else {
                        $fields['count_total'] = "sum( report.report_reserved_field10 * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($time_line, ' report.report_reserved_field10 * ({:RATE} / COALESCE(rates.rate ,1)) ');
                    }
                }

            } else if ($time_target == 'evaluation_fee_rate') {  //测评费用占比
                $rate_fields = $datas['currency_code'] == 'ORIGIN' ? " * 1.0000" : " * ({:RATE} / COALESCE(rates.rate ,1))";
                if ($datas['sale_datas_origin'] == '1') {
                    if ($datas['finance_datas_origin'] == '1') {
                        $fields['count_total'] = "SUM(report.byorder_reserved_field10 {$rate_fields})  * 1.0000 / nullif(SUM(report.byorder_sales_quota {$rate_fields}),0)";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_reserved_field10' . $rate_fields, 'report.byorder_sales_quota' . $rate_fields);
                    } else {
                        $fields['count_total'] = "SUM(report.report_reserved_field10 {$rate_fields})  * 1.0000 / nullif(SUM(report.byorder_sales_quota {$rate_fields}),0)";
                        $time_fields = $this->getTimeFields($time_line, 'report.report_reserved_field10' . $rate_fields, 'report.byorder_sales_quota' . $rate_fields);
                    }

                } else {
                    if ($datas['finance_datas_origin'] == '1') {
                        $fields['count_total'] = "SUM(report.byorder_reserved_field10 {$rate_fields})  * 1.0000 / nullif(SUM(report.report_sales_quota {$rate_fields}),0)";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_reserved_field10' . $rate_fields, 'report.report_sales_quota' . $rate_fields);
                    } else {
                        $fields['count_total'] = "SUM(report.report_reserved_field10 {$rate_fields})  * 1.0000 / nullif(SUM(report.report_sales_quota {$rate_fields}),0)";
                        $time_fields = $this->getTimeFields($time_line, 'report.report_reserved_field10' . $rate_fields, 'report.report_sales_quota' . $rate_fields);
                    }

                }
            } else if ($time_target == 'cpc_sp_cost') {  //CPC SP 花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = " sum( report.byorder_cpc_cost  ) ";
                    $time_fields = $this->getTimeFields($time_line, 'report.byorder_cpc_cost');
                } else {
                    $fields['count_total'] = " sum( report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1))  ) ";
                    $time_fields = $this->getTimeFields($time_line, ' report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1))  ');
                }
            } else if ($time_target == 'cpc_sd_cost') {  //CPC SD 花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = " sum( report.byorder_cpc_sd_cost  ) ";
                    $time_fields = $this->getTimeFields($time_line, 'report.byorder_cpc_sd_cost');
                } else {
                    $fields['count_total'] = " sum( report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1))  ) ";
                    $time_fields = $this->getTimeFields($time_line, ' report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1))  ');
                }
            } else if ($time_target == 'cpc_cost') {  //CPC花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = " sum( report.byorder_cpc_cost + report.byorder_cpc_sd_cost ) ";
                    $time_fields = $this->getTimeFields($time_line, 'report.byorder_cpc_cost + report.byorder_cpc_sd_cost ');
                } else {
                    $fields['count_total'] = " sum( report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                    $time_fields = $this->getTimeFields($time_line, ' report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1)) ');
                }
            } else if ($time_target == 'cpc_cost_rate') {  //CPC花费占比
                $rate_fields = $datas['currency_code'] == 'ORIGIN' ? " * 1.0000" : " * ({:RATE} / COALESCE(rates.rate ,1))";
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['count_total'] = "SUM( (report.byorder_cpc_cost + report.byorder_cpc_sd_cost) {$rate_fields})  * 1.0000 / nullif(SUM(report.byorder_sales_quota {$rate_fields}),0)";
                    $time_fields = $this->getTimeFields($time_line, ' (report.byorder_cpc_cost + report.byorder_cpc_sd_cost) ' . $rate_fields, 'report.byorder_sales_quota' . $rate_fields);
                } else {
                    $fields['count_total'] = "SUM( (report.byorder_cpc_cost + report.byorder_cpc_sd_cost) {$rate_fields} )  * 1.0000 / nullif(SUM(report.report_sales_quota {$rate_fields}),0)";
                    $time_fields = $this->getTimeFields($time_line, ' (report.byorder_cpc_cost + report.byorder_cpc_sd_cost)' . $rate_fields, 'report.report_sales_quota' . $rate_fields);
                }
            } else if ($time_target == 'cpc_exposure') {  //CPC曝光量
                $fields['count_total'] = "sum( report.byorder_reserved_field1 + report.byorder_reserved_field2 )";
                $time_fields = $this->getTimeFields($time_line, 'report.byorder_reserved_field1 + report.byorder_reserved_field2');
            } else if ($time_target == 'cpc_click_number') {  //CPC点击次数
                $fields['count_total'] = "sum( report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks )";
                $time_fields = $this->getTimeFields($time_line, 'report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks');
            } else if ($time_target == 'cpc_click_rate') {  //CPC点击率
                $fields['count_total'] = "(SUM( report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks)) * 1.0000 / nullif( SUM(report.byorder_reserved_field1 + report.byorder_reserved_field2), 0 ) ";
                $time_fields = $this->getTimeFields($time_line, 'report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks', 'report.byorder_reserved_field1 + report.byorder_reserved_field2');
            } else if ($time_target == 'cpc_order_number') {  //CPC订单数
                $fields['count_total'] = 'sum( report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" ) ';
                $time_fields = $this->getTimeFields($time_line, 'report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d"');
            } else if ($time_target == 'cpc_order_rate') {  //cpc订单占比
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['count_total'] = 'sum( report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" ) * 1.0000 / nullif(sum( report.byorder_sales_volume +report.byorder_group_id  ) ,0) ';
                    $time_fields = $this->getTimeFields($time_line, 'report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d"', '(report.byorder_sales_volume + report.byorder_group_id)');
                } elseif ($datas['sale_datas_origin'] == '2') {
                    $fields['count_total'] = 'sum( report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" ) * 1.0000 / nullif(sum( report.report_sales_volume + report.report_group_id ) ,0)';
                    $time_fields = $this->getTimeFields($time_line, 'report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d"', '(report.report_sales_volume + report.report_group_id)');
                }
            } else if ($time_target == 'cpc_click_conversion_rate') {  //cpc点击转化率
                $fields['count_total'] = '(sum( report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" ))  * 1.0000 / nullif (SUM(report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks) , 0 )';
                $time_fields = $this->getTimeFields($time_line, 'report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d"', 'report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks');
            } else if ($time_target == 'cpc_turnover') {  //CPC成交额
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'sum( report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d"  )';
                    $time_fields = $this->getTimeFields($time_line, 'report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d"');
                } else {
                    $fields['count_total'] = 'sum( report."byorder_sp_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1)) + report."byorder_sd_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1))  )';
                    $time_fields = $this->getTimeFields($time_line, 'report."byorder_sp_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1)) + report."byorder_sd_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1)) ');
                }
            } else if ($time_target == 'cpc_turnover_rate') {  //CPC成交额占比
                $rate_fields = $datas['currency_code'] == 'ORIGIN' ? " * 1.0000" : " * ({:RATE} / COALESCE(rates.rate ,1))";
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['count_total'] = 'sum( (report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d")'. $rate_fields .") * 1.0000 / nullif( SUM(report.byorder_sales_quota {$rate_fields}),0)";
                    $time_fields = $this->getTimeFields($time_line, ' (report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d")' . $rate_fields, 'report.byorder_sales_quota' . $rate_fields);
                } else {
                    $fields['count_total'] = 'sum( (report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d")' . $rate_fields . ") * 1.0000 / nullif( SUM(report.report_sales_quota {$rate_fields}),0)";
                    $time_fields = $this->getTimeFields($time_line, ' (report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d")' . $rate_fields, 'report.report_sales_quota' . $rate_fields);
                }
            } else if ($time_target == 'cpc_avg_click_cost') {  //CPC平均点击花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'sum( report.byorder_cpc_cost + report.byorder_cpc_sd_cost ) * 1.0000 / nullif(sum( report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks ),0) ';
                    $time_fields = $this->getTimeFields($time_line, 'report.byorder_cpc_cost + report.byorder_cpc_sd_cost', 'report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks');
                } else {
                    $fields['count_total'] = 'sum( report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1)) ) * 1.0000 / nullif(sum( report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks ),0) ';
                    $time_fields = $this->getTimeFields($time_line, 'report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1))', 'report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks');
                }

            } else if ($time_target == 'cpc_acos') {  // ACOS
                $fields['count_total'] = 'SUM( report.byorder_cpc_cost + report.byorder_cpc_sd_cost ) * 1.0000 / nullif( sum( report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d"  ) , 0 ) ';
                $time_fields = $this->getTimeFields($time_line, 'report.byorder_cpc_cost + report.byorder_cpc_sd_cost', 'report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d" ');
            } else if ($time_target == 'cpc_direct_sales_volume') {  //CPC直接销量
                $fields['count_total'] = 'sum( report."byorder_sd_attributedConversions7dSameSKU" + report."byorder_sp_attributedConversions7dSameSKU" )';
                $time_fields = $this->getTimeFields($time_line, ' report."byorder_sd_attributedConversions7dSameSKU" + report."byorder_sp_attributedConversions7dSameSKU"');
            } else if ($time_target == 'cpc_direct_sales_quota') {  //CPC直接销售额
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'sum( report."byorder_sd_attributedSales7dSameSKU" + report."byorder_sp_attributedSales7dSameSKU" )';
                    $time_fields = $this->getTimeFields($time_line, '  report."byorder_sd_attributedSales7dSameSKU" + report."byorder_sp_attributedSales7dSameSKU"');
                } else {
                    $fields['count_total'] = 'sum( report."byorder_sd_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1))  + report."byorder_sp_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1))  )';
                    $time_fields = $this->getTimeFields($time_line, ' report."byorder_sd_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1))  + report."byorder_sp_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1)) ');
                }
            } else if ($time_target == 'cpc_direct_sales_volume_rate') {  // CPC直接销量占比
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['count_total'] = 'sum( report."byorder_sd_attributedConversions7dSameSKU" + report."byorder_sp_attributedConversions7dSameSKU" )  * 1.0000 / nullif(sum( report.byorder_sales_volume ) ,0)';
                    $time_fields = $this->getTimeFields($time_line, ' report."byorder_sd_attributedConversions7dSameSKU" + report."byorder_sp_attributedConversions7dSameSKU"', 'report.byorder_sales_volume');
                } elseif ($datas['sale_datas_origin'] == '2') {
                    $fields['count_total'] = 'sum( report."byorder_sd_attributedConversions7dSameSKU" + report."byorder_sp_attributedConversions7dSameSKU" )  * 1.0000 / nullif(sum( report.report_sales_volume ) ,0)';
                    $time_fields = $this->getTimeFields($time_line, ' report."byorder_sd_attributedConversions7dSameSKU" + report."byorder_sp_attributedConversions7dSameSKU"', 'report.report_sales_volume');
                }
            } else if ($time_target == 'cpc_indirect_sales_volume') {  //CPC间接销量
                $fields['count_total'] = 'sum( report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" - report."byorder_sd_attributedConversions7dSameSKU" - report."byorder_sp_attributedConversions7dSameSKU" ) ';
                $time_fields = $this->getTimeFields($time_line, 'report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" - report."byorder_sd_attributedConversions7dSameSKU" - report."byorder_sp_attributedConversions7dSameSKU"');
            } else if ($time_target == 'cpc_indirect_sales_quota') {  //CPC间接销售额
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'sum(report."byorder_sd_attributedSales7d" + report."byorder_sp_attributedSales7d"  - report."byorder_sd_attributedSales7dSameSKU" - report."byorder_sp_attributedSales7dSameSKU"  )';
                    $time_fields = $this->getTimeFields($time_line, 'report."byorder_sd_attributedSales7d" + report."byorder_sp_attributedSales7d"  - report."byorder_sd_attributedSales7dSameSKU" - report."byorder_sp_attributedSales7dSameSKU" ');
                } else {
                    $fields['count_total'] = 'sum(report."byorder_sd_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1))  + report."byorder_sp_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1)) - report."byorder_sd_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1))  - report."byorder_sp_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1))  )';
                    $time_fields = $this->getTimeFields($time_line, 'report."byorder_sd_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1))  + report."byorder_sp_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1)) - report."byorder_sd_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1))  - report."byorder_sp_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1)) ');
                }
            } else if ($time_target == 'cpc_indirect_sales_volume_rate') {  //CPC间接销量占比
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['count_total'] = 'sum( report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" - report."byorder_sd_attributedConversions7dSameSKU" - report."byorder_sp_attributedConversions7dSameSKU" )  * 1.0000 / nullif(sum( report.byorder_sales_volume ) ,0)';
                    $time_fields = $this->getTimeFields($time_line, 'report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" - report."byorder_sd_attributedConversions7dSameSKU" - report."byorder_sp_attributedConversions7dSameSKU" ', 'report.byorder_sales_volume');
                } else {
                    $fields['count_total'] = 'sum( report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" - report."byorder_sd_attributedConversions7dSameSKU" - report."byorder_sp_attributedConversions7dSameSKU" )  * 1.0000 / nullif(sum( report.report_sales_volume ) ,0)';
                    $time_fields = $this->getTimeFields($time_line, 'report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" - report."byorder_sd_attributedConversions7dSameSKU" - report."byorder_sp_attributedConversions7dSameSKU" ', 'report.report_sales_volume');
                }
            } else if ($time_target == 'other_vat_fee') { //VAT
                if ($datas['finance_datas_origin'] == 1) {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "SUM(0-report.byorder_reserved_field17)";
                        $time_fields = $this->getTimeFields($time_line, '0-report.byorder_reserved_field17');
                    } else {
                        $fields['count_total'] = "SUM((0-report.byorder_reserved_field17) * ({:RATE} / COALESCE(rates.rate ,1)))";
                        $time_fields = $this->getTimeFields($time_line, '(0-report.byorder_reserved_field17) * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "SUM(0-report.report_reserved_field17)";
                        $time_fields = $this->getTimeFields($time_line, '0-report.report_reserved_field17');
                    } else {
                        $fields['count_total'] = "SUM((0-report.report_reserved_field17) * ({:RATE} / COALESCE(rates.rate ,1)))";
                        $time_fields = $this->getTimeFields($time_line, '(0-report.report_reserved_field17) * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            }
            else if ($time_target == 'cost_profit_total_income') { //总收入
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['sale_datas_origin'] == '1') {
                        if ($datas['currency_code'] == 'ORIGIN') {
                            $fields['count_total'] = "sum( report.byorder_sales_quota )";
                            $time_fields = $this->getTimeFields($time_line, 'report.byorder_sales_quota ');
                        } else {
                            $fields['count_total'] = "sum( (report.byorder_sales_quota  ) * ({:RATE} / COALESCE(rates.rate ,1)) )";
                            $time_fields = $this->getTimeFields($time_line, ' (report.byorder_sales_quota ) * ({:RATE} / COALESCE(rates.rate ,1)) ');
                        }
                    } elseif ($datas['sale_datas_origin'] == '2') {
                        if ($datas['currency_code'] == 'ORIGIN') {
                            $fields['count_total'] = "sum( report.report_sales_quota  )";
                            $time_fields = $this->getTimeFields($time_line, ' report.report_sales_quota  ');
                        } else {
                            $fields['count_total'] = "sum( (report.report_sales_quota ) * ({:RATE} / COALESCE(rates.rate ,1)) )";
                            $time_fields = $this->getTimeFields($time_line, '(report.report_sales_quota ) * ({:RATE} / COALESCE(rates.rate ,1))  ');
                        }
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['sale_datas_origin'] == '1') {
                        if ($datas['currency_code'] == 'ORIGIN') {
                            $fields['count_total'] = "sum( report.byorder_sales_quota)";
                            $time_fields = $this->getTimeFields($time_line, ' report.byorder_sales_quota  ');
                        } else {
                            $fields['count_total'] = "sum( (report.byorder_sales_quota  ) * ({:RATE} / COALESCE(rates.rate ,1)) )";
                            $time_fields = $this->getTimeFields($time_line, '  (report.byorder_sales_quota ) * ({:RATE} / COALESCE(rates.rate ,1)) ');
                        }
                    } elseif ($datas['sale_datas_origin'] == '2') {
                        if ($datas['currency_code'] == 'ORIGIN') {
                            $fields['count_total'] = "sum( report.report_sales_quota  )";
                            $time_fields = $this->getTimeFields($time_line, '  report.report_sales_quota  ');
                        } else {
                            $fields['count_total'] = "sum( (report.report_sales_quota ) * ({:RATE} / COALESCE(rates.rate ,1)) )";
                            $time_fields = $this->getTimeFields($time_line, '   (report.report_sales_quota + report.report_refund_promote_discount) * ({:RATE} / COALESCE(rates.rate ,1)) ');
                        }
                    }
                }
            } else if ($time_target == 'cost_profit_total_pay') { //总支出
                $cost_profit_total_income_str = '';
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['sale_datas_origin'] == '1') {
                        $cost_profit_total_income_str = " - report.byorder_sales_quota + report.byorder_refund_promote_discount ";
                    } elseif ($datas['sale_datas_origin'] == '2') {
                        $cost_profit_total_income_str = " - report.report_sales_quota + report.byorder_refund_promote_discount ";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['sale_datas_origin'] == '1') {
                        $cost_profit_total_income_str = " - report.report_sales_quota + report.byorder_refund_promote_discount ";
                    } elseif ($datas['sale_datas_origin'] == '2') {
                        $cost_profit_total_income_str = " - report.report_sales_quota + report.byorder_refund_promote_discount ";
                    }
                }

                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['count_total'] = "SUM(report.byorder_goods_profit + report.byorder_purchasing_cost + report.byorder_logistics_head_course {$cost_profit_total_income_str} )";
                            $time_fields = $this->getTimeFields($time_line, " report.byorder_goods_profit + report.byorder_purchasing_cost + report.byorder_logistics_head_course {$cost_profit_total_income_str} ");
                        } else {
                            $fields['count_total'] = "SUM(  report.first_purchasing_cost + report.first_logistics_head_course  + report.byorder_goods_profit {$cost_profit_total_income_str} )";
                            $time_fields = $this->getTimeFields($time_line, " report.first_purchasing_cost + report.first_logistics_head_course  + report.byorder_goods_profit {$cost_profit_total_income_str}");
                        }
                    } else {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['count_total'] = "SUM( (report.byorder_goods_profit  + report.byorder_purchasing_cost  + report.byorder_logistics_head_course {$cost_profit_total_income_str} )* ({:RATE} / COALESCE(rates.rate ,1)) )";
                            $time_fields = $this->getTimeFields($time_line, "(report.byorder_goods_profit  + report.byorder_purchasing_cost  + report.byorder_logistics_head_course {$cost_profit_total_income_str} ) * ({:RATE} / COALESCE(rates.rate ,1)) ");
                        } else {
                            $fields['count_total'] = "SUM(  (report.first_purchasing_cost  + report.first_logistics_head_course  + report.byorder_goods_profit {$cost_profit_total_income_str})* ({:RATE} / COALESCE(rates.rate ,1))  )";
                            $time_fields = $this->getTimeFields($time_line, " (report.first_purchasing_cost  + report.first_logistics_head_course  + report.byorder_goods_profit {$cost_profit_total_income_str})* ({:RATE} / COALESCE(rates.rate ,1)) ");
                        }

                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['count_total'] = "SUM((report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost) + report.report_purchasing_cost + report.report_logistics_head_course {$cost_profit_total_income_str})";
                            $time_fields = $this->getTimeFields($time_line, " (report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost) + report.report_purchasing_cost + report.report_logistics_head_course {$cost_profit_total_income_str}");
                        } else {
                            $fields['count_total'] = "SUM( report.first_purchasing_cost + report.first_logistics_head_course +  (report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost) {$cost_profit_total_income_str} )";
                            $time_fields = $this->getTimeFields($time_line, "report.first_purchasing_cost + report.first_logistics_head_course +  (report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost) {$cost_profit_total_income_str}");
                        }
                    } else {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['count_total'] = "SUM( ((report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost) + report.report_purchasing_cost + report.report_logistics_head_course {$cost_profit_total_income_str} ) * ({:RATE} / COALESCE(rates.rate ,1)) )";
                            $time_fields = $this->getTimeFields($time_line, " ((report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost) + report.report_purchasing_cost  + report.report_logistics_head_course {$cost_profit_total_income_str} ) * ({:RATE} / COALESCE(rates.rate ,1)) ");
                        } else {
                            $fields['count_total'] = "SUM(  ( report.first_purchasing_cost + report.first_logistics_head_course  + (report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost) {$cost_profit_total_income_str})  * ({:RATE} / COALESCE(rates.rate ,1)) )";
                            $time_fields = $this->getTimeFields($time_line, " ( report.first_purchasing_cost  + report.first_logistics_head_course  + (report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost) {$cost_profit_total_income_str} ) * ({:RATE} / COALESCE(rates.rate ,1)) ");
                        }

                    }
                }
            }
            elseif ($time_target == 'goods_promote_coupon') {
                $goodsSplitField = $this->default_goods_split_fields;
                $tempField = $goodsSplitField['goods_promote_coupon'];

                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.monthly_sku_{$tempField})";
                    $time_fields = $this->getTimeFields($time_line, "report.monthly_sku_{$tempField}");
                } else {
                    $fields['count_total'] = "SUM(report.monthly_sku_{$tempField} * ({:RATE} / COALESCE(rates.rate ,1)))";
                    $time_fields = $this->getTimeFields($time_line, "report.monthly_sku_{$tempField} * ({:RATE} / COALESCE(rates.rate ,1))");
                }
            } elseif ($time_target == 'goods_other_review_enrollment_fee') {
                $goodsSplitField = $this->default_goods_split_fields;
                $tempField = $goodsSplitField['goods_other_review_enrollment_fee'];

                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.monthly_sku_{$tempField})";
                    $time_fields = $this->getTimeFields($time_line, "report.monthly_sku_{$tempField}");
                } else {
                    $fields['count_total'] = "SUM(report.monthly_sku_{$tempField} * ({:RATE} / COALESCE(rates.rate ,1)))";
                    $time_fields = $this->getTimeFields($time_line, "report.monthly_sku_{$tempField} * ({:RATE} / COALESCE(rates.rate ,1))");
                }
            } elseif ($time_target == 'goods_promote_run_lightning_deal_fee') {
                $goodsSplitField = $this->default_goods_split_fields;
                $tempField = $goodsSplitField['goods_promote_run_lightning_deal_fee'];

                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.monthly_sku_{$tempField})";
                    $time_fields = $this->getTimeFields($time_line, "report.monthly_sku_{$tempField}");
                } else {
                    $fields['count_total'] = "SUM(report.monthly_sku_{$tempField} * ({:RATE} / COALESCE(rates.rate ,1)))";
                    $time_fields = $this->getTimeFields($time_line, "report.monthly_sku_{$tempField} * ({:RATE} / COALESCE(rates.rate ,1))");
                }
            }else if ($time_target == 'sales_order_quantity') {  //订单明细数
                $tmp_field = $datas['sale_datas_origin'] == '1' ? 'byorder_order_quantity' : 'report_order_quantity';
                $fields['count_total'] = "SUM( report.{$tmp_field} )";
                $time_fields = $this->getTimeFields($time_line, $tmp_field);
            }else if ($time_target == 'sales_evaluation_nums') {  //测评销量
                $tmp_field = $datas['sale_datas_origin'] == '1' ? 'byorderitem_evaluation_nums' : 'reportitem_evaluation_nums';
                $fields['count_total'] = "SUM( report.{$tmp_field} )";
                $time_fields = $this->getTimeFields($time_line, $tmp_field);
            }else if ($time_target == 'sales_evaluation_order_nums') {  //测评订单量
                $tmp_field = $datas['sales_evaluation_nums'] == '1' ? 'byorderitem_evaluation_order_nums' : 'reportitem_evaluation_order_nums';
                $fields['count_total'] = "SUM( report.{$tmp_field} )";
                $time_fields = $this->getTimeFields($time_line, $tmp_field);
            }else if ($time_target == 'fba_sales_refund') {  //FBA退款金额
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorderitem_reserved_field12' : 'reportitem_reserved_field12';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.{$tmp_field})";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field}");
                } else {
                    $fields['count_total'] = "SUM(report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)))";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1))");
                }
            }else if ($time_target == 'fbm_sales_refund') {  //FBM退款金额
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorderitem_reserved_field13' : 'reportitem_reserved_field13';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.{$tmp_field})";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field}");
                } else {
                    $fields['count_total'] = "SUM(report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)))";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1))");
                }
            }else if ($time_target == 'amazon_fba_lost_num') {  //仓库丢失赔偿数量
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_lost_num' : 'report_lost_num';
                $fields['count_total'] = "SUM( report.{$tmp_field} )";
                $time_fields = $this->getTimeFields($time_line, $tmp_field);
            }else if ($time_target == 'amazon_fba_damage_num') {  //仓库损坏赔偿数量
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_damage_num' : 'report_damage_num';
                $fields['count_total'] = "SUM( report.{$tmp_field} )";
                $time_fields = $this->getTimeFields($time_line, $tmp_field);
            }else if ($time_target == 'buyer_evaluation_bad_review') {  //商品的Review中差评
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorderitem_in_bad_reviews' : 'reportitem_in_bad_reviews';
                $fields['count_total'] = "SUM( report.{$tmp_field} )";
                $time_fields = $this->getTimeFields($time_line, $tmp_field);
            }else if ($time_target == 'fba_sale_refund') {  //单位采购成本
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorderitem_reserved_field1' : 'reportitem_reserved_field1';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.{$tmp_field})";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field}");
                } else {
                    $fields['count_total'] = "SUM(report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)))";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1))");
                }
            }else if ($time_target == 'fbm_sale_refund') {  //单位FBA头程运费
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorderitem_reserved_field2' : 'reportitem_reserved_field2';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.{$tmp_field})";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field}");
                } else {
                    $fields['count_total'] = "SUM(report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)))";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1))");
                }
            }else if ($time_target == 'fba_sale_refund') {  //单位FBM头程运费
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorderitem_reserved_field3' : 'reportitem_reserved_field3';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.{$tmp_field})";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field}");
                } else {
                    $fields['count_total'] = "SUM(report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)))";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1))");
                }
            }else if ($time_target == 'amazon_market_vat_principal') {  //MarketplaceFacilitatorVAT-Principal
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_cpc_sb_sales_quota' : 'report_cpc_sb_sales_quota';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.{$tmp_field})";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field}");
                } else {
                    $fields['count_total'] = "SUM(report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)))";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1))");
                }
            }else if ($time_target == 'amazon_market_vat_shipping') {  //MarketplaceFacilitatorVAT-Shipping
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_cpc_sb_cost' : 'report_cpc_sb_cost';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.{$tmp_field})";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field}");
                } else {
                    $fields['count_total'] = "SUM(report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)))";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1))");
                }
            }else if ($time_target == 'amazon_market_vat_principal_refund') {  //MarketplaceFacilitatorVAT-Principal-refund
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_refund_rate' : 'report_refund_rate';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.{$tmp_field})";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field}");
                } else {
                    $fields['count_total'] = "SUM(report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)))";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1))");
                }
            }else if ($time_target == 'amazon_market_vat_shipping_refund') {  //MarketplaceFacilitatorVAT-Shipping-refund
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_profit_margin' : 'report_profit_margin';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.{$tmp_field})";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field}");
                } else {
                    $fields['count_total'] = "SUM(report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)))";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1))");
                }
            }
            elseif ($custom_target && $custom_target['target_type'] == 1) {
                $tempField = "report.monthly_sku_" . $custom_target['month_goods_field'];
                //新增指标
                if ($datas['currency_code'] != 'ORIGIN' && $custom_target['format_type'] == 4) {
                    $fields['count_total'] = "sum({$tempField} / COALESCE(rates.rate, 1) * {:RATE})";
                    $time_fields = $this->getTimeFields($time_line, "{$tempField} * ({:RATE} / COALESCE(rates.rate ,1))");
                } else {
                    $fields['count_total'] = "SUM({$tempField})";
                    $time_fields = $this->getTimeFields($time_line, $tempField);
                }
            } elseif (in_array($time_target, $keys)) {
                $tempField = "report.monthly_sku_" . $new_target_keys[$time_target]['month_goods_field'];
                //新增指标
                if ($datas['currency_code'] != 'ORIGIN' && $new_target_keys[$time_target]['format_type'] == 4) {
                    $fields['count_total'] = "sum({$tempField} / COALESCE(rates.rate, 1) * {:RATE})";
                    $time_fields = $this->getTimeFields($time_line, "{$tempField} * ({:RATE} / COALESCE(rates.rate ,1))");
                } else {
                    $fields['count_total'] = "SUM({$tempField})";
                    $time_fields = $this->getTimeFields($time_line, $tempField);
                }
            }
            else {
                $datas['time_target'] = $time_target;
                $fields_tmp = $this->getTimeField($datas, $time_line);
                $fields['count_total'] = $fields_tmp['count_total'];
                $time_fields = $fields_tmp['time_fields'];
            }

            $fields[$time_target] = $fields['count_total'];
            $time_fields_arr[$time_target] = $time_fields;
        }
        if($custom_target && $custom_target['target_type'] == 2){
            $this->dealTimeTargets($fields,$custom_target,$time_line,$time_fields_arr,$target_key,$isMysql);
        }else {
            if (!empty($time_fields) && is_array($time_fields)) {
                foreach ($time_fields as $kt => $time_field) {
                    $fields[$kt] = $time_field;
                }
            }
        }
        //$fields = array_merge($fields, $time_fields);
        return $fields;
    }

    private function getTimeFields($timeList, $field1 = '', $field2 = '', $fun = '')
    {
        $fields = array();
        if (empty($fun)) {
            $fun = 'SUM';
        }

        foreach ($timeList as $time) {
            if (empty($field2)) {
                $fields[strval($time['key'])] = "{$fun}(CASE WHEN (report.create_time>={$time['start']} and report.create_time<={$time['end']}) THEN ({$field1}) ELSE 0 END) ";
            } else {
                $fields[strval($time['key'])] = "({$fun}(CASE WHEN (report.create_time>={$time['start']} and report.create_time<={$time['end']}) THEN ({$field1}) ELSE 0 END)) * 1.0000 / nullif({$fun}(CASE WHEN (report.create_time>={$time['start']} and report.create_time<={$time['end']}) THEN ({$field2}) ELSE 0 END),0) ";
            }
        }

        return $fields;
    }

    private function getErpReportTimeFields($timeList, $field1 = '', $func = 'SUM', $field2 = '')
    {
        $fields = [];
        foreach ($timeList as $time) {
            if (!empty($field2)){
                $fields[strval($time['key'])] = "({$func}(CASE WHEN (warehouse_storage.time>={$time['start']} and warehouse_storage.time<={$time['end']}) THEN ({$field1}) ELSE 0 END)) * 1.0000 / nullif({$func}(CASE WHEN (warehouse_storage.time>={$time['start']} and warehouse_storage.time<={$time['end']}) THEN ({$field2}) ELSE 0 END), 0)";
            }else{
                $fields[strval($time['key'])] = "{$func}(CASE WHEN (warehouse_storage.time>={$time['start']} and warehouse_storage.time<={$time['end']}) THEN ({$field1}) ELSE 0 END)";
            }
        }

        return $fields;
    }

    /**
     * 获取时间字段
     * @author json.qiu 2021/03/04
     *
     * @param $datas
     * @param $timeLine
     * @param int $type 1表示商品，2表示店铺类型，3表示运营人员类型
     * @return array
     */
    private function getTimeField($datas,$timeLine,$type = 1)
    {
        $fields = [];
        $fields['count_total']  = '1';
        $time_fields            = '1';
        switch ($datas['time_target']){
            case 'fba_sales_quota':
                $goods_time_filed   = $this->handleTimeFields($datas,$timeLine,6,'report.byorder_fba_sales_quota','report.report_fba_sales_quota');
                $fields['count_total']  = $goods_time_filed['count_total'];
                $time_fields            = $goods_time_filed['time_fields'];
                break;
            case 'fbm_sales_quota':
                $goods_time_filed       = $this->handleTimeFields($datas,$timeLine,6,'report.byorder_fbm_sales_quota','report.report_fbm_sales_quota');
                $fields['count_total']  = $goods_time_filed['count_total'];
                $time_fields            = $goods_time_filed['time_fields'];
                break;
            case 'fba_refund_num':
                $goods_time_filed       = $this->handleTimeFields($datas,$timeLine,4,'report.byorder_fba_refund_num','report.report_fba_refund_num');
                $fields['count_total']  = $goods_time_filed['count_total'];
                $time_fields            = $goods_time_filed['time_fields'];
                break;
            case 'fbm_refund_num':
                $goods_time_filed       = $this->handleTimeFields($datas,$timeLine,4,'report.byorder_fbm_refund_num','report.report_fbm_refund_num');
                $fields['count_total']  = $goods_time_filed['count_total'];
                $time_fields            = $goods_time_filed['time_fields'];
                break;
            case 'fba_logistics_head_course':
                $goods_time_filed       = $this->handleTimeFields($datas,$timeLine,5,'report.byorder_fba_logistics_head_course','report.report_fba_logistics_head_course','report.fba_first_logistics_head_course');
                $fields['count_total']  = $goods_time_filed['count_total'];
                $time_fields            = $goods_time_filed['time_fields'];
                break;
            case 'fbm_logistics_head_course':
                if($type == 1){//商品的fbm刷的没问题
                    $first_fields = 'report.fbm_first_logistics_head_course';
                }else{//店铺和运营人员的fbm刷的有问题，特殊处理
                    $first_fields = '(report.first_logistics_head_course - report.fba_first_logistics_head_course)';
                }
                $goods_time_filed       = $this->handleTimeFields($datas,$timeLine,5,'report.byorder_fbm_logistics_head_course','report.report_fbm_logistics_head_course',$first_fields);
                $fields['count_total']  = $goods_time_filed['count_total'];
                $time_fields            = $goods_time_filed['time_fields'];
                break;
            case 'shipping_charge':
                $goods_time_filed       = $this->handleTimeFields($datas,$timeLine,1,'report.byorder_shipping_charge','report.report_shipping_charge');
                $fields['count_total']  = $goods_time_filed['count_total'];
                $time_fields            = $goods_time_filed['time_fields'];
                break;
            case 'tax':
                $goods_time_filed = $this->handleTimeFields($datas,$timeLine,1,'report.byorder_tax','report.report_tax');
                $fields['count_total']  = $goods_time_filed['count_total'];
                $time_fields            = $goods_time_filed['time_fields'];
                break;
            case 'ware_house_lost':
                $goods_time_filed       = $this->handleTimeFields($datas,$timeLine,1,'report.byorder_ware_house_lost','report.report_ware_house_lost');
                $fields['count_total']  = $goods_time_filed['count_total'];
                $time_fields            = $goods_time_filed['time_fields'];
                break;
            case 'ware_house_damage':
                $goods_time_filed       = $this->handleTimeFields($datas,$timeLine,1,'report.byorder_ware_house_damage','report.report_ware_house_damage');
                $fields['count_total']  = $goods_time_filed['count_total'];
                $time_fields            = $goods_time_filed['time_fields'];
                break;
            case 'channel_fbm_safe_t_claim_demage':
                if ($type == 2 or $type == 3){
                    $goods_time_filed       = $this->handleTimeFields($datas,$timeLine,1,'report.channel_fbm_safe_t_claim_demage','report.channel_fbm_safe_t_claim_demage');
                    $fields['count_total']  = $goods_time_filed['count_total'];
                    $time_fields            = $goods_time_filed['time_fields'];
                }
                break;
            default:
                $fields['count_total']  = '1';
                $time_fields            = '1';
                break;
        }

        return array(
            "count_total" => $fields['count_total'],
            "time_fields" => $time_fields,
        );
    }

    /**
     * 处理字段的格式
     * @author json.qiu 2021/03/04
     *
     * @param $datas
     * @param $timeLine
     * @param $data_origin
     * @param $by_order_fields
     * @param $report_fields
     * @param $first_fields
     * @return array
     */
    private function handleTimeFields($datas,$timeLine,$data_origin,$by_order_fields,$report_fields,$first_fields = '')
    {
        switch ($data_origin){
            case 1://财务数据源,且包含货币
                if($datas['finance_datas_origin'] == 1){
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "SUM($by_order_fields)";
                        $time_fields = $this->getTimeFields($timeLine, $by_order_fields);
                    } else {
                        $fields['count_total'] = "SUM(({$by_order_fields}) * ({:RATE} / COALESCE(rates.rate ,1)))";
                        $time_fields = $this->getTimeFields($timeLine, "({$by_order_fields}) * ({:RATE} / COALESCE(rates.rate ,1))");
                    }
                }else{
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "SUM($report_fields)";
                        $time_fields = $this->getTimeFields($timeLine, $report_fields);
                    } else {
                        $fields['count_total'] = "SUM(({$report_fields}) * ({:RATE} / COALESCE(rates.rate ,1)))";
                        $time_fields = $this->getTimeFields($timeLine, "($report_fields) * ({:RATE} / COALESCE(rates.rate ,1))");
                    }
                }
                break;
            case 2://财务数据源不包含货币
                if($datas['finance_datas_origin'] == 1){
                    $fields['count_total'] = "SUM($by_order_fields)";
                    $time_fields = $this->getTimeFields($timeLine, $by_order_fields);
                }else{
                    $fields['count_total'] = "SUM($report_fields)";
                    $time_fields = $this->getTimeFields($timeLine, $report_fields);
                }
                break;
            case 3://退款数据源，包含货币
                break;
            case 4://退款数据源，不包含货币
                if ($datas['refund_datas_origin'] == '1') {
                    $fields['count_total'] = "sum({$by_order_fields} )";
                    $time_fields = $this->getTimeFields($timeLine, "{$by_order_fields}");
                } elseif ($datas['refund_datas_origin'] == '2') {
                    $fields['count_total'] = "sum({$report_fields})";
                    $time_fields = $this->getTimeFields($timeLine, "{$report_fields}");
                }
                break;
            case 5://财务数据源包含货币包含先进先出
                if ($datas['cost_count_type'] == '1') {
                    if ($datas['finance_datas_origin'] == '1') {
                        if ($datas['currency_code'] == 'ORIGIN') {
                            $fields['count_total'] = " sum( {$by_order_fields} ) ";
                            $time_fields = $this->getTimeFields($timeLine, $by_order_fields);
                        } else {
                            $fields['count_total'] = " sum( {$by_order_fields} * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                            $time_fields = $this->getTimeFields($timeLine, "{$by_order_fields} * ({:RATE} / COALESCE(rates.rate ,1))");
                        }
                    } else {
                        if ($datas['currency_code'] == 'ORIGIN') {
                            $fields['count_total'] = " sum( {$report_fields} ) ";
                            $time_fields = $this->getTimeFields($timeLine, $report_fields);
                        } else {
                            $fields['count_total'] = " sum( {$report_fields} * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                            $time_fields = $this->getTimeFields($timeLine, "{$report_fields} * ({:RATE} / COALESCE(rates.rate ,1))");
                        }
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = " sum(( {$first_fields}) ) ";
                        $time_fields = $this->getTimeFields($timeLine, " ({$first_fields})");
                    } else {
                        $fields['count_total'] = " sum( ({$first_fields} * ({:RATE} / COALESCE(rates.rate ,1)) ) ) ";
                        $time_fields = $this->getTimeFields($timeLine, "({$first_fields} * ({:RATE} / COALESCE(rates.rate ,1)) )");
                    }
                }
                break;
            case 6://销售数据源,且包含货币
                if($datas['sale_datas_origin'] == 1){
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "SUM($by_order_fields)";
                        $time_fields = $this->getTimeFields($timeLine, $by_order_fields);
                    } else {
                        $fields['count_total'] = "SUM(({$by_order_fields}) * ({:RATE} / COALESCE(rates.rate ,1)))";
                        $time_fields = $this->getTimeFields($timeLine, "({$by_order_fields}) * ({:RATE} / COALESCE(rates.rate ,1))");
                    }
                }else{
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "SUM($report_fields)";
                        $time_fields = $this->getTimeFields($timeLine, $report_fields);
                    } else {
                        $fields['count_total'] = "SUM(({$report_fields}) * ({:RATE} / COALESCE(rates.rate ,1)))";
                        $time_fields = $this->getTimeFields($timeLine, "($report_fields) * ({:RATE} / COALESCE(rates.rate ,1))");
                    }
                }
                break;
            default:
                if ($datas['refund_datas_origin'] == '1') {
                    $fields['count_total'] = "sum(report.byorder_refund_num )";
                    $time_fields = $this->getTimeFields($timeLine, "report.byorder_refund_num");
                } elseif ($datas['refund_datas_origin'] == '2') {
                    $fields['count_total'] = "sum(report.report_refund_num )";
                    $time_fields = $this->getTimeFields($timeLine, "report.report_refund_num");
                }
                break;
        }

        return [
            "count_total" => $fields['count_total'],
            "time_fields" => $time_fields
        ];
    }

    /**
     * 获取不是时间类型的字段
     * @author json.qiu 2021/03/04
     *
     * @param $fields
     * @param $datas
     * @param $targets
     * @param int $type 类型，1商品，2店铺，3运营人员
     */
    private function getUnTimeFields(&$fields,$datas,$targets,$type = 1){
        if (in_array('fba_sales_quota', $targets)) { //FBA商品销售额
            if($datas['sale_datas_origin'] == 1){
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['fba_sales_quota'] = "SUM(report.byorder_fba_sales_quota)";
                } else {
                    $fields['fba_sales_quota'] = "SUM(report.byorder_fba_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)))";
                }
            }else{
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['fba_sales_quota'] = "SUM(report.report_fba_sales_quota)";
                } else {
                    $fields['fba_sales_quota'] = "SUM((report.report_fba_sales_quota) * ({:RATE} / COALESCE(rates.rate ,1)))";
                }
            }
        }

        if (in_array('fbm_sales_quota', $targets)) { //FBM商品销售额
            if($datas['sale_datas_origin'] == 1){
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['fbm_sales_quota'] = "SUM(report.byorder_fbm_sales_quota)";
                } else {
                    $fields['fbm_sales_quota'] = "SUM(report.byorder_fbm_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)))";
                }
            }else{
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['fbm_sales_quota'] = "SUM(report.report_fbm_sales_quota)";
                } else {
                    $fields['fbm_sales_quota'] = "SUM((report.report_fbm_sales_quota) * ({:RATE} / COALESCE(rates.rate ,1)))";
                }
            }
        }

        if (in_array('fba_refund_num', $targets)) { //FBA退款量
            if($datas['refund_datas_origin'] == 1){
                $fields['fba_refund_num'] = "SUM(report.byorder_fba_refund_num)";
            }else{
                $fields['fba_refund_num'] = "SUM(report.report_fba_refund_num)";
            }
        }

        if (in_array('fbm_refund_num', $targets)) { //FBM退款量
            if($datas['refund_datas_origin'] == 1){
                $fields['fbm_refund_num'] = "SUM(report.byorder_fbm_refund_num)";
            }else{
                $fields['fbm_refund_num'] = "SUM(report.report_fbm_refund_num)";
            }
        }

        if (in_array('fba_logistics_head_course', $targets)) { //FBA头程物流
            if($datas['cost_count_type'] == 1){
                if ($datas['finance_datas_origin'] == '1'){
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['fba_logistics_head_course'] = "SUM(report.byorder_fba_logistics_head_course)";
                    } else {
                        $fields['fba_logistics_head_course'] = "SUM(report.byorder_fba_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)))";
                    }
                }else{
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['fba_logistics_head_course'] = "SUM(report.report_fba_logistics_head_course)";
                    } else {
                        $fields['fba_logistics_head_course'] = "SUM((report.report_fba_logistics_head_course) * ({:RATE} / COALESCE(rates.rate ,1)))";
                    }
                }
            }else{
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['fba_logistics_head_course'] = "SUM(report.fba_first_logistics_head_course)";
                } else {
                    $fields['fba_logistics_head_course'] = "SUM((report.fba_first_logistics_head_course) * ({:RATE} / COALESCE(rates.rate ,1)))";
                }
            }

        }

        if (in_array('fbm_logistics_head_course', $targets)) { //fbm物流
            if($datas['cost_count_type'] == 1){
                if($datas['finance_datas_origin'] == 1){
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['fbm_logistics_head_course'] = "SUM(report.byorder_fbm_logistics_head_course)";
                    } else {
                        $fields['fbm_logistics_head_course'] = "SUM(report.byorder_fbm_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)))";
                    }
                }else{
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['fbm_logistics_head_course'] = "SUM(report.report_fbm_logistics_head_course)";
                    } else {
                        $fields['fbm_logistics_head_course'] = "SUM((report.report_fbm_logistics_head_course) * ({:RATE} / COALESCE(rates.rate ,1)))";
                    }
                }
            }else{
                if($type == 1){//商品的fbm刷的没问题
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['fbm_logistics_head_course'] = "SUM(report.fbm_first_logistics_head_course)";
                    } else {
                        $fields['fbm_logistics_head_course'] = "SUM((report.fbm_first_logistics_head_course) * ({:RATE} / COALESCE(rates.rate ,1)))";
                    }
                }else{//店铺和运营人员的fbm刷的有问题，特殊处理
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['fbm_logistics_head_course'] = " sum( (report.first_logistics_head_course - report.fba_first_logistics_head_course) ) ";
                    } else {
                        $fields['fbm_logistics_head_course'] = " sum(( (report.first_logistics_head_course - report.fba_first_logistics_head_course) * ({:RATE} / COALESCE(rates.rate ,1)) )) ";
                    }
                }
            }

        }

        if (in_array('shipping_charge', $targets)) { //运费
            if($datas['finance_datas_origin'] == 1){
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['shipping_charge'] = "SUM(report.byorder_shipping_charge)";
                } else {
                    $fields['shipping_charge'] = "SUM(report.byorder_shipping_charge * ({:RATE} / COALESCE(rates.rate ,1)))";
                }
            }else{
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['shipping_charge'] = "SUM(report.report_shipping_charge)";
                } else {
                    $fields['shipping_charge'] = "SUM((report.report_shipping_charge) * ({:RATE} / COALESCE(rates.rate ,1)))";
                }
            }
        }


        if (in_array('tax', $targets)) { //TAX（销售）
            if($datas['finance_datas_origin'] == 1){
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['tax'] = "SUM(report.byorder_tax)";
                } else {
                    $fields['tax'] = "SUM(report.byorder_tax * ({:RATE} / COALESCE(rates.rate ,1)))";
                }
            }else{
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['tax'] = "SUM(report.report_tax)";
                } else {
                    $fields['tax'] = "SUM(report.report_tax * ({:RATE} / COALESCE(rates.rate ,1)))";
                }
            }
        }

        if (in_array('ware_house_lost', $targets)) { //FBA仓丢失赔款
            if($datas['finance_datas_origin'] == 1){
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['ware_house_lost'] = "SUM(report.byorder_ware_house_lost)";
                } else {
                    $fields['ware_house_lost'] = "SUM(report.byorder_ware_house_lost * ({:RATE} / COALESCE(rates.rate ,1)))";
                }
            }else{
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['ware_house_lost'] = "SUM(report.report_ware_house_lost)";
                } else {
                    $fields['ware_house_lost'] = "SUM(report.report_ware_house_lost * ({:RATE} / COALESCE(rates.rate ,1)))";
                }
            }
        }

        if (in_array('ware_house_damage', $targets)) { //FBA仓损坏赔款
            if($datas['finance_datas_origin'] == 1){
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['ware_house_damage'] = "SUM(report.byorder_ware_house_damage)";
                } else {
                    $fields['ware_house_damage'] = "SUM(report.byorder_ware_house_damage * ({:RATE} / COALESCE(rates.rate ,1)))";
                }
            }else{
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['ware_house_damage'] = "SUM(report.report_ware_house_damage)";
                } else {
                    $fields['ware_house_damage'] = "SUM(report.report_ware_house_damage * ({:RATE} / COALESCE(rates.rate ,1)))";
                }
            }
        }

        if ($type == 2 or $type == 3){//店铺和运营人员才有的
            if (in_array('channel_fbm_safe_t_claim_demage', $targets)) { //SAF-T
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['channel_fbm_safe_t_claim_demage'] = "SUM(report.channel_fbm_safe_t_claim_demage)";
                } else {
                    $fields['channel_fbm_safe_t_claim_demage'] = "SUM(report.channel_fbm_safe_t_claim_demage * ({:RATE} / COALESCE(rates.rate ,1)))";
                }
            }
        }
    }

    private function getIsMysql($params){
//        if ($params['is_new_index']){//新指标先不读取热数据
//            return false;
//        }
        $app_env = config("app_env");
        if ($app_env == 'dev'){//测试环境不读取热数据
            return false;
        }
        $redis = new Redis();
        $not_center_mysql = $redis->get("not_center_mysql");
        if ($not_center_mysql !== false){
            return false;
        }
        $isMysql = false;
        if(!empty($params['compare_data'])){  //当有对比数据时 ， 不从mysql查
            return $isMysql ;
        }
        if($this->haveFbaFields && $params['stock_datas_origin'] == 1){ //有FBA库存指标且数据源为大数据不从mysql查看
            return $isMysql;
        }
        if (($this->haveErpIskuFields || $this->haveErpReportFields) && $params['stock_datas_origin'] == 1 ){
            //有erp库存指标
            return $isMysql;
        }
        if ($this->isUseTmpTable or $this->isReadTmpTable){//使用临时表或者读取临时表只读presto
            return $isMysql;
        }
//        return $isMysql;
//        if ($params['user_id'] == 343459){
//            return true;
//        }
//        if ($params['origin_create_start_time'] >= '1619798400' && $params['origin_create_end_time'] < '1622476800' &&  !in_array($params['count_dimension'],array("site_group","admin_id","department","operators")) && !($params['count_periods'] == 3 || $params['count_periods'] == 4 || $params['count_periods'] == 5) && $params['cost_count_type'] != 2) {
//            $isMysql = true;
//        }
        $today = strtotime(date("Y-m-d"));
        $start_time = $today - 15*86400;
        //店铺级
        if ($params['origin_create_start_time'] >= ($start_time - 168 * 86400)  && $params['origin_create_end_time'] < ($today+86400) &&  in_array($params['count_dimension'],array("channel_id","site_id","all_channels"))  && !($params['count_periods'] == 3 || $params['count_periods'] == 4 || $params['count_periods'] == 5) && $params['cost_count_type'] != 2) {
            $isMysql = true;
        }

        //店铺月报
        $is_month_table = $this->is_month_table($params);
        if (in_array($params['count_dimension'],array("channel_id","site_id","all_channels"))  && $is_month_table && $params['show_type'] == 2) {
            $isMysql = true;
        }

        //商品级
        $goods_day = $params['origin_create_start_time']>= ($start_time - 47*86400) && $params['origin_create_end_time'] < ($today+86400) && (isset($params['method']) && $params['method'] == "getListByGoods") && abs($params['origin_create_end_time'] - $params['origin_create_start_time']) <= 15*86400 && !($params['count_periods'] == 3 || $params['count_periods'] == 4 || $params['count_periods'] == 5) && $params['cost_count_type'] != 2;
        $goods_month = $is_month_table && $params['origin_create_start_time'] >= ($start_time - 168 * 86400) && (isset($params['method']) && $params['method'] == "getListByGoods");
        if ($goods_day or $goods_month){
            $goods_mysql_user = $redis->get("goods_mysql_user");

            if (empty($goods_mysql_user)){
                $goods_mysql_user = Db::connection('bigdata_goods_ads_001')->table("vip_user_big_data")->pluck('user_id')->toArray();//只有001有这个用户数据
                $redis->set("goods_mysql_user",$goods_mysql_user);
            }
            if (is_array($goods_mysql_user) && !in_array($params['user_id'],$goods_mysql_user)){
                $isMysql = true;
//                $isMysql = false;//临时改为读presto

            }else{
                $isMysql = false;
            }
        }
        if($params['is_median']){
            $isMysql = false;
        }
        return $isMysql;
    }

    private function getRemoveTaxField($params){
        $field = '';

        if ($params['sale_datas_origin'] == 1 ){
            $tax = "byorder_tax";
            if ($params['finance_datas_origin'] == 2){
                $tax = "report_tax";
            }
            //3,4,5,6,7,8,9,11,16
            $field =  "- ( CASE WHEN report.site_id IN (4,5,6,7,8,9,11,16) THEN report.{$tax} ELSE 0 END )";

        }

        return $field;
    }
    /**
     * 获取非商品维度统计列表(新增统计维度完成)
     * @param string $where
     * @param array $params
     * @param string $limit
     * @param string $sort
     * @param string $order
     * @param int $count_tip
     * @param array $channel_arr
     * @return array
     * @author: LWZ
     */
    public function getListByUnGoods(
        $where = '',
        $params = [],
        $limit = 0,
        $sort = '',
        $order = '',
        $count_tip = 0,
        array $channel_arr = [],
        array $currencyInfo = [],
        $exchangeCode = '1',
        array $timeLine = [],
        array $deparmentData = [],
        int $userId = 0,
        int $adminId = 0 ,
        array $rateInfo = [],
        int $day_param = 1
    ) {
        $fields = [];
        $this->handleTargets($params, 2);
        $isMysql = $this->getIsMysql($params);

        //  店铺日报user_id_mod取模20，只是表名不一样，店铺月表按大卖区分取模
        if(($params['count_periods'] == 0 || $params['count_periods'] == 1) && $params['cost_count_type'] != 2){ //按天或无统计周期
            $this->dws_user_id_mod = intval($params['user_id'] % 20);
        }else if($params['count_periods'] == 2 && $params['cost_count_type'] != 2){  //按周
            $this->dws_user_id_mod = intval($params['user_id'] % 20);
        }else if($params['count_periods'] == 3 || $params['count_periods'] == 4 || $params['count_periods'] == 5 ){
            $this->dws_user_id_mod = getUserIdMod($params['user_id']);
        }else if($params['cost_count_type'] == 2 ){
            $this->dws_user_id_mod = getUserIdMod($params['user_id']);
        } else {
            return [];
        }

        $searchKey = $params['searchKey'] ?? '';
        $searchVal = $params['searchVal'] ?? '';
        $matchType = $params['matchType'] ?? '';
        $searchVal = $isMysql ? $searchVal : self::escape(stripslashes($searchVal));
        $where = $this->getSearchValWhere($where,$searchKey,$searchVal,$matchType);

        $this->tax_field = $this->getRemoveTaxField($params);
        //没有按周期统计 ， 按指标展示
        if ($params['show_type'] == 2) {

            $fields_arr = $this->getUnGoodsFields($params,$isMysql);
            if ($this->is_channge_mysql){
                $isMysql = false;
            }
            $fields = $fields_arr['fields'];
            //自定义指标中含有FBA指标的key
            $fba_target_key = $fields_arr['fba_target_key'];
        } else {
            $fba_target_key = [] ;
            $fields = $this->getUnGoodsTimeFields($params, $timeLine,$isMysql);
        }

        if (empty($fields)) {
            return [];
        }

        $mod_where = "report.user_id_mod = " . $this->dws_user_id_mod;


        $ym_where = $this->getYnWhere($params['max_ym'] , $params['min_ym'] ) ;
        $where = $ym_where . " AND " .$mod_where . " AND report.available = 1 " .  (empty($where) ? "" : " AND " . $where) ;

        if(($params['count_periods'] == 0 || $params['count_periods'] == 1) && $params['cost_count_type'] != 2){ //按天或无统计周期
            $table = "{$this->table_channel_day_report} AS report LEFT JOIN {$this->table_channel} as channel ON report.channel_id = channel.id ";

        }else if($params['count_periods'] == 2 && $params['cost_count_type'] != 2){  //按周
//            $table = "{$this->table_channel_day_report} AS report" ;
            $table = "{$this->table_channel_day_report} AS report LEFT JOIN {$this->table_channel} as channel ON report.channel_id = channel.id ";
//            $where = $ym_where . " AND report.available = 1 "   . (empty($where) ? "" : " AND " . $where) ;
        }else if($params['count_periods'] == 3 || $params['count_periods'] == 4 || $params['count_periods'] == 5 ){
//            $isMysql = false;
//            $table = "{$this->table_channel_month_report} AS report" ;
            $table = "{$this->table_channel_month_report} AS report LEFT JOIN {$this->table_channel} as channel ON report.channel_id = channel.id ";
        }else if($params['cost_count_type'] == 2 ){
//            $isMysql = false;
//            $table = "{$this->table_channel_month_report} AS report" ;
            $table = "{$this->table_channel_month_report} AS report LEFT JOIN {$this->table_channel} as channel ON report.channel_id = channel.id ";
        } else {
            return [];
        }


        //部门维度统计
        if ($params['count_dimension'] == 'department') {
            $table .= " LEFT JOIN {$this->table_department_channel} as dc ON dc.user_id = report.user_id AND dc.channel_id = report.channel_id  LEFT JOIN {$this->table_user_department} as ud ON ud.id = dc.user_department_id ";
            $where .= " AND ud.status < 3 AND dc.status = 1 ";
            $admin_info = UserAdminModel::query()->select('is_master', 'is_responsible', 'user_department_id')->where('user_id', $userId)->where('id', $adminId)->first();
            if($admin_info['is_master'] != 1){
                if($admin_info['is_responsible'] == 0 ){ //非部门负责人
                    $rt['lists'] = array();
                    $rt['count'] = 0;
                    return $rt;
                }else{
                    $ids = $this->getMyAllDepartmentIds($deparmentData, $admin_info['user_department_id']);
                    if(empty($ids)){
                        $rt['lists'] = array();
                        $rt['count'] = 0;
                        return $rt;
                    }else{
                        $where .= " AND dc.user_department_id IN (".implode(',' ,$ids ).")" ;
                    }
                }
            }
            $level_where = array() ;
            if($params['is_check_department1'] == 1){
                $level_where[] = 1 ;
            }
            if($params['is_check_department2'] == 1){
                $level_where[] = 2 ;
            }
            if($params['is_check_department3'] == 1){
                $level_where[] = 3 ;
            }
            if(count($level_where) < 3){
                $where .= " AND dc.level IN (".implode(',' ,$level_where ).")" ;
            }
        }else if($params['count_dimension'] == 'admin_id'){
            $table .= " LEFT JOIN {$this->table_user_channel} as uc ON uc.user_id = report.user_id AND uc.channel_id = report.channel_id ";
            $where .= " AND uc.status = 1 AND uc.is_master = 0 ";
        }

        $channel_fba_fields_arr = array_keys(config('common.channel_fba_fields_arr')) ;
        $orderby = '';
        if(!empty($params['sort_target']) && !empty($params['sort_order']) && !empty($params['limit_num']) && $params['is_count'] == 1 && $params['stock_datas_origin'] == 1){
            //如果新版FBA指标筛选里包含了FBA指标 ， 那么汇总就不展示
            if((in_array($params['sort_target'],$channel_fba_fields_arr) || (!empty($fba_target_key) && in_array($params['sort_target'] , $fba_target_key))) ){
                return array('lists'=>[] , 'count'=>0);
            }
        }
        if( !empty($params['sort_target']) && (!in_array($params['sort_target'] , $channel_fba_fields_arr) || $params['stock_datas_origin'] != 1 ) ) {  //FBA 库存排序不在此处理
            if (!empty($params['sort_target']) && !empty($fields[$params['sort_target']]) && !empty($params['sort_order'])) {
                if ($params['currency_code'] != 'ORIGIN') {
                    $orderby = "(({$fields[$params['sort_target']]}) IS NULL), ({$fields[$params['sort_target']]}) {$params['sort_order']}";
                } else {
                    $orderby = "(({$fields[$params['sort_target']]}) IS NULL), (".$this->getOriginOrderBy($fields[$params['sort_target']],$params['sort_target'],$params).") {$params['sort_order']}";
                }
            } elseif (!empty($params['sort_target']) && $params['sort_target'] == 'create_time' && !empty($params['sort_order'])) {
                $orderby = " max(report.create_time) {$params['sort_order']}";
            }
        }

        if( !empty($order) && (!in_array($order , $channel_fba_fields_arr) || $params['stock_datas_origin'] != 1) ) {  //FBA 库存排序不在此处理
            if (!empty($order) && !empty($sort) && !empty($fields[$sort]) && $params['limit_num'] == 0) {
                if ($params['currency_code'] != 'ORIGIN') {
                    $orderby = "(({$fields[$sort]}) IS NULL), ({$fields[$sort]}) {$order}";
                } else {
                    $orderby =  "(({$fields[$sort]}) IS NULL), (".$this->getOriginOrderBy($fields[$sort],$sort,$params).") {$order}";
                }

            }
        }

        $orderbyTmp = $orderby;

        $rt = $fields_arr = [];
        foreach ($fields as $field_name => $field) {
            if ($isMysql) {
                $fields_arr[] = $field . " AS '" . $field_name . "'";
            } else {
                $fields_arr[] = $field . ' AS "' . $field_name . '"';
            }
        }

        $rate_table = $this->joinRateTable($params,$fields_arr,$table,$exchangeCode,$day_param);
        $field_data = $rate_table['field_data'];
        $table      = $rate_table['table'];


        if ($this->countDimensionChannel){
            //新增指标是店铺维度时  f_monthly_profit_report_001表year month为text，需转成int连表
            $table .= " LEFT JOIN {$this->table_channel_monthly_profit_report} as monthly_profit ON monthly_profit.db_num='{$this->dbhost}' AND monthly_profit.user_id = report.user_id AND monthly_profit.channel_id = report.channel_id AND CAST(monthly_profit.year AS INTEGER) = report.myear AND CAST(monthly_profit.month AS INTEGER) = report.mmonth";
        }

        $having = '';
        $where_detail = is_array($params['where_detail']) ? $params['where_detail'] : json_decode($params['where_detail'], true);
        if (empty($where_detail)) {
            $where_detail = [];
        }
        $group = '';
        if ($params['count_dimension'] == 'channel_id') {
            if ($params['count_periods'] > 0 && $params['show_type'] == '2') {
                if($params['count_periods'] == '4'){ //按季度
                    $group = 'report.channel_id , report.myear , report.mquarter ';
                    $orderby = 'report.channel_id , report.myear , report.mquarter ';
                }else if($params['count_periods'] == '5') { //年
                    $group = 'report.channel_id , report.myear' ;
                    $orderby = 'report.channel_id , report.myear ';
                }else{
                    if($params['count_periods'] == 2 && $params['cost_count_type'] != 2){
                        $group = 'report.channel_id , report.mweekyear , report.mweek ';
                        $orderby = 'report.channel_id , report.mweekyear , report.mweek ';
                    }else{
                        $group = 'report.channel_id_group ';
                        $orderby = 'report.channel_id_group ';
                    }
                }
            }else{
                $group = 'report.channel_id ';

                $orderby = empty($orderby) ? 'report.channel_id ' : ($orderby . ' , report.channel_id ');
            }
        } else if ($params['count_dimension'] == 'site_id') {
            if ($params['count_periods'] > 0 && $params['show_type'] == '2') {
                if($params['count_periods'] == '4'){ //按季度
                    $group = 'report.site_id , report.myear , report.mquarter ';
                    $orderby = 'report.site_id , report.myear , report.mquarter ';
                }else if($params['count_periods'] == '5') { //年
                    $group = 'report.site_id , report.myear' ;
                    $orderby = 'report.site_id , report.myear ';
                }else {
                    if($params['count_periods'] == 2 && $params['cost_count_type'] != 2){
                        $group = 'report.site_id , report.mweekyear , report.mweek ';
                        $orderby = 'report.site_id , report.mweekyear , report.mweek ';
                    }else{
                        $group = 'report.site_id_group ';
                        $orderby = 'report.site_id_group ';
                    }
                }
            }else{
                $group = 'report.site_id ';
                $orderby = empty($orderby) ? 'report.site_id ' : ($orderby . ' , report.site_id ');
            }
        } else if ($params['count_dimension'] == 'site_group') {
            if ($params['count_periods'] > 0 && $params['show_type'] == '2') {
                if($params['count_periods'] == '4'){ //按季度
                    $group = 'report.area_id , report.myear , report.mquarter ';
                    $orderby = 'report.area_id , report.myear , report.mquarter ';
                }else if($params['count_periods'] == '5') { //年
                    $group = 'report.area_id , report.myear' ;
                    $orderby = 'report.area_id , report.myear ';
                }else {
                    if($params['count_periods'] == 2 && $params['cost_count_type'] != 2){
                        $group = 'report.area_id , report.mweekyear , report.mweek ';
                        $orderby = 'report.area_id , report.mweekyear , report.mweek ';
                    }else{
                        $group = 'report.area_id_group ';
                        $orderby = 'report.area_id_group ';
                    }

                }
            }else{
                $group = 'report.area_id ';
                $orderby = empty($orderby) ? 'report.area_id ' : ($orderby . ' , report.area_id ');
            }
        } else if ($params['count_dimension'] == 'department') {
            if ($params['count_periods'] > 0 && $params['show_type'] == '2') {
                if($params['count_periods'] == '1'){ //按天
                    $group = 'dc.user_department_id , report.myear , report.mmonth , report.mday ';
                    $orderby = 'max(dc.level) , dc.user_department_id , report.myear , report.mmonth , report.mday ';
                }else if($params['count_periods'] == '2') { //按周
                    $group = 'dc.user_department_id , report.mweekyear ,report.mweek ';
                    $orderby = 'max(dc.level) , dc.user_department_id , report.mweekyear ,report.mweek ';
                }else if ($params['count_periods'] == '3' ) { //按月
                    $group = 'dc.user_department_id , report.myear , report.mmonth';
                    $orderby = 'max(dc.level) , dc.user_department_id , report.myear , report.mmonth';
                }else if ($params['count_periods'] == '4' ) {  //按季
                    $group = 'dc.user_department_id , report.myear , report.mquarter';
                    $orderby = 'max(dc.level) , dc.user_department_id , report.myear , report.mquarter';
                }else if ($params['count_periods'] == '5' ) { //按年
                    $group = 'dc.user_department_id , report.myear';
                    $orderby = 'max(dc.level) , dc.user_department_id , report.myear';
                }
            }else{
                $group = 'dc.user_department_id ';
                $orderby = empty($orderby) ? 'max(dc.level) , dc.user_department_id ' : ($orderby . ' , dc.user_department_id ');
            }
            if (!empty($where_detail['user_department_id'])){
                $where .= " AND dc.user_department_id IN (" . $where_detail['user_department_id'] . ")" ;
            }
            $where .= " AND dc.user_department_id > 0";
        }else if($params['count_dimension'] == 'admin_id'){
            if ($params['count_periods'] > 0 && $params['show_type'] == '2') {
                if ($params['count_periods'] == '1'){ //按天
                    $group = 'uc.admin_id, report.myear , report.mmonth , report.mday ';
                    $orderby = 'uc.admin_id , report.myear , report.mmonth , report.mday ';
                } else if($params['count_periods'] == '2') { //按周
                    $group = 'uc.admin_id , report.mweekyear ,report.mweek ';
                    $orderby = 'uc.admin_id , report.mweekyear ,report.mweek ';
                } else if ($params['count_periods'] == '3' ) { //按月
                    $group = 'uc.admin_id , report.myear , report.mmonth';
                    $orderby = 'uc.admin_id , report.myear , report.mmonth';
                } else if ($params['count_periods'] == '4' ) {  //按季
                    $group = 'uc.admin_id , report.myear , report.mquarter';
                    $orderby = 'uc.admin_id , report.myear , report.mquarter';
                } else if ($params['count_periods'] == '5' ) { //按年
                    $group = 'uc.admin_id , report.myear';
                    $orderby = 'uc.admin_id , report.myear';
                }
            } else {
                $group = 'uc.admin_id ';
                $orderby = empty($orderby) ? 'uc.admin_id  ' : ($orderby . ' , uc.admin_id ');
            }
            $where .= " AND uc.admin_id > 0";
        }else if($params['count_dimension'] == 'all_channels') { //按全部店铺维度统计
            if ($params['count_periods'] > 0 && $params['show_type'] == '2') {
                if ($params['count_periods'] == '1') { //按天
                    $group = 'report.myear , report.mmonth  , report.mday';
                    $orderby = 'report.myear , report.mmonth  , report.mday';
                } else if ($params['count_periods'] == '2') { //按周
                    $group = 'report.mweekyear , report.mweek';
                    $orderby = 'report.mweekyear , report.mweek';
                } else if ($params['count_periods'] == '3') { //按月
                    $group = 'report.myear , report.mmonth';
                    $orderby = 'report.myear , report.mmonth';
                } else if ($params['count_periods'] == '4') {  //按季
                    $group = 'report.myear , report.mquarter';
                    $orderby = 'report.myear , report.mquarter';
                } else if ($params['count_periods'] == '5') { //按年
                    $group = 'report.myear';
                    $orderby = 'report.myear';
                }
            } else {
                $group = 'report.user_id  ';
            }

        }else if($params['count_dimension'] == 'channel_operators'){
            $group = "channel.operation_user_admin_id";
            $orderby = "channel.operation_user_admin_id";
            if ($params['count_periods'] > 0 && $params['show_type'] == '2') {
                if ($params['count_periods'] == '1') { //按天
                    $group .= ',report.myear , report.mmonth  , report.mday';
                    $orderby .= ',report.myear , report.mmonth  , report.mday';
                } else if ($params['count_periods'] == '2') { //按周
                    $group .= ',report.mweekyear , report.mweek';
                    $orderby .= ',report.mweekyear , report.mweek';
                } else if ($params['count_periods'] == '3') { //按月
                    $group .= ',report.myear , report.mmonth';
                    $orderby .= ',report.myear , report.mmonth';
                } else if ($params['count_periods'] == '4') {  //按季
                    $group .= ',report.myear , report.mquarter';
                    $orderby .= ',report.myear , report.mquarter';
                } else if ($params['count_periods'] == '5') { //按年
                    $group .= ',report.myear';
                    $orderby .= ',report.myear';
                }
            }

            $where .= " AND channel.operation_user_admin_id > 0 AND channel.goods_operation_pattern = 2";
        }

        if (isset($params['is_time_sort']) && $params['is_time_sort'] == 1 && !empty($orderbyTmp) && $params['count_periods'] > 0 && $params['show_type'] == '2'){//按周期排序添加
            $orderby = $orderbyTmp;
        }

        if (!empty($where_detail)) {
            $target_wheres = $where_detail['target'] ?? '';
            $condition_relation = $where_detail['condition_relation'] ?? 'AND';
            if (!empty($target_wheres)) {
                foreach ($target_wheres as $target_where) {
                    //如果新版FBA指标筛选里包含了FBA指标 ， 那么汇总就不展示
                    if($params['is_count'] == 1 && $params['stock_datas_origin'] == 1 && (in_array($target_where['key'],$channel_fba_fields_arr) || (!empty($fba_target_key) && in_array($target_where['key'] , $fba_target_key))) ){
                        return array('lists'=>[] , 'count'=>0);
                        exit ;
                    }
                    if(!empty($fields[$target_where['key']])){
                        $where_value = $target_where['value'];
                        if (strpos($where_value, '%') !== false) {
                            $where_value = round($where_value / 100, 4);
                        }
                        if (empty($having)) {
                            $having .= '(' . $fields[$target_where['key']] . ') ' . $target_where['formula'] . $where_value;
                        } else {
                            $having .= ' ' . $condition_relation . ' (' . $fields[$target_where['key']] . ') ' . $target_where['formula'] . $where_value;
                        }
                    }
                }
            }
        }

        if (!empty($having)) {
            $group .= " having " . $having;
        }

        $group = str_replace("{:RATE}", $exchangeCode, $group);
        $orderby = str_replace("{:RATE}", $exchangeCode, $orderby);
        $group = str_replace("{:ERP_RATE}", $exchangeCode, $group ?? '');
        $where = str_replace("{:ERP_RATE}", $exchangeCode, $where ?? '');
        $orderby = str_replace("{:ERP_RATE}", $exchangeCode, $orderby ?? '');
        $orderby = str_replace("{:RMBRATE}",$this->cost_logistics_rate , $orderby);
        $where = str_replace("{:RMBRATE}",$this->cost_logistics_rate , $where);
        $group = str_replace("{:RMBRATE}",$this->cost_logistics_rate , $group);
        $group = str_replace("{:DAY}", $day_param, $group);
        $orderby = str_replace("{:DAY}", $day_param, $orderby);
        $limit_num = 0 ;
        $count = 0 ;
        if($params['show_type'] == 2 && $params['limit_num'] > 0 ){
            $limit_num = $params['limit_num'] ;
        }

        if(!empty($params['compare_data'])){
            $compareData = $this->getCompareDatas($params , 0 , $exchangeCode , $day_param ,$currencyInfo ) ;
        }else{
            $compareData = array();
        }

        if($this->haveFbaFields && $params['stock_datas_origin'] == 1){
            $params['deparmentData'] = $deparmentData ;
            $fbaData = $this->joinUnGoodsFbaTable($params , $channel_arr ,$exchangeCode , $currencyInfo ,$fields , $fba_target_key) ;
            if(!empty($fbaData)){
                if(!empty($fbaData['other_field'])){
                    $fbaData['other_field'] = str_replace("{:RATE}", $exchangeCode, str_replace("COALESCE(rates.rate ,1)","(COALESCE(rates.rate ,1)*1.00000)", $fbaData['other_field']));//去除presto除法把数据只保留4位导致精度异常，如1/0.1288 = 7.7639751... presto=7.7640
                    $fbaData['other_field'] = str_replace("{:DAY}", $day_param, $fbaData['other_field']);
                }
                if(!empty($fbaData['order'])){
                    $fbaData['order'] = str_replace("{:RATE}", $exchangeCode, str_replace("COALESCE(rates.rate ,1)","(COALESCE(rates.rate ,1)*1.00000)", $fbaData['order']));//去除presto除法把数据只保留4位导致精度异常，如1/0.1288 = 7.7639751... presto=7.7640
                    $fbaData['order'] = str_replace("{:DAY}", $day_param, $fbaData['order']);
                }
            }
        }else{
            $fbaData = array() ;
        }

        if ($count_tip == 2) { //仅统计总条数
            $count = $this->getTotalNum($where, $table, $group, false, $isMysql ,$compareData,$field_data , $fbaData);
            if($limit_num > 0 && $count > $limit_num){
                $count = $limit_num ;
            }
        } else if ($count_tip == 1) {  //仅仅统计列表
            if ($params['is_count'] == 1){
                if($params['total_status'] == 1){
                    $count = $this->getTotalNum($where, $table, $group, false, $isMysql,$compareData,$field_data,$fbaData);
                }
                $where = $this->getLimitWhere($where,$params,$table,$limit,$orderby,$group);
                if(!empty($where_detail['target'])){
                    $lists = $this->queryList($fields,$params, $exchangeCode, $day_param, $field_data, $table, $where, $group, false,$isMysql,$compareData , $fbaData);
                }else {
                    //获取总计时 ， 更改连表ON 为 origin_table.user_id = compare_table1.user_id ;
                    if(!empty($compareData)){
                        foreach($compareData as $k3=>$cdata3){
                            $compareData[$k3]['on'] = 'origin_table.user_id = compare_table'.($k3+1).'.user_id' ;
                        }
                    }
                    if(!empty($fbaData)){
                        $fbaData['join'] = 'new_origin_table.user_id = fba_table.user_id ' ;
                    }
                    $lists = $this->select($where, $field_data, $table, "", "", "", false,null,300,$isMysql,$compareData,$fbaData);
                }
            }elseif($params['is_median'] == 1){
                $median_limit = !empty($params['limit_num']) ? $limit : '';
                $median_order = !empty($params['limit_num']) ? $orderby : '';
                $origin_sql = $this->getSelectSql($where, $field_data, $table, $median_limit, $median_order, $group,false,$isMysql);
                $lists = $this->getMedianValue($params,$origin_sql,null,300,$isMysql);
            }else{
                $lists = $this->select($where, $field_data, $table, $limit, $orderby, $group,false,null,300,$isMysql,$compareData,$fbaData,[],$this->isUseTmpTable,$this->isReadTmpTable);
                if($params['show_type'] == 2 && $params['stock_datas_origin'] != 1 && ( !empty($fields['fba_goods_value']) || !empty($fields['fba_stock']) || !empty($fields['fba_need_replenish']) || !empty($fields['fba_predundancy_number']) )){
                    $lists = $this->getUnGoodsFbaData($lists , $fields , $params,$channel_arr, $currencyInfo, $exchangeCode,$isMysql) ;
                }
                //自定义公式涉及到fba
                if ($params['show_type'] == 2 && $params['stock_datas_origin'] != 1 && !empty($lists)) {
                    foreach ($lists as $k => $item) {
                        foreach ($item as $key => $value) {
                            if (in_array($key, $fba_target_key)) {
                                $item[$key] = $this->count_custom_formula($value, $item);
                            }
                        }
                        $lists[$k] = $item;
                    }
                }
            }
        } else {  //统计列表和总条数
            if ($params['is_count'] == 1){
                if($params['total_status'] == 1){
                    $count = $this->getTotalNum($where, $table, $group, false, $isMysql,$compareData,$field_data,$fbaData);
                }
                $where = $this->getLimitWhere($where,$params,$table,$limit,$orderby,$group);
                if(!empty($where_detail['target'])){
                    $lists = $this->queryList($fields,$params, $exchangeCode, $day_param, $field_data, $table, $where, $group, false, $isMysql,$compareData , $fbaData);
                }else {
                    //获取总计时 ， 更改连表ON 为 origin_table.user_id = compare_table1.user_id ;
                    if(!empty($compareData)){
                        foreach($compareData as $k3=>$cdata3){
                            $compareData[$k3]['on'] = 'origin_table.user_id = compare_table'.($k3+1).'.user_id' ;
                        }
                    }
                    if(!empty($fbaData)){
                        $fbaData['join'] = 'new_origin_table.user_id = fba_table.user_id ' ;
                    }
                    $lists = $this->select($where, $field_data, $table, "", '', '', false, null, 300, $isMysql,$compareData,$fbaData,[],$this->isUseTmpTable,$this->isReadTmpTable);
                }
                $logger = ApplicationContext::getContainer()->get(LoggerFactory::class)->get('dataark', 'debug');
                $logger->info('getListByUnGoods Total Request', [$this->getLastSql()]);
            }elseif($params['is_median'] == 1){
                $median_limit = !empty($params['limit_num']) ? $limit : '';
                $median_order = !empty($params['limit_num']) ? $orderby : '';
                $origin_sql = $this->getSelectSql($where, $field_data, $table, $median_limit, $median_order, $group,false,$isMysql);
                $lists = $this->getMedianValue($params,$origin_sql,null,300,$isMysql);
            }else{

                $parallel = new Parallel();
                $parallel->add(function () use($where, $field_data, $table, $limit, $orderby, $group, $isMysql,$compareData,$fbaData) {
                    $lists = $this->select($where, $field_data, $table, $limit, $orderby, $group, false, null, 300, $isMysql,$compareData,$fbaData,[],$this->isUseTmpTable,$this->isReadTmpTable);

                    return $lists;
                });
                $parallel->add(function () use($where, $table, $group, $isMysql,$compareData,$field_data,$fbaData) {
                    $count = $this->getTotalNum($where, $table, $group, false, $isMysql,$compareData,$field_data,$fbaData);
                    return $count;
                });

                try{
                    // $results 结果为 [1, 2]
                    $results = $parallel->wait();
                    $lists = $results[0];
                    $count = $results[1];
                } catch(ParallelExecutionException $e){
                    // $e->getResults() 获取协程中的返回值。
                    // $e->getThrowables() 获取协程中出现的异常。
                    Log::getClient('dataark', 'dataark')->info('协程异常：', [$e->getMessage()]);

                }


                $logger = ApplicationContext::getContainer()->get(LoggerFactory::class)->get('dataark', 'debug');
                $logger->info('getListByUnGoods Request', [$this->getLastSql()]);
                if($params['show_type'] == 2 && $params['stock_datas_origin'] != 1  &&  ( !empty($fields['fba_goods_value']) || !empty($fields['fba_stock']) || !empty($fields['fba_need_replenish']) || !empty($fields['fba_predundancy_number']) )){
                    $lists = $this->getUnGoodsFbaData($lists , $fields , $params,$channel_arr, $currencyInfo, $exchangeCode,$isMysql) ;
                }
                //自定义公式涉及到fba
                if ($params['show_type'] == 2 && $params['stock_datas_origin'] != 1  && !empty($lists)) {
                    foreach ($lists as $k => $item) {
                        foreach ($item as $key => $value) {
                            if (in_array($key, $fba_target_key)) {
                                $item[$key] = $this->count_custom_formula($value, $item);
                            }
                        }
                        $lists[$k] = $item;
                    }
                }
            }
            if($limit_num > 0 && $count > $limit_num){
                $count = $limit_num ;
            }
        }
        $targets = is_array($params['target']) ? $params['target'] :  explode(',' , $params['target'])  ;
        if(!empty($lists) && empty($params['is_median']) && $params['show_type'] == 2 && $params['limit_num'] > 0 && !empty($order) && !empty($params['sort_target']) && !empty($sort) && !empty($params['sort_order'] &&  in_array($sort , $targets) && in_array($params['sort_target'] , $targets))){
            //根据字段对数组$lists进行排列
            $sort_names = array_column($lists,$sort);
            $order2  =  $order == 'desc' ? \SORT_DESC : \SORT_ASC ;
            array_multisort($sort_names,$order2,$lists);
        }
        $rt['lists'] = empty($lists) ? [] : $lists;
        $rt['lists'] = $this->handleReturnData($params,$rt['lists']);;
        $rt['count'] = (int)$count;
        return $rt;
    }

    // 获取非商品维度指标字段（新增统计维度完成）

    /**
     * @param $datas
     * @return array
     */
    private function getUnGoodsFields($datas,$isMysql = false)
    {
        $fields = [];
        $fields['user_id'] = 'max(report.user_id)';
        $fields['site_country_id'] = 'max(report.site_id)';


        if ($datas['count_dimension'] === 'channel_id') {
            $fields['site_id'] = 'max(report.site_id)';
            $fields['channel_id'] = 'max(report.channel_id)';
//            $fields['operators'] = 'max(report.operation_user_admin_name)';
            $fields['operation_user_admin_id'] = 'max(channel.operation_user_admin_id)';
        } elseif ($datas['count_dimension'] === 'site_id') {
            $fields['site_id'] = 'max(report.site_id)';
        } elseif ($datas['count_dimension'] === 'site_group') {
            $fields['site_group'] = 'max(report.area_id)';
        } elseif ($datas['count_dimension'] === 'department') {
            $fields['user_department_id'] = 'max(dc.user_department_id)';
            if($this->haveFbaFields == true  && $datas['stock_datas_origin'] == 1){
                $fields['level'] = 'max(dc.level)' ;
            }

        } elseif ($datas['count_dimension'] === 'admin_id') {
            $fields['admin_id'] = 'max(uc.admin_id)';
            $fields['user_admin_id'] = 'max(uc.admin_id)';
        }elseif ($datas['count_dimension'] == 'channel_operators'){
            $fields['operation_user_admin_id'] = 'max(channel.operation_user_admin_id)';
        }

        if ($datas['count_periods'] == '1' && $datas['show_type'] == '2') { //按天
            $fields['time'] = "concat(cast(max(report.myear) as varchar), '-', cast(max(report.mmonth) as varchar), '-', cast(max(report.mday) as varchar))";
            if($this->haveFbaFields == true && $datas['stock_datas_origin'] == 1){
                $fields['myear']  = 'max(report.myear)' ;
                $fields['mmonth']  = 'max(report.mmonth)' ;
                $fields['mday']  = 'max(report.mday)' ;
            }
        } else if ($datas['count_periods'] == '2' && $datas['show_type'] == '2') { //按周
            $fields['time'] = "concat(cast(max(report.mweekyear) as varchar), '-', cast(max(report.mweek) as varchar))";
            if($this->haveFbaFields == true && $datas['stock_datas_origin'] == 1){
                $fields['mweekyear']  = 'max(report.mweekyear)' ;
                $fields['mweek']  = 'max(report.mweek)' ;
            }
        } else if ($datas['count_periods'] == '3' && $datas['show_type'] == '2') { //按月
            $fields['time'] = "concat(cast(max(report.myear) as varchar), '-', cast(max(report.mmonth) as varchar))";
            if($this->haveFbaFields == true && $datas['stock_datas_origin'] == 1){
                $fields['myear']  = 'max(report.myear)' ;
                $fields['mmonth']  = 'max(report.mmonth)' ;
            }
        } else if ($datas['count_periods'] == '4' && $datas['show_type'] == '2') {  //按季
            $fields['time'] = "concat(cast(max(report.myear) as varchar), '-', cast(max(report.mquarter) as varchar))";
            if($this->haveFbaFields == true && $datas['stock_datas_origin'] == 1){
                $fields['myear']  = 'max(report.myear)' ;
                $fields['mquarter']  = 'max(report.mquarter)' ;
            }

        } else if ($datas['count_periods'] == '5' && $datas['show_type'] == '2') { //按年
            $fields['time'] = "cast(max(report.myear) as varchar)";
            if($this->haveFbaFields == true && $datas['stock_datas_origin'] == 1){
                $fields['myear']  = 'max(report.myear)' ;
            }
        }

        $targets = explode(',', $datas['target']);
        $targets_temp = $targets;//基础指标缓存

        //店铺月销售额目标
        if ($isMysql && (in_array('sale_channel_month_goal', $targets) || in_array('gross_profit_channel_month_goal', $targets) || in_array('gross_margin_channel_month_goal', $targets))) {
            $isMysql = false;
            $this->is_channge_mysql = true;
        }

        $targets = $this->lastTargets;
        if ($isMysql && $this->is_channge_mysql) {
            $isMysql = false;
        }
        $where_detail = is_array($datas['where_detail']) ? $datas['where_detail'] : json_decode($datas['where_detail'], true);

        if ($datas['is_new_index'] == 1){
            $fields = $this->handleNewIndexField($datas,$fields,$targets,2,$isMysql);
            $fields = $fields['fields'];
        }
        else{
            if (in_array('goods_visitors', $targets)) {  // 买家访问次数
                $fields['goods_visitors'] = 'SUM(report.byorder_user_sessions)';
            }
            if (in_array('goods_conversion_rate', $targets)) { //订单商品数量转化率
                if(!empty($where_detail['target']) && $datas['is_count'] == 1) {
                    $fields['quantity_of_goods_ordered'] = 'sum( report.byorder_quantity_of_goods_ordered )';
                    $fields['goods_visitors'] = 'sum( report.byorder_user_sessions )';
                }
                $fields['goods_conversion_rate'] = 'sum( report.byorder_quantity_of_goods_ordered ) * 1.0000 / nullif(sum( report.byorder_user_sessions ) ,0)';
            }
            if (in_array('sale_sales_volume', $targets) || in_array('sale_refund_rate', $targets) || in_array('cpc_order_rate', $targets) || in_array('cpc_direct_sales_volume_rate', $targets) || in_array('cpc_indirect_sales_volume_rate', $targets)) { //销售量
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['sale_sales_volume'] = " sum( report.byorder_sales_volume +  report.byorder_group_id ) ";
                } elseif ($datas['sale_datas_origin'] == '2') {
                    $fields['sale_sales_volume'] = " sum( report.report_sales_volume + report.report_group_id ) ";
                }
            }
            if (in_array('sale_many_channel_sales_volume', $targets)) { //多渠道数量
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['sale_many_channel_sales_volume'] = "sum( report.byorder_group_id )";
                } elseif ($datas['sale_datas_origin'] == '2') {
                    $fields['sale_many_channel_sales_volume'] = "sum( report.report_group_id )";
                }
            }
            //订单数
            if (in_array('sale_order_number', $targets)) {
                $fields['sale_order_number'] = "sum( report.bychannel_sales_volume )";
            }

            if (in_array('sale_sales_quota', $targets) || in_array('cost_profit_profit_rate', $targets) || in_array('amazon_fee_rate', $targets) || in_array('purchase_logistics_cost_rate', $targets) || in_array('operate_fee_rate', $targets) || in_array('evaluation_fee_rate', $targets) || in_array('cpc_turnover_rate', $targets) || in_array('cpc_cost_rate', $targets)) {  //商品销售额
                if ($datas['sale_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['sale_sales_quota'] = "sum( report.byorder_sales_quota )";
                    } else {
                        $fields['sale_sales_quota'] = "sum( report.byorder_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                } elseif ($datas['sale_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['sale_sales_quota'] = "sum( report.report_sales_quota )";
                    } else {
                        $fields['sale_sales_quota'] = "sum( report.report_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                }
            }

            //订单金额
            if (in_array('sale_sales_dollars', $targets) ) {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['sale_sales_dollars'] = "sum( report.bychannel_sales_quota )";
                } else {
                    $fields['sale_sales_dollars'] = "sum( report.bychannel_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('sale_return_goods_number', $targets) || in_array('sale_refund_rate', $targets)) {  //退款量
                if ($datas['refund_datas_origin'] == '1') {
                    $fields['sale_return_goods_number'] = "sum(report.byorder_refund_num )";
                } elseif ($datas['refund_datas_origin'] == '2') {
                    $fields['sale_return_goods_number'] = "sum(report.report_refund_num )";
                }
            }
            if (in_array('sale_refund', $targets)) {  //退款
                if ($datas['refund_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['sale_refund'] = "sum( 0 - report.byorder_refund )";
                    } else {
                        $fields['sale_refund'] = "sum( ( 0 - report.byorder_refund ) * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                    }
                } elseif ($datas['refund_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['sale_refund'] = "sum( 0 - report.report_refund )";
                    } else {
                        $fields['sale_refund'] = "sum( (0 - report.report_refund) * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                    }
                }
            }
            if (in_array('sale_refund_rate', $targets)) {  //退款率
                $fields['sale_refund_rate'] = '('.$fields['sale_return_goods_number'] . ") * 1.0000 / nullif( " . $fields['sale_sales_volume'] . " ,0) ";
            }

            if (in_array('promote_discount', $targets)) {  //promote折扣
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['promote_discount'] = "SUM(report.byorder_promote_discount)";
                    } else {
                        $fields['promote_discount'] = "SUM(report.byorder_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['promote_discount'] = "SUM(report.report_promote_discount)";
                    } else {
                        $fields['promote_discount'] = "SUM(report.report_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                }
            }
            if (in_array('promote_refund_discount', $targets)) {  //退款返还promote折扣
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['promote_refund_discount'] = "SUM(report.byorder_refund_promote_discount)";
                    } else {
                        $fields['promote_refund_discount'] = "SUM(report.byorder_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['promote_refund_discount'] = "SUM(report.report_refund_promote_discount)";
                    } else {
                        $fields['promote_refund_discount'] = "SUM(report.report_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                }
            }

            if (in_array('promote_store_fee', $targets)) { //店铺促销费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['promote_store_fee'] = 'SUM(report.byorder_refund_promote_discount + report.byorder_promote_discount + report.bychannel_coupon_redemption_fee  + report.bychannel_run_lightning_deal_fee)';
                    } else {
                        $fields['promote_store_fee'] = 'SUM(report.byorder_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1))+ report.byorder_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_coupon_redemption_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_run_lightning_deal_fee * ({:RATE} / COALESCE(rates.rate ,1)))';
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['promote_store_fee'] = 'SUM(report.report_refund_promote_discount + report.report_promote_discount + report.bychannel_coupon_redemption_fee  + report.bychannel_run_lightning_deal_fee)';
                    } else {
                        $fields['promote_store_fee'] = 'SUM(report.report_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1))+ report.report_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_coupon_redemption_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_run_lightning_deal_fee * ({:RATE} / COALESCE(rates.rate ,1)))';
                    }
                }
            }

            if (in_array('purchase_logistics_purchase_cost', $targets) || in_array('purchase_logistics_cost_rate', $targets) || in_array('cost_profit_profit', $targets) || in_array('cost_profit_profit_rate', $targets) || in_array('cost_profit_total_pay', $targets)) {  //采购成本
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['purchase_logistics_purchase_cost'] = " sum( report.byorder_purchasing_cost ) ";
                        } else {
                            $fields['purchase_logistics_purchase_cost'] = " sum((report.first_purchasing_cost) ) ";
                        }
                    } else {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['purchase_logistics_purchase_cost'] = " sum( report.byorder_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        } else {
                            $fields['purchase_logistics_purchase_cost'] = " sum( ( report.first_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1))) ) ";
                        }
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['purchase_logistics_purchase_cost'] = " sum( report.report_purchasing_cost ) ";
                        } else {
                            $fields['purchase_logistics_purchase_cost'] = " sum((report.first_purchasing_cost) ) ";
                        }
                    } else {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['purchase_logistics_purchase_cost'] = " sum( report.report_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        } else {
                            $fields['purchase_logistics_purchase_cost'] = " sum( ( report.first_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1))) ) ";
                        }
                    }
                }

            }
            if (in_array('purchase_logistics_logistics_cost', $targets) || in_array('purchase_logistics_cost_rate', $targets) || in_array('cost_profit_profit', $targets)  || in_array('cost_profit_profit_rate', $targets) || in_array('cost_profit_total_pay', $targets)) {  // 物流/头程
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['purchase_logistics_logistics_cost'] = " sum( report.byorder_logistics_head_course ) ";
                        } else {
                            $fields['purchase_logistics_logistics_cost'] = " sum(  (report.first_logistics_head_course) ) ";
                        }

                    } else {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['purchase_logistics_logistics_cost'] = " sum( report.byorder_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        } else {
                            $fields['purchase_logistics_logistics_cost'] = " sum( (report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) )) ";
                        }

                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['purchase_logistics_logistics_cost'] = " sum( report.report_logistics_head_course ) ";
                        } else {
                            $fields['purchase_logistics_logistics_cost'] = " sum( ( report.first_logistics_head_course) ) ";
                        }

                    } else {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['purchase_logistics_logistics_cost'] = " sum( report.report_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        } else {
                            $fields['purchase_logistics_logistics_cost'] = " sum( (report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) )) ";
                        }

                    }
                }

            }

        if (in_array('cost_profit_profit', $targets) || in_array('cost_profit_profit_rate', $targets) || in_array('cost_profit_total_pay', $targets) ) {  //毛利润
            $repair_data = $this->tax_field." +report.bychannel_reserved_field44 + report.bychannel_reserved_field43 " ;
            if ($datas['finance_datas_origin'] == '1') {
                if ($datas['sale_datas_origin'] == '2') {
                    $repair_data .= " + report.report_sales_quota - report.byorder_sales_quota  ";
                }
                if ($datas['refund_datas_origin'] == '2') {
                    $repair_data .=  " + report.byorder_refund - report.report_refund ";
                }
            }else{
                if ($datas['sale_datas_origin'] == '1') {
                    $repair_data .= " + report.byorder_sales_quota - report.report_sales_quota  ";
                }
                if ($datas['refund_datas_origin'] == '1') {
                    $repair_data .=  " + report.report_refund - report.byorder_refund ";
                }
            }
            if(empty($repair_data)){
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['cost_profit_profit'] = "(SUM(report.byorder_channel_profit + report.bychannel_channel_profit) + {$fields['purchase_logistics_purchase_cost']} + {$fields['purchase_logistics_logistics_cost']})";
                    } else {
                        $fields['cost_profit_profit'] = "(SUM(report.byorder_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1))) + {$fields['purchase_logistics_purchase_cost']} + {$fields['purchase_logistics_logistics_cost']})";
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['cost_profit_profit'] = "(SUM(report.report_channel_profit + report.bychannel_channel_profit) + {$fields['purchase_logistics_purchase_cost']} + {$fields['purchase_logistics_logistics_cost']})";
                    } else {
                        $fields['cost_profit_profit'] = "(SUM(report.report_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1))) + {$fields['purchase_logistics_purchase_cost']} + {$fields['purchase_logistics_logistics_cost']})";
                    }
                }
            }else{
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['cost_profit_profit'] = "(SUM(report.byorder_channel_profit + report.bychannel_channel_profit {$repair_data}) + {$fields['purchase_logistics_purchase_cost']} + {$fields['purchase_logistics_logistics_cost']})";
                    } else {
                        $fields['cost_profit_profit'] = "(SUM((report.byorder_channel_profit".$repair_data.") * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1))) + {$fields['purchase_logistics_purchase_cost']} + {$fields['purchase_logistics_logistics_cost']})";
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['cost_profit_profit'] = "(SUM(report.report_channel_profit + report.bychannel_channel_profit {$repair_data}) + {$fields['purchase_logistics_purchase_cost']} + {$fields['purchase_logistics_logistics_cost']})";
                    } else {
                        $fields['cost_profit_profit'] = "(SUM((report.report_channel_profit".$repair_data.") * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1))) + {$fields['purchase_logistics_purchase_cost']} + {$fields['purchase_logistics_logistics_cost']})";
                    }
                }
            }

        }
        if (in_array('cost_profit_profit_rate', $targets)) {  //毛利率
            $fields['cost_profit_profit_rate'] = "({$fields['cost_profit_profit']}) * 1.0000 / nullif({$fields['sale_sales_quota']}, 0) ";
        }
        if (in_array('amazon_fee', $targets) || in_array('amazon_fee_rate', $targets)) {  //亚马逊费用
            if ($datas['finance_datas_origin'] == '1') {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_fee'] = 'SUM(report.byorder_channel_amazon_order_fee +report.bychannel_reserved_field44 + report.bychannel_reserved_field43 + report.byorder_channel_amazon_refund_fee + report.byorder_channel_amazon_storage_fee + report.byorder_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee'.$this->tax_field.')';
                } else {
                    $fields['amazon_fee'] = 'SUM((report.byorder_channel_amazon_order_fee +report.bychannel_reserved_field44 + report.bychannel_reserved_field43'.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1))  + report.byorder_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.byorder_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.byorder_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_order_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1)) )';
                }
            } elseif ($datas['finance_datas_origin'] == '2') {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_fee'] = 'SUM(report.report_channel_amazon_order_fee +report.bychannel_reserved_field44 + report.bychannel_reserved_field43 + report.report_channel_amazon_refund_fee + report.report_channel_amazon_storage_fee + report.report_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee'.$this->tax_field.')';
                } else {
                    $fields['amazon_fee'] = 'SUM((report.report_channel_amazon_order_fee +report.bychannel_reserved_field44 + report.bychannel_reserved_field43'.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1))  + report.report_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.report_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.report_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_order_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1)) )';
                }
            }
        }
        if (in_array('amazon_sales_commission', $targets)) {  //亚马逊销售佣金
            if ($datas['finance_datas_origin'] == '1') {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_sales_commission'] = "sum( report.byorder_platform_sales_commission ) ";
                } else {
                    $fields['amazon_sales_commission'] = "sum( report.byorder_platform_sales_commission * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                }
            } elseif ($datas['finance_datas_origin'] == '2') {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_sales_commission'] = "sum( report.report_platform_sales_commission ) ";
                } else {
                    $fields['amazon_sales_commission'] = "sum( report.report_platform_sales_commission * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                }
            }
        }
        if (in_array('amazon_fba_delivery_fee', $targets)) {  //FBA代发货费用
            if ($datas['finance_datas_origin'] == '1') {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_fba_delivery_fee'] = "sum( report.byorder_fba_generation_delivery_cost + report.byorder_fbaperorderfulfillmentfee + report.byorder_fbaweightbasedfee - report.byorder_profit)";
                } else {
                    $fields['amazon_fba_delivery_fee'] = "sum( report.byorder_fba_generation_delivery_cost * ({:RATE} / COALESCE(rates.rate ,1))+ report.byorder_fbaperorderfulfillmentfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbaweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)) -report.byorder_profit * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            } elseif ($datas['finance_datas_origin'] == '2') {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_fba_delivery_fee'] = "sum( report.report_fba_generation_delivery_cost + report.report_fbaperorderfulfillmentfee + report.report_fbaweightbasedfee - report.report_profit)";
                } else {
                    $fields['amazon_fba_delivery_fee'] = "sum( report.report_fba_generation_delivery_cost * ({:RATE} / COALESCE(rates.rate ,1))+ report.report_fbaperorderfulfillmentfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbaweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)) - report.report_profit * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }
        }
        if (in_array('amazon_multi_channel_delivery_fee', $targets)) {  //多渠道配送费
            if ($datas['finance_datas_origin'] == '1') {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_multi_channel_delivery_fee'] = "sum( report.byorder_profit ) ";
                } else {
                    $fields['amazon_multi_channel_delivery_fee'] = "sum( report.byorder_profit * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                }
            } elseif ($datas['finance_datas_origin'] == '2') {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_multi_channel_delivery_fee'] = "sum( report.report_profit ) ";
                } else {
                    $fields['amazon_multi_channel_delivery_fee'] = "sum( report.report_profit * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                }
            }
        }
        if (in_array('amazon_settlement_fee', $targets)) {  //结算费
            if ($datas['finance_datas_origin'] == '1') {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_settlement_fee'] = "sum( report.byorder_order_variableclosingfee + report.byorder_fixedclosingfee + report.byorder_refund_variableclosingfee )";
                } else {
                    $fields['amazon_settlement_fee'] = "sum( report.byorder_order_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fixedclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_refund_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            } elseif ($datas['finance_datas_origin'] == '2') {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_settlement_fee'] = "sum( report.report_order_variableclosingfee + report.report_fixedclosingfee + report.report_refund_variableclosingfee )";
                } else {
                    $fields['amazon_settlement_fee'] = "sum( report.report_order_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fixedclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_refund_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }
        }
        if (in_array('amazon_other_fee', $targets)) {  //其他亚马逊费用
            if ($datas['finance_datas_origin'] == '1') {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_other_fee'] = "sum( report.byorder_channel_amazon_other_fee + report.bychannel_channel_amazon_other_fee  + report.bychannel_reserved_field43 {$this->tax_field} ) ";
                } else {
                    $fields['amazon_other_fee'] = "sum( (report.byorder_channel_amazon_other_fee  + report.bychannel_reserved_field43{$this->tax_field}) * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                }
            } elseif ($datas['finance_datas_origin'] == '2') {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_other_fee'] = "sum( report.report_channel_amazon_other_fee+ report.bychannel_reserved_field43 + report.bychannel_channel_amazon_other_fee{$this->tax_field} ) ";
                } else {
                    $fields['amazon_other_fee'] = "sum( (report.report_channel_amazon_other_fee+ report.bychannel_reserved_field43{$this->tax_field}) * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                }
            }
        }
        if (in_array('amazon_return_shipping_fee', $targets)) {  //返还运费
            if ($datas['finance_datas_origin'] == '1') {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_return_shipping_fee'] = "sum( report.byorder_returnshipping )";
                } else {
                    $fields['amazon_return_shipping_fee'] = "sum( report.byorder_returnshipping * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            } elseif ($datas['finance_datas_origin'] == '2') {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_return_shipping_fee'] = "sum( report.report_returnshipping )";
                } else {
                    $fields['amazon_return_shipping_fee'] = "sum( report.report_returnshipping * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }
        }
        if (in_array('amazon_return_sale_commission', $targets)) {  //返还亚马逊销售佣金
            if ($datas['finance_datas_origin'] == '1') {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_return_sale_commission'] = "sum( report.byorder_return_and_return_sales_commission )";
                } else {
                    $fields['amazon_return_sale_commission'] = "sum( report.byorder_return_and_return_sales_commission * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            } elseif ($datas['finance_datas_origin'] == '2') {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_return_sale_commission'] = "sum( report.report_return_and_return_sales_commission )";
                } else {
                    $fields['amazon_return_sale_commission'] = "sum( report.report_return_and_return_sales_commission * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }
        }
        if (in_array('amazon_refund_deducted_commission', $targets)) {  //退款扣除佣金
            if ($datas['finance_datas_origin'] == '1') {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_refund_deducted_commission'] = "sum( report.byorder_return_and_return_commission )";
                } else {
                    $fields['amazon_refund_deducted_commission'] = "sum( report.byorder_return_and_return_commission * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            } elseif ($datas['finance_datas_origin'] == '2') {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_refund_deducted_commission'] = "sum( report.report_return_and_return_commission )";
                } else {
                    $fields['amazon_refund_deducted_commission'] = "sum( report.report_return_and_return_commission * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }
        }
        if (in_array('amazon_fba_return_processing_fee', $targets)) {  //FBA退货处理费
            if ($datas['finance_datas_origin'] == '1') {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_fba_return_processing_fee'] = "sum( report.byorder_fba_refund_treatment_fee + report.byorder_fbacustomerreturnperorderfee+report.byorder_fbacustomerreturnweightbasedfee)";
                } else {
                    $fields['amazon_fba_return_processing_fee'] = "sum( report.byorder_fba_refund_treatment_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbacustomerreturnperorderfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbacustomerreturnweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)))";
                }
            } elseif ($datas['finance_datas_origin'] == '2') {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_fba_return_processing_fee'] = "sum( report.report_fba_refund_treatment_fee + report.report_fbacustomerreturnperorderfee + report.report_fbacustomerreturnweightbasedfee)";
                } else {
                    $fields['amazon_fba_return_processing_fee'] = "sum( report.report_fba_refund_treatment_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbacustomerreturnperorderfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbacustomerreturnweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)))";
                }
            }
        }
        if (in_array('amazon_fba_monthly_storage_fee', $targets)) {  //FBA月仓储费
            if ($datas['finance_datas_origin'] == '1') {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_fba_monthly_storage_fee'] = "sum( report.bychannel_fba_storage_fee )";
                } else {
                    $fields['amazon_fba_monthly_storage_fee'] = "sum( report.bychannel_fba_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            } elseif ($datas['finance_datas_origin'] == '2') {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_fba_monthly_storage_fee'] = "sum( report.bychannel_fba_storage_fee )";
                } else {
                    $fields['amazon_fba_monthly_storage_fee'] = "sum( report.bychannel_fba_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }
        }
        if (in_array('amazon_fee_rate', $targets)) {  //亚马逊费用占比
            $fields['amazon_fee_rate'] = "({$fields['amazon_fee']}) * 1.0000 / nullif({$fields['sale_sales_quota']}, 0) ";
        }


            if (in_array('purchase_logistics_cost_rate', $targets)) {  // 成本/物流费用占比
                $fields['purchase_logistics_cost_rate'] = "({$fields['purchase_logistics_purchase_cost']} + {$fields['purchase_logistics_logistics_cost']}) * 1.0000 / nullif({$fields['sale_sales_quota']}, 0) ";
            }
            if (in_array('operate_fee', $targets) || in_array('operate_fee_rate', $targets)) {  //运营费用
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['operate_fee'] = "sum( report.bychannel_operating_fee ) ";
                } else {
                    $fields['operate_fee'] = "sum( report.bychannel_operating_fee * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                }
            }
            if (in_array('operate_fee_rate', $targets)) {  //运营费用占比
                $fields['operate_fee_rate'] = "({$fields['operate_fee']}) * 1.0000 / nullif({$fields['sale_sales_quota']}, 0)";
            }
            if (in_array('evaluation_fee', $targets) || in_array('evaluation_fee_rate', $targets)) {  //测评费用
                if ($datas['finance_datas_origin'] == '1'){
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['evaluation_fee'] = "sum( report.byorder_reserved_field10 ) ";
                    } else {
                        $fields['evaluation_fee'] = "sum( report.byorder_reserved_field10 * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                    }
                }else{
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['evaluation_fee'] = "sum( report.report_reserved_field10 ) ";
                    } else {
                        $fields['evaluation_fee'] = "sum( report.report_reserved_field10 * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                    }
                }
            }
            if (in_array('evaluation_fee_rate', $targets)) {  //测评费用占比
                $fields['evaluation_fee_rate'] = "({$fields['evaluation_fee']}) * 1.0000 / nullif({$fields['sale_sales_quota']}, 0) ";
            }

            if (in_array('other_vat_fee', $targets)) {//VAT
                if($datas['finance_datas_origin'] == 1){
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['other_vat_fee'] = "SUM(0-report.byorder_reserved_field17)";
                    } else {
                        $fields['other_vat_fee'] = "SUM((0-report.byorder_reserved_field17) * ({:RATE} / COALESCE(rates.rate ,1)))";
                    }
                }else{
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['other_vat_fee'] = "SUM(0-report.report_reserved_field17)";
                    } else {
                        $fields['other_vat_fee'] = "SUM((0-report.report_reserved_field17) * ({:RATE} / COALESCE(rates.rate ,1)))";
                    }
                }

            }

            if (in_array('other_other_fee', $targets)) { //其他
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['other_other_fee'] = "SUM(report.bychannel_loan_payment  + report.bychannel_review_enrollment_fee)";
                } else {
                    $fields['other_other_fee'] = "SUM(report.bychannel_loan_payment  * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_review_enrollment_fee  * ({:RATE} / COALESCE(rates.rate ,1)))";
                }
            }

            if (in_array('other_review_enrollment_fee', $targets)) { //早期评论者计划
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['other_review_enrollment_fee'] = "SUM(report.bychannel_review_enrollment_fee)";
                } else {
                    $fields['other_review_enrollment_fee'] = "SUM(report.bychannel_review_enrollment_fee  * ({:RATE} / COALESCE(rates.rate ,1)))";
                }
            }

            if (in_array('cpc_ad_settlement', $targets)) { //广告结款
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['cpc_ad_settlement'] = "SUM(report.bychannel_product_ads_payment_eventlist_charge + report.bychannel_product_ads_payment_eventlist_refund)";
                } else {
                    $fields['cpc_ad_settlement'] = "SUM(report.bychannel_product_ads_payment_eventlist_charge * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_product_ads_payment_eventlist_refund * ({:RATE} / COALESCE(rates.rate ,1)))";
                }
            }

            if (in_array('cpc_sp_cost', $targets)) {  //CPC_SP花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['cpc_sp_cost'] = " sum( report.byorder_cpc_cost) ";
                } else {
                    $fields['cpc_sp_cost'] = " sum( report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1))) ";
                }
            }
            if (in_array('cpc_sd_cost', $targets)) {  //CPC_SD花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['cpc_sd_cost'] = " sum( report.byorder_cpc_sd_cost) ";
                } else {
                    $fields['cpc_sd_cost'] = " sum( report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1))) ";
                }
            }


            if (in_array('cpc_cost', $targets) || in_array('cpc_cost_rate', $targets) || in_array('cpc_avg_click_cost', $targets) || in_array('cpc_acos', $targets)) {  //CPC花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['cpc_cost'] = " sum( report.byorder_cpc_cost + report.byorder_cpc_sd_cost - COALESCE(report.bychannel_cpc_sb_cost,0) ) ";
                } else {
                    $fields['cpc_cost'] = " sum( report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1)) -  COALESCE(report.bychannel_cpc_sb_cost,0) * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }
            if (in_array('cpc_cost_rate', $targets)) {  //CPC花费占比
                $fields['cpc_cost_rate'] = "({$fields['cpc_cost']}) * 1.0000 / nullif({$fields['sale_sales_quota']}, 0) ";
            }
            if (in_array('cpc_exposure', $targets) || in_array('cpc_click_rate', $targets)) {  //CPC曝光量
                $fields['cpc_exposure'] = "sum( report.byorder_reserved_field1 + report.byorder_reserved_field2 + report.bychannel_reserved_field3)";
            }
            if (in_array('cpc_click_number', $targets) || in_array('cpc_click_rate', $targets) || in_array('cpc_click_conversion_rate', $targets) || in_array('cpc_avg_click_cost', $targets)) {  //CPC点击次数
                $fields['cpc_click_number'] = "sum( report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks + report.bychannel_reserved_field4)";
            }
            if (in_array('cpc_click_rate', $targets)) {  //CPC点击率
                $fields['cpc_click_rate'] = "({$fields['cpc_click_number']}) * 1.0000 / nullif({$fields['cpc_exposure']}, 0) ";
            }
            // 注！此处将字段名用引号包起来是为避免报错，有些数据库会自动将字段大小写转换，会导致报字段不存在的错误
            if (in_array('cpc_order_number', $targets) || in_array('cpc_order_rate', $targets) || in_array('cpc_click_conversion_rate', $targets)) {  //CPC订单数
                $fields['cpc_order_number'] = 'sum( report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" + report.bychannel_reserved_field7 ) ';
            }
            if (in_array('cpc_order_rate', $targets)) {  //cpc订单占比
                $fields['cpc_order_rate'] = "({$fields['cpc_order_number']}) * 1.0000 / nullif(SUM(report.bychannel_sales_volume), 0) ";
            }
            if (in_array('cpc_click_conversion_rate', $targets)) {  //cpc点击转化率
                $fields['cpc_click_conversion_rate'] = "({$fields['cpc_order_number']}) * 1.0000 / nullif({$fields['cpc_click_number']}, 0) ";
            }
            if (in_array('cpc_turnover', $targets) || in_array('cpc_turnover_rate', $targets) || in_array('cpc_acos', $targets)) {  //CPC成交额
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['cpc_turnover'] = 'sum( report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d" + report."bychannel_reserved_field5" )';
                } else {
                    $fields['cpc_turnover'] = 'sum( report."byorder_sp_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1)) + report."byorder_sd_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1)) + report."bychannel_reserved_field5" * ({:RATE} / COALESCE(rates.rate ,1))  )';
                }
            }
            if (in_array('cpc_turnover_rate', $targets)) {  //CPC成交额占比
                $fields['cpc_turnover_rate'] = "({$fields['cpc_turnover']}) * 1.0000 / nullif({$fields['sale_sales_quota']}, 0) ";
            }
            if (in_array('cpc_avg_click_cost', $targets)) {  //CPC平均点击花费
                $fields['cpc_avg_click_cost'] = "({$fields['cpc_cost']}) * 1.0000 / nullif({$fields['cpc_click_number']}, 0) ";
            }
            if (in_array('cpc_acos', $targets)) {  // ACOS
                $fields['cpc_acos'] = "({$fields['cpc_cost']}) * 1.0000 / nullif({$fields['cpc_turnover']}, 0) ";
            }
            if (in_array('cpc_direct_sales_volume', $targets) || in_array('cpc_direct_sales_volume_rate', $targets)) {  //CPC直接销量
                $fields['cpc_direct_sales_volume'] = 'sum( report."byorder_sd_attributedConversions7dSameSKU" + report."byorder_sp_attributedConversions7dSameSKU" + report.bychannel_reserved_field8 )';
            }
            if (in_array('cpc_direct_sales_quota', $targets)) {  //CPC直接销售额
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['cpc_direct_sales_quota'] = 'sum( report."byorder_sd_attributedSales7dSameSKU" + report."byorder_sp_attributedSales7dSameSKU" + report."bychannel_reserved_field6" )';
                } else {
                    $fields['cpc_direct_sales_quota'] = 'sum( report."byorder_sd_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1))  + report."byorder_sp_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1)) + report."bychannel_reserved_field6" * ({:RATE} / COALESCE(rates.rate ,1))  )';
                }
            }
            if (in_array('cpc_direct_sales_volume_rate', $targets)) {  // CPC直接销量占比
                $fields['cpc_direct_sales_volume_rate'] = "({$fields['cpc_direct_sales_volume']}) * 1.0000 / nullif({$fields['sale_sales_volume']}, 0) ";
            }
            if (in_array('cpc_indirect_sales_volume', $targets) || in_array('cpc_indirect_sales_volume_rate', $targets)) {  //CPC间接销量
                $fields['cpc_indirect_sales_volume'] = 'sum( report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" + report.bychannel_reserved_field7 - report."byorder_sd_attributedConversions7dSameSKU" - report."byorder_sp_attributedConversions7dSameSKU" - report.bychannel_reserved_field8) ';
            }
            if (in_array('cpc_indirect_sales_quota', $targets)) {  //CPC间接销售额
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['cpc_indirect_sales_quota'] = 'sum(report."byorder_sd_attributedSales7d" + report."byorder_sp_attributedSales7d" + report.bychannel_reserved_field5 - report."byorder_sd_attributedSales7dSameSKU" - report."byorder_sp_attributedSales7dSameSKU" - report.bychannel_reserved_field6 )';
                } else {
                    $fields['cpc_indirect_sales_quota'] = 'sum(report."byorder_sd_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1))  + report."byorder_sp_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_reserved_field5 * ({:RATE} / COALESCE(rates.rate ,1))  - report."byorder_sd_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1))  - report."byorder_sp_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1)) - report.bychannel_reserved_field6 * ({:RATE} / COALESCE(rates.rate ,1))   )';
                }
            }
            if (in_array('cpc_indirect_sales_volume_rate', $targets)) {  //CPC间接销量占比
                $fields['cpc_indirect_sales_volume_rate'] = "({$fields['cpc_indirect_sales_volume']}) * 1.0000 / nullif({$fields['sale_sales_volume']}, 0) ";
            }

            if (in_array('fba_goods_value', $targets)) {  //在库总成本
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['fba_goods_value'] = '1';
                } else {
                    $fields['fba_goods_value'] = '1';
                }

            }
            if (in_array('fba_stock', $targets)) {  //FBA 库存
                $fields['fba_stock'] = '1';
            }
            if (in_array('fba_sales_volume', $targets)) {  //FBA销量
                if ($datas['sale_datas_origin'] == '1'){
                    $fields['fba_sales_volume'] = 'sum( report.byorder_fba_sales_volume )';
                }else{
                    $fields['fba_sales_volume'] = 'sum( report.report_fba_sales_volume )';
                }

            }
            if (in_array('fba_need_replenish', $targets)) {  //需补货sku
                $fields['fba_need_replenish'] = '1';
            }
            if (in_array('fba_predundancy_number', $targets)) {  //冗余FBA 数
                $fields['fba_predundancy_number'] = '1';
            }

        if (in_array('promote_coupon', $targets)) { //coupon优惠券
            if ($datas['currency_code'] == 'ORIGIN') {
                $fields['promote_coupon'] = 'SUM(report.bychannel_coupon_redemption_fee + report."bychannel_coupon_payment_eventList_tax")';
            } else {
                $fields['promote_coupon'] = 'SUM(report.bychannel_coupon_redemption_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report."bychannel_coupon_payment_eventList_tax" * ({:RATE} / COALESCE(rates.rate ,1))  )';
            }
        }
        if (in_array('promote_run_lightning_deal_fee', $targets)) {  //RunLightningDealFee';
            if ($datas['currency_code'] == 'ORIGIN') {
                $fields['promote_run_lightning_deal_fee'] = 'SUM(report.bychannel_run_lightning_deal_fee)';
            } else {
                $fields['promote_run_lightning_deal_fee'] = 'SUM(report.bychannel_run_lightning_deal_fee * ({:RATE} / COALESCE(rates.rate ,1)) )';
            }
        }
        if (in_array('amazon_order_fee', $targets)) {  //亚马逊-订单费用
            if ($datas['finance_datas_origin'] == '1') {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_order_fee'] = 'SUM(report.byorder_channel_amazon_order_fee + report.bychannel_channel_amazon_order_fee+report.bychannel_reserved_field44)';
                } else {
                    $fields['amazon_order_fee'] = 'SUM((report.byorder_channel_amazon_order_fee+report.bychannel_reserved_field44) * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_order_fee * ({:RATE} / COALESCE(rates.rate ,1)))';
                }
            } else {
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_order_fee'] = 'SUM(report.report_channel_amazon_order_fee +report.bychannel_reserved_field44 + report.bychannel_channel_amazon_order_fee)';
                } else {
                    $fields['amazon_order_fee'] = 'SUM((report.report_channel_amazon_order_fee+report.bychannel_reserved_field44) * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_order_fee * ({:RATE} / COALESCE(rates.rate ,1)))';
                }

                }
            }
            if (in_array('amazon_refund_fee', $targets)) { //亚马逊-退货退款费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_refund_fee'] = 'SUM(report.byorder_channel_amazon_refund_fee + report.bychannel_channel_amazon_refund_fee)';
                    } else {
                        $fields['amazon_refund_fee'] = 'SUM(report.byorder_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1)))';
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_refund_fee'] = 'SUM(report.report_channel_amazon_refund_fee + report.bychannel_channel_amazon_refund_fee)';
                    } else {
                        $fields['amazon_refund_fee'] = 'SUM(report.report_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1)))';
                    }
                }
            }
            if (in_array('amazon_stock_fee', $targets)) { //亚马逊-库存费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_stock_fee'] = 'SUM(report.byorder_channel_amazon_storage_fee + report.bychannel_channel_amazon_storage_fee)';
                    } else {
                        $fields['amazon_stock_fee'] = 'SUM(report.byorder_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)))';
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_stock_fee'] = 'SUM(report.report_channel_amazon_storage_fee + report.bychannel_channel_amazon_storage_fee)';
                    } else {
                        $fields['amazon_stock_fee'] = 'SUM(report.report_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)))';
                    }
                }
            }
            if (in_array('amazon_long_term_storage_fee', $targets)) { //FBA长期仓储费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_long_term_storage_fee'] = 'SUM(report.bychannel_fba_long_term_storage_fee)';
                    } else {
                        $fields['amazon_long_term_storage_fee'] = 'SUM(report.bychannel_fba_long_term_storage_fee  * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_long_term_storage_fee'] = 'SUM(report.bychannel_fba_long_term_storage_fee)';
                    } else {
                        $fields['amazon_long_term_storage_fee'] = 'SUM(report.bychannel_fba_long_term_storage_fee  * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    }
                }
            }
            if (in_array('goods_adjust_fee', $targets)) { //商品调整费用

                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['goods_adjust_fee'] = 'SUM(report.byorder_channel_goods_adjustment_fee + report.bychannel_channel_goods_adjustment_fee)';
                    } else {
                        $fields['goods_adjust_fee'] = 'SUM(report.byorder_channel_goods_adjustment_fee  * ({:RATE} / COALESCE(rates.rate ,1)) +  report.bychannel_channel_goods_adjustment_fee * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['goods_adjust_fee'] = 'SUM(report.report_channel_goods_adjustment_fee + report.bychannel_channel_goods_adjustment_fee)';
                    } else {
                        $fields['goods_adjust_fee'] = 'SUM(report.report_channel_goods_adjustment_fee  * ({:RATE} / COALESCE(rates.rate ,1)) +  report.bychannel_channel_goods_adjustment_fee * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    }
                }

            }

            //店铺月销售额目标
            if (in_array('sale_channel_month_goal', $targets)) {
                $this->countDimensionChannel = true;
                if ($datas['currency_code'] != 'ORIGIN'){
                    $fields['sale_channel_month_goal'] = 'SUM(monthly_profit.reserved_field11 / COALESCE(rates.rate, 1) * {:RATE})';
                }else{
                    $fields['sale_channel_month_goal'] = 'SUM(monthly_profit.reserved_field11)';
                }
            }

            if (in_array('cost_profit_total_income', $targets) || in_array('cost_profit_total_pay', $targets)  ) {  //总收入
                if ($datas['sale_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['cost_profit_total_income'] = "sum( report.byorder_sales_quota + report.channel_fbm_safe_t_claim_demage)";
                    } else {
                        $fields['cost_profit_total_income'] = "sum( report.byorder_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)) + report.channel_fbm_safe_t_claim_demage * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                } elseif ($datas['sale_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['cost_profit_total_income'] = "sum( report.report_sales_quota + report.channel_fbm_safe_t_claim_demage )";
                    } else {
                        $fields['cost_profit_total_income'] = "sum( report.report_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)) +  report.channel_fbm_safe_t_claim_demage * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                }
            }

            if (in_array('cost_profit_total_pay', $targets)) {  //总支出
                $filed2 = " + report.bychannel_product_ads_payment_eventlist_charge + report.bychannel_product_ads_payment_eventlist_refund";//广告结款
                $filed6 = " + report.bychannel_operating_fee";//运营费用
                $filed8 = " + report.bychannel_loan_payment +  report.bychannel_review_enrollment_fee+report.bychannel_reserved_field44 + report.bychannel_reserved_field43";//其他
                if ($datas['finance_datas_origin'] == '1') {
                    $filed1 = "report.byorder_channel_amazon_order_fee + report.byorder_channel_amazon_refund_fee + report.byorder_channel_amazon_storage_fee + report.byorder_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee";//亚马逊费用
                    $filed3 = " - report.byorder_reserved_field17";//VAT
                    $filed4 = " + report.byorder_purchasing_cost";//采购成本
                    $filed5 = " + report.byorder_logistics_head_course";//物流/头程
                    $filed7 = " + report.byorder_reserved_field10";//测评费用
                    $filed9 = " + report.byorder_refund_promote_discount + report.byorder_promote_discount + report.bychannel_coupon_redemption_fee  + report.bychannel_run_lightning_deal_fee";//店铺促销费用
                    $filed10 = " + report.byorder_channel_goods_adjustment_fee + report.bychannel_channel_goods_adjustment_fee";//商品调整
                }else{
                    $filed1 = "report.report_channel_amazon_order_fee + report.report_channel_amazon_refund_fee + report.report_channel_amazon_storage_fee + report.report_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee";//亚马逊费用
                    $filed3 = " - report.report_reserved_field17";//VAT
                    $filed4 = " + report.report_purchasing_cost";//采购成本
                    $filed5 = " + report.report_logistics_head_course";//物流/头程
                    $filed7 = " + report.report_reserved_field10";//测评费用
                    $filed9 = " + report.report_refund_promote_discount + report.report_promote_discount + report.bychannel_coupon_redemption_fee  + report.bychannel_run_lightning_deal_fee";//店铺促销费用
                    $filed10 = " + report.report_channel_goods_adjustment_fee + report.bychannel_channel_goods_adjustment_fee";//商品调整费用
                }
                if ($datas['refund_datas_origin'] == '1') {
                    $filed11 = "  - report.byorder_refund";//退款
                } else {
                    $filed11 = "  - report.report_refund";//退款
                }
                $file_total = $filed1.$filed2.$filed3.$filed4.$filed5.$filed6.$filed7.$filed8.$filed9.$filed10.$filed11.$this->tax_field;
                if ($datas['currency_code'] != 'ORIGIN') {
                    $file_total = str_replace("+"," * ({:RATE} / COALESCE(rates.rate ,1)) +" , $file_total);
                    $file_total = str_replace("-"," * ({:RATE} / COALESCE(rates.rate ,1)) -" , $file_total);
                    $file_total .= " * ({:RATE} / COALESCE(rates.rate ,1))";
                }
                $fields['cost_profit_total_pay'] = "sum({$file_total})";
            }

            if (in_array('repayment_transfer_fail', $targets)) {  //转账失败
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['repayment_transfer_fail'] = "sum( report.bychannel_reserved_field47 )";
                } else {
                    $fields['repayment_transfer_fail'] = "sum( report.bychannel_reserved_field47 * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('repayment_transfer_success', $targets)) {  //转账成功
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['repayment_transfer_success'] = "sum( report.bychannel_reserved_field46 )";
                } else {
                    $fields['repayment_transfer_success'] = "sum( report.bychannel_reserved_field46 * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('repayment_count_settled', $targets)) {  //已结总计
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['repayment_count_settled'] = "sum( report.bychannel_reserved_field48 )";
                } else {
                    $fields['repayment_count_settled'] = "sum( report.bychannel_reserved_field48 * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('buyer_evaluation_bad_feedback', $targets)) {  //店铺的Feedback中差评
                $fields['buyer_evaluation_bad_feedback'] = "sum( report.bychannel_reserved_field49 )";
            }

            if (in_array('cpc_sb_cost', $targets)) {  //sb花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['cpc_sb_cost'] = "sum( 0 - report.bychannel_cpc_sb_cost )";
                } else {
                    $fields['cpc_sb_cost'] = "sum( (0 - report.bychannel_cpc_sb_cost) * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('cpc_sbv_cost', $targets)) {  //sbv花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['cpc_sbv_cost'] = "sum( 0 - report.bychannel_reserved_field45 )";
                } else {
                    $fields['cpc_sbv_cost'] = "sum( (0 - report.bychannel_reserved_field45) * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('amazon_fba_overage_fee', $targets)) {  //库存仓储超量费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_fba_overage_fee'] = "sum( report.bychannel_fba_overage_fee )";
                } else {
                    $fields['amazon_fba_overage_fee'] = "sum( report.bychannel_fba_overage_fee * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('amazon_fba_disposal_fee', $targets)) {  //FBA弃置费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_fba_disposal_fee'] = "sum( report.bychannel_fba_disposal_fee )";
                } else {
                    $fields['amazon_fba_disposal_fee'] = "sum( report.bychannel_fba_disposal_fee * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('amazon_market_vat_principal', $targets)) {  //MarketplaceFacilitatorVAT-Principal
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_cpc_sb_sales_quota' : 'report_cpc_sb_sales_quota';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_market_vat_principal'] = "sum( report.{$tmp_field} )";
                } else {
                    $fields['amazon_market_vat_principal'] = "sum( report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('amazon_market_vat_shipping', $targets)) {  //MarketplaceFacilitatorVAT-Shipping
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_cpc_sb_cost' : 'report_cpc_sb_cost';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_market_vat_shipping'] = "sum( report.{$tmp_field} )";
                } else {
                    $fields['amazon_market_vat_shipping'] = "sum( report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('amazon_market_vat_principal_refund', $targets)) {  //MarketplaceFacilitatorVAT-Principal-refund
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_refund_rate' : 'report_refund_rate';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_market_vat_principal_refund'] = "sum( report.{$tmp_field} )";
                } else {
                    $fields['amazon_market_vat_principal_refund'] = "sum( report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('amazon_market_vat_shipping_refund', $targets)) {  //MarketplaceFacilitatorVAT-Shipping-refund
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_profit_margin' : 'report_profit_margin';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_market_vat_shipping_refund'] = "sum( report.{$tmp_field} )";
                } else {
                    $fields['amazon_market_vat_shipping_refund'] = "sum( report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('sales_evaluation_nums', $targets)) {  //测评销量
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorderitem_evaluation_nums' : 'reportitem_evaluation_nums';
                $fields['sales_evaluation_nums'] = "sum( report.{$tmp_field} )";
            }

            if (in_array('amazon_fba_lost_num', $targets)) {  //仓库丢失赔偿数量
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_lost_num' : 'report_lost_num';
                $fields['amazon_fba_lost_num'] = "sum( report.{$tmp_field} )";
            }

            if (in_array('amazon_fba_damage_num', $targets)) {  //仓库损坏赔偿数量
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_damage_num' : 'report_damage_num';
                $fields['amazon_fba_damage_num'] = "sum( report.{$tmp_field} )";
            }

            $this->getUnTimeFields($fields, $datas, $targets, 2);
        }

        //加入自定义指标
        $fba_target_key = $operation_table_field = [];
        $is_count = !empty($datas['is_count']) ? $datas['is_count'] : 0;
        $datas['list_type'] = 2;//1-商品 2-店铺 fba用的
        $this->getCustomTargetFields($fields,$this->customTargetsList,$targets,$targets_temp, $datas,$fba_target_key,$operation_table_field ,$is_count,$isMysql);
        return ['fields' => $fields,'fba_target_key' => $fba_target_key];
    }

    //按非商品维度,时间展示字段（新增统计维度完成）
    protected function getUnGoodsTimeFields($datas, $timeLine,$isMysql = false)
    {
        $fields = [];
        $fields['user_id'] = 'max(report.user_id)';
        $fields['site_country_id'] = 'max(report.site_id)';
        if ($datas['count_dimension'] == 'channel_id') {
            $fields['site_id'] = 'max(report.site_id)';
            $fields['channel_id'] = 'max(report.channel_id)';
//            $fields['operators'] = 'max(report.operation_user_admin_name)';
            $fields['operation_user_admin_id'] = 'max(channel.operation_user_admin_id)';
        } else if ($datas['count_dimension'] == 'site_id') {
            $fields['site_id'] = 'max(report.site_id)';
        } else if ($datas['count_dimension'] == 'site_group') {
            $fields['site_group'] = 'max(report.area_id)';
        }else if($datas['count_dimension'] == 'department'){
            $fields['user_department_id'] = 'max(dc.user_department_id)';
        }else if($datas['count_dimension'] == 'admin_id'){
            $fields['admin_id'] = 'max(uc.admin_id)';
            $fields['user_admin_id'] = 'max(uc.admin_id)';
        }elseif ($datas['count_dimension'] == 'channel_operators'){
            $fields['operation_user_admin_id'] = 'max(channel.operation_user_admin_id)';
        }

        $target_key = $datas['time_target'];
        $keys = [];
        $new_target_keys = [];
        if($this->timeCustomTarget && $this->timeCustomTarget['target_type'] == 2){
            $time_targets = explode(",",$this->timeCustomTarget['formula_fields']);
            //公式所涉及到的新增指标
            $target_key_str = trim("'" . implode("','",$time_targets) . "'");
            $datas_ark_custom_target_md = new DatasArkCustomTargetMySQLModel([], $this->dbhost, $this->codeno);
            $target_template = $datas['is_new_index'] == 1 ? 1 : 0;
            $new_target = $datas_ark_custom_target_md->getList("user_id = {$datas['user_id']} AND target_type = 1 AND count_dimension IN (1,2) AND target_key IN ($target_key_str) AND target_template = {$target_template}","target_key,month_goods_field,format_type");
            $keys = array_column($new_target,'target_key');
            $new_target_keys = array_column($new_target,null,'target_key');
        }else{
            $time_targets = array($target_key);
        }
        $time_fields = [];
        $time_fields_arr = array();
        foreach ($time_targets as $time_target) {
            if ($datas['is_new_index'] == 1){
                if ($this->timeCustomTarget && $this->timeCustomTarget['target_type'] == 1) {
                    if ($this->timeCustomTarget['count_dimension'] == 3) {
                        $tempField = "monthly_profit." . $this->timeCustomTarget['month_channel_field'];
                    } else {
                        $tempField = "report.monthly_sku_" . $this->timeCustomTarget['month_goods_field'];
                    }
                    //新增指标
                    if ($datas['currency_code'] != 'ORIGIN' && $this->timeCustomTarget['format_type'] == 4) {
                        $fields['count_total'] = "sum({$tempField} / COALESCE(rates.rate, 1) * {:RATE})";
                        $time_fields = $this->getTimeFields($timeLine, "{$tempField} * ({:RATE} / COALESCE(rates.rate ,1))");
                    } else {
                        $fields['count_total'] = "SUM({$tempField})";
                        $time_fields = $this->getTimeFields($timeLine, $tempField);
                    }
                    $fields[$time_target] = $fields['count_total'] ;
                    $time_fields_arr[$time_target] = $time_fields ;
                } elseif (in_array($time_target, $keys)) {
                    if ($this->timeCustomTarget['count_dimension'] == 3) {
                        $tempField = "monthly_profit." . $new_target_keys[$time_target]['month_channel_field'];
                    } else {
                        $tempField = "report.monthly_sku_" . $new_target_keys[$time_target]['month_goods_field'];
                    }
                    //新增指标
                    if ($datas['currency_code'] != 'ORIGIN' && $new_target_keys[$time_target]['format_type'] == 4) {
                        $fields['count_total'] = "sum({$tempField} / COALESCE(rates.rate, 1) * {:RATE})";
                        $time_fields = $this->getTimeFields($timeLine, "{$tempField} * ({:RATE} / COALESCE(rates.rate ,1))");
                    } else {
                        $fields['count_total'] = "SUM({$tempField})";
                        $time_fields = $this->getTimeFields($timeLine, $tempField);
                    }
                    $fields[$time_target] = $fields['count_total'] ;
                    $time_fields_arr[$time_target] = $time_fields ;
                }else{
                    $return_field = $this->handleNewIndexTimeField($datas,$fields,$time_target,2,$isMysql);
                    $fields['count_total'] = $return_field['count_total'];
                    if (!empty($return_field['denominator'])){
                        $time_fields = $this->getTimeFields($timeLine, $return_field['molecule'], $return_field['denominator']);
                    }else{
                        $time_fields = $this->getTimeFields($timeLine, $return_field['molecule']);
                    }
                    $fields[$time_target] = $fields['count_total'] ;
                    $time_fields_arr[$time_target] = $time_fields ;
                }

                continue;
            }
            if ($time_target == 'goods_visitors') {  // 买家访问次数
                $fields['count_total'] = "SUM(report.byorder_user_sessions)";
                $time_fields = $this->getTimeFields($timeLine, 'report.byorder_user_sessions');
            } else if ($time_target == 'goods_conversion_rate') { //订单商品数量转化率
                $fields['count_total'] = "SUM(report.byorder_quantity_of_goods_ordered) * 1.0000 / nullif(sum( report.byorder_user_sessions ) ,0)";
                $time_fields = $this->getTimeFields($timeLine, 'report.byorder_quantity_of_goods_ordered', 'report.byorder_user_sessions');
            } else if ($time_target == 'sale_sales_volume') { //销售量
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['count_total'] = " sum( report.byorder_sales_volume + report.byorder_group_id ) ";
                    $time_fields = $this->getTimeFields($timeLine, "report.byorder_sales_volume + report.byorder_group_id ");
                } elseif ($datas['sale_datas_origin'] == '2') {
                    $fields['count_total'] = " sum( report.report_sales_volume + report.report_group_id) ";
                    $time_fields = $this->getTimeFields($timeLine, "report.report_sales_volume + report.report_group_id");
                }
            } else if ($time_target == 'sale_many_channel_sales_volume') { //多渠道数量
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['count_total'] = "sum( report.byorder_group_id )";
                    $time_fields = $this->getTimeFields($timeLine, "report.byorder_group_id");
                } elseif ($datas['sale_datas_origin'] == '2') {
                    $fields['count_total'] = "sum( report.report_group_id )";
                    $time_fields = $this->getTimeFields($timeLine, "report.report_group_id");
                }
            } else if ($time_target == 'sale_order_number') {//订单数
                $fields['count_total'] = "sum( report.bychannel_sales_volume )";
                $time_fields = $this->getTimeFields($timeLine, "report.bychannel_sales_volume");
            } else if ($time_target == 'sale_sales_quota') {  //商品销售额
                if ($datas['sale_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_sales_quota )";
                        $time_fields = $this->getTimeFields($timeLine, "report.byorder_sales_quota");
                    } else {
                        $fields['count_total'] = "sum( report.byorder_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($timeLine, "report.byorder_sales_quota * ({:RATE} / COALESCE(rates.rate ,1))");
                    }
                } elseif ($datas['sale_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_sales_quota )";
                        $time_fields = $this->getTimeFields($timeLine, "report.report_sales_quota");
                    } else {
                        $fields['count_total'] = "sum( report.report_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($timeLine, "report.report_sales_quota * ({:RATE} / COALESCE(rates.rate ,1))");
                    }
                }
            } else if ($time_target == 'sale_sales_dollars') { //订单金额
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "sum( report.bychannel_sales_quota )";
                    $time_fields = $this->getTimeFields($timeLine, "report.bychannel_sales_quota");
                } else {
                    $fields['count_total'] = "sum( report.bychannel_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    $time_fields = $this->getTimeFields($timeLine, "report.bychannel_sales_quota * ({:RATE} / COALESCE(rates.rate ,1))");
                }
            } else if ($time_target == 'sale_return_goods_number') {  //退款量
                if ($datas['refund_datas_origin'] == '1') {
                    $fields['count_total'] = "sum(report.byorder_refund_num )";
                    $time_fields = $this->getTimeFields($timeLine, "report.byorder_refund_num");
                } elseif ($datas['refund_datas_origin'] == '2') {
                    $fields['count_total'] = "sum(report.report_refund_num )";
                    $time_fields = $this->getTimeFields($timeLine, "report.report_refund_num");
                }
            } else if ($time_target == 'sale_refund') {  //退款
                if ($datas['refund_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( 0 - report.byorder_refund )";
                        $time_fields = $this->getTimeFields($timeLine, " 0 - report.byorder_refund ");
                    } else {
                        $fields['count_total'] = "sum( ( 0 - report.byorder_refund) * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($timeLine, " (0 - report.byorder_refund) * ({:RATE} / COALESCE(rates.rate ,1)) ");
                    }
                } elseif ($datas['refund_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( 0 - report.report_refund )";
                        $time_fields = $this->getTimeFields($timeLine, "(0 - report.report_refund) ");
                    } else {
                        $fields['count_total'] = "sum( (0 - report.report_refund) * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($timeLine, "(0 - report.report_refund) * ({:RATE} / COALESCE(rates.rate ,1)) ");
                    }
                }
            } else if ($time_target == 'sale_refund_rate') {  //退款率
                if ($datas['sale_datas_origin'] == '1') {
                    if ($datas['refund_datas_origin'] == '1') {
                        $fields['count_total'] = "sum(report.byorder_refund_num) * 1.0000 / nullif(SUM((report.byorder_sales_volume + report.byorder_group_id)),0)";
                        $time_fields = $this->getTimeFields($timeLine, "report.byorder_refund_num * 1.0000", "(report.byorder_sales_volume+ report.byorder_group_id)");
                    } elseif ($datas['refund_datas_origin'] == '2') {
                        $fields['count_total'] = "sum(report.report_refund_num) * 1.0000 / nullif(SUM((report.byorder_sales_volume+ report.byorder_group_id)),0)";
                        $time_fields = $this->getTimeFields($timeLine, "report.report_refund_num * 1.0000 ", "(report.byorder_sales_volume+ report.byorder_group_id)");
                    }
                } else {
                    if ($datas['refund_datas_origin'] == '1') {
                        $fields['count_total'] = "sum(report.byorder_refund_num) * 1.0000  / nullif(SUM((report.report_sales_volume+ report.report_group_id)),0)";
                        $time_fields = $this->getTimeFields($timeLine, "report.byorder_refund_num * 1.0000 ", "(report.report_sales_volume+ report.report_group_id)");
                    } elseif ($datas['refund_datas_origin'] == '2') {
                        $fields['count_total'] = "sum(report.report_refund_num) * 1.0000 / nullif(SUM((report.report_sales_volume+ report.report_group_id)),0)";
                        $time_fields = $this->getTimeFields($timeLine, "report.report_refund_num * 1.0000 ", "(report.report_sales_volume+ report.report_group_id)");
                    }
                }
            } else if ($time_target == 'promote_discount') {  //promote折扣
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "SUM(report.byorder_promote_discount)";
                        $time_fields = $this->getTimeFields($timeLine, "report.byorder_promote_discount");
                    } else {
                        $fields['count_total'] = "SUM(report.byorder_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($timeLine, "report.byorder_promote_discount * ({:RATE} / COALESCE(rates.rate ,1))");
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "SUM(report.report_promote_discount)";
                        $time_fields = $this->getTimeFields($timeLine, "report.report_promote_discount");
                    } else {
                        $fields['count_total'] = "SUM(report.report_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($timeLine, "report.report_promote_discount * ({:RATE} / COALESCE(rates.rate ,1))");
                    }
                }
            } else if ($time_target == 'promote_refund_discount') {  //退款返还promote折扣
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "SUM(report.byorder_refund_promote_discount)";
                        $time_fields = $this->getTimeFields($timeLine, "report.report_refund_promote_discount");
                    } else {
                        $fields['count_total'] = "SUM(report.byorder_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($timeLine, "report.byorder_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) ");
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "SUM(report.report_refund_promote_discount)";
                        $time_fields = $this->getTimeFields($timeLine, "report.report_refund_promote_discount");
                    } else {
                        $fields['count_total'] = "SUM(report.report_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($timeLine, "report.report_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1))");
                    }
                }
            } else if ($time_target == 'promote_store_fee') { //店铺促销费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(report.byorder_refund_promote_discount + report.byorder_promote_discount + report.bychannel_coupon_redemption_fee  + report.bychannel_run_lightning_deal_fee)';
                        $time_fields = $this->getTimeFields($timeLine, 'report.byorder_refund_promote_discount + report.byorder_promote_discount + report.bychannel_coupon_redemption_fee +  report.bychannel_run_lightning_deal_fee');
                    } else {
                        $fields['count_total'] = 'SUM(report.byorder_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1))+ report.byorder_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_coupon_redemption_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_run_lightning_deal_fee * ({:RATE} / COALESCE(rates.rate ,1)))';
                        $time_fields = $this->getTimeFields($timeLine, 'report.byorder_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1))+ report.byorder_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_coupon_redemption_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_run_lightning_deal_fee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(report.report_refund_promote_discount + report.report_promote_discount + report.bychannel_coupon_redemption_fee + report.bychannel_run_lightning_deal_fee)';
                        $time_fields = $this->getTimeFields($timeLine, 'report.report_refund_promote_discount + report.report_promote_discount + report.bychannel_coupon_redemption_fee  + report.bychannel_run_lightning_deal_fee');
                    } else {
                        $fields['count_total'] = 'SUM(report.report_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1))+ report.report_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_coupon_redemption_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_run_lightning_deal_fee * ({:RATE} / COALESCE(rates.rate ,1)))';
                        $time_fields = $this->getTimeFields($timeLine, 'report.report_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1))+ report.report_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_coupon_redemption_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_run_lightning_deal_fee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'cost_profit_profit') {  //毛利润
                $repair_data = $this->tax_field." +report.bychannel_reserved_field44 + report.bychannel_reserved_field43 ";
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['sale_datas_origin'] == '2') {
                        $repair_data .= " + report.report_sales_quota - report.byorder_sales_quota  ";
                    }
                    if ($datas['refund_datas_origin'] == '2') {
                        $repair_data .= " + report.byorder_refund - report.report_refund ";
                    }
                } else {
                    if ($datas['sale_datas_origin'] == '1') {
                        $repair_data .= " + report.byorder_sales_quota - report.report_sales_quota  ";
                    }
                    if ($datas['refund_datas_origin'] == '1') {
                        $repair_data .= " + report.report_refund - report.byorder_refund ";
                    }
                }
                if (empty($repair_data)) {
                    if ($datas['finance_datas_origin'] == '1') {
                        if ($datas['currency_code'] == 'ORIGIN') {
                            if ($datas['cost_count_type'] == '1') {
                                $fields['count_total'] = 'SUM(report.byorder_channel_profit + report.bychannel_channel_profit + report.byorder_purchasing_cost + report.byorder_logistics_head_course)';
                                $time_fields = $this->getTimeFields($timeLine, 'report.byorder_channel_profit + report.bychannel_channel_profit + report.byorder_purchasing_cost + report.byorder_logistics_head_course');
                            } else {
                                $fields['count_total'] = 'SUM((report.first_purchasing_cost + report.first_logistics_head_course) + report.byorder_channel_profit + report.bychannel_channel_profit )';
                                $time_fields = $this->getTimeFields($timeLine, '(report.first_purchasing_cost + report.first_logistics_head_course) + report.byorder_channel_profit + report.bychannel_channel_profit');
                            }
                        } else {
                            if ($datas['cost_count_type'] == '1') {
                                $fields['count_total'] = 'SUM(report.byorder_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)))';
                                $time_fields = $this->getTimeFields($timeLine, 'report.byorder_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))');
                            } else {
                                $fields['count_total'] = 'SUM(  (report.first_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))) +  report.byorder_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) )';
                                $time_fields = $this->getTimeFields($timeLine, '  (report.first_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))) +  report.byorder_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1))');
                            }
                        }
                    } else {
                        if ($datas['currency_code'] == 'ORIGIN') {
                            if ($datas['cost_count_type'] == '1') {
                                $fields['count_total'] = 'SUM(report.report_channel_profit + report.bychannel_channel_profit + report.report_purchasing_cost + report.report_logistics_head_course)';
                                $time_fields = $this->getTimeFields($timeLine, 'report.report_channel_profit + report.bychannel_channel_profit + report.report_purchasing_cost + report.report_logistics_head_course');
                            } else {
                                $fields['count_total'] = 'SUM(  (report.first_purchasing_cost + report.first_logistics_head_course) + report.report_channel_profit + report.bychannel_channel_profit )';
                                $time_fields = $this->getTimeFields($timeLine, '  (report.first_purchasing_cost + report.first_logistics_head_course) + report.report_channel_profit + report.bychannel_channel_profit');
                            }
                        } else {
                            if ($datas['cost_count_type'] == '1') {
                                $fields['count_total'] = 'SUM(report.report_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)))';
                                $time_fields = $this->getTimeFields($timeLine, 'report.report_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))');
                            } else {
                                $fields['count_total'] = 'SUM((report.first_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))) + report.report_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1))  )';
                                $time_fields = $this->getTimeFields($timeLine, '(report.first_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))) + report.report_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) ');
                            }
                        }
                    }
                } else {
                    if ($datas['finance_datas_origin'] == '1') {
                        if ($datas['currency_code'] == 'ORIGIN') {
                            if ($datas['cost_count_type'] == '1') {
                                $fields['count_total'] = "SUM(report.byorder_channel_profit + report.bychannel_channel_profit + report.byorder_purchasing_cost + report.byorder_logistics_head_course {$repair_data})";
                                $time_fields = $this->getTimeFields($timeLine, "report.byorder_channel_profit + report.bychannel_channel_profit + report.byorder_purchasing_cost + report.byorder_logistics_head_course {$repair_data}");
                            } else {
                                $fields['count_total'] = "SUM((report.first_purchasing_cost + report.first_logistics_head_course) + report.byorder_channel_profit + report.bychannel_channel_profit {$repair_data})";
                                $time_fields = $this->getTimeFields($timeLine, "(report.first_purchasing_cost + report.first_logistics_head_course {$repair_data}) + report.byorder_channel_profit + report.bychannel_channel_profit");
                            }
                        } else {
                            if ($datas['cost_count_type'] == '1') {
                                $fields['count_total'] = 'SUM((report.byorder_channel_profit' . $repair_data . ') * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)))';
                                $time_fields = $this->getTimeFields($timeLine, '(report.byorder_channel_profit' . $repair_data . ') * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))');
                            } else {
                                $fields['count_total'] = 'SUM(  ((report.first_purchasing_cost' . $repair_data . ') * ({:RATE} / COALESCE(rates.rate ,1)) + report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))) +  report.byorder_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) )';
                                $time_fields = $this->getTimeFields($timeLine, '  ((report.first_purchasing_cost' . $repair_data . ') * ({:RATE} / COALESCE(rates.rate ,1)) + report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))) +  report.byorder_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1))');
                            }
                        }
                    } else {
                        if ($datas['currency_code'] == 'ORIGIN') {
                            if ($datas['cost_count_type'] == '1') {
                                $fields['count_total'] = "SUM(report.report_channel_profit + report.bychannel_channel_profit + report.report_purchasing_cost + report.report_logistics_head_course {$repair_data} )";
                                $time_fields = $this->getTimeFields($timeLine, "report.report_channel_profit + report.bychannel_channel_profit + report.report_purchasing_cost + report.report_logistics_head_course {$repair_data}");
                            } else {
                                $fields['count_total'] = 'SUM(  (report.first_purchasing_cost + report.first_logistics_head_course ' . $repair_data . ') + report.report_channel_profit + report.bychannel_channel_profit )';
                                $time_fields = $this->getTimeFields($timeLine, '  (report.first_purchasing_cost + report.first_logistics_head_course ' . $repair_data . ') + report.report_channel_profit + report.bychannel_channel_profit');
                            }
                        } else {
                            if ($datas['cost_count_type'] == '1') {
                                $fields['count_total'] = 'SUM((report.report_channel_profit' . $repair_data . ') * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)))';
                                $time_fields = $this->getTimeFields($timeLine, '(report.report_channel_profit' . $repair_data . ') * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))');
                            } else {
                                $fields['count_total'] = 'SUM(((report.first_purchasing_cost' . $repair_data . ') * ({:RATE} / COALESCE(rates.rate ,1)) + report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))) + report.report_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1))  )';
                                $time_fields = $this->getTimeFields($timeLine, '((report.first_purchasing_cost' . $repair_data . ') * ({:RATE} / COALESCE(rates.rate ,1)) + report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))) + report.report_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) ');
                            }
                        }
                    }
                }

            } else if ($time_target == 'cost_profit_profit_rate') {  //毛利率
                $repair_data = $this->tax_field." +report.bychannel_reserved_field44 + report.bychannel_reserved_field43 " ;
                $rate_fields = $datas['currency_code'] == 'ORIGIN' ? "" : " * ({:RATE} / COALESCE(rates.rate ,1))";
                if ($datas['sale_datas_origin'] == 1) {
                    if ($datas['finance_datas_origin'] == '1') {
                        if($datas['sale_datas_origin'] == '2'){
                            $repair_data.= " +report.report_sales_quota - report.byorder_sales_quota  " ;
                        }
                        if($datas['refund_datas_origin'] == '2'){
                            $repair_data.= empty($repair_data) ? "  +report.byorder_refund - report.report_refund " : " + report.byorder_refund - report.report_refund " ;
                        }
                        if ($datas['cost_count_type'] == '1') {
                            $fields['count_total'] = '(SUM((report.byorder_channel_profit + report.bychannel_channel_profit + report.byorder_purchasing_cost + report.byorder_logistics_head_course'.$repair_data.") {$rate_fields})) /  nullif( sum(report.byorder_sales_quota {$rate_fields}) , 0 ) ";
                            $time_fields = $this->getTimeFields($timeLine, '(report.byorder_channel_profit + report.bychannel_channel_profit + report.byorder_purchasing_cost + report.byorder_logistics_head_course'.$repair_data . ") {$rate_fields}", 'report.byorder_sales_quota' . $rate_fields);
                        } else {
                            $fields['count_total'] = '(SUM( ((report.first_purchasing_cost + report.first_logistics_head_course) + report.byorder_channel_profit'.$repair_data." + report.bychannel_channel_profit  ) {$rate_fields})) /  nullif( sum(report.byorder_sales_quota {$rate_fields}) , 0 ) ";
                            $time_fields = $this->getTimeFields($timeLine, ' ((report.first_purchasing_cost + report.first_logistics_head_course) + report.byorder_channel_profit + report.bychannel_channel_profit '.$repair_data . ") {$rate_fields}", 'report.byorder_sales_quota' . $rate_fields);
                        }
                    } else {
                        if($datas['sale_datas_origin'] == '1'){
                            $repair_data.= " +report.byorder_sales_quota - report.report_sales_quota  " ;
                        }
                        if($datas['refund_datas_origin'] == '1'){
                            $repair_data.= empty($repair_data) ? "  +report.report_refund - report.byorder_refund " : " + report.report_refund - report.byorder_refund" ;
                        }

                        if ($datas['cost_count_type'] == '1') {
                            $fields['count_total'] = '(SUM((report.report_channel_profit + report.bychannel_channel_profit + report.report_purchasing_cost + report.report_logistics_head_course'.$repair_data.") {$rate_fields})) /  nullif( sum(report.byorder_sales_quota {$rate_fields}) , 0 ) ";
                            $time_fields = $this->getTimeFields($timeLine, '(report.report_channel_profit + report.bychannel_channel_profit + report.report_purchasing_cost + report.report_logistics_head_course'.$repair_data. ") {$rate_fields}", 'report.byorder_sales_quota' . $rate_fields);
                        } else {
                            $fields['count_total'] = '(SUM((( report.first_purchasing_cost + report.first_logistics_head_course) + report.report_channel_profit + report.bychannel_channel_profit  '.$repair_data.") {$rate_fields})) /  nullif( sum(report.byorder_sales_quota {$rate_fields}) , 0 ) ";
                            $time_fields = $this->getTimeFields($timeLine, '(( report.first_purchasing_cost + report.first_logistics_head_course) + report.report_channel_profit + report.bychannel_channel_profit'.$repair_data. ") {$rate_fields}", 'report.byorder_sales_quota' . $rate_fields);
                        }
                    }
                } else {
                    if ($datas['finance_datas_origin'] == '1') {

                        if($datas['sale_datas_origin'] == '2'){
                            $repair_data.= " +report.report_sales_quota - report.byorder_sales_quota  " ;
                        }
                        if($datas['refund_datas_origin'] == '2'){
                            $repair_data.= empty($repair_data) ? "  +report.byorder_refund - report.report_refund " : " + report.byorder_refund - report.report_refund " ;
                        }

                        if ($datas['cost_count_type'] == '1') {
                            $fields['count_total'] = '(SUM((report.byorder_channel_profit + report.bychannel_channel_profit + report.byorder_purchasing_cost + report.byorder_logistics_head_course'.$repair_data.") {$rate_fields})) /  nullif( sum(report.report_sales_quota {$rate_fields}) , 0 ) ";
                            $time_fields = $this->getTimeFields($timeLine, '(report.byorder_channel_profit + report.bychannel_channel_profit + report.byorder_purchasing_cost + report.byorder_logistics_head_course'.$repair_data. ") {$rate_fields}", 'report.report_sales_quota' . $rate_fields);
                        } else {
                            $fields['count_total'] = '(SUM((( report.first_purchasing_cost + report.first_logistics_head_course) +  report.byorder_channel_profit + report.bychannel_channel_profit'.$repair_data.") {$rate_fields})) /  nullif( sum(report.report_sales_quota {$rate_fields}) , 0 ) ";
                            $time_fields = $this->getTimeFields($timeLine, '(( report.first_purchasing_cost + report.first_logistics_head_course) +  report.byorder_channel_profit + report.bychannel_channel_profit'.$repair_data. ") {$rate_fields}", 'report.report_sales_quota' . $rate_fields);
                        }
                    } else {
                        if($datas['sale_datas_origin'] == '1'){
                            $repair_data.= " +report.byorder_sales_quota - report.report_sales_quota  " ;
                        }
                        if($datas['refund_datas_origin'] == '1'){
                            $repair_data.= empty($repair_data) ? "  +report.report_refund - report.byorder_refund " : " + report.report_refund - report.byorder_refund" ;
                        }
                        if ($datas['cost_count_type'] == '1') {
                            $fields['count_total'] = '(SUM((report.report_channel_profit '.$repair_data."+ report.bychannel_channel_profit + report.report_purchasing_cost + report.report_logistics_head_course) {$rate_fields})) /  nullif( sum(report.report_sales_quota {$rate_fields}) , 0 ) ";
                            $time_fields = $this->getTimeFields($timeLine, '(report.report_channel_profit'.$repair_data." + report.bychannel_channel_profit + report.report_purchasing_cost + report.report_logistics_head_course) {$rate_fields}", 'report.report_sales_quota'. $rate_fields);
                        } else {
                            $fields['count_total'] = '(SUM( ( (report.first_purchasing_cost + report.first_logistics_head_course) +  report.report_channel_profit + report.bychannel_channel_profit'.$repair_data.") {$rate_fields})) /  nullif( sum(report.report_sales_quota {$rate_fields}) , 0 ) ";
                            $time_fields = $this->getTimeFields($timeLine, '( (report.first_purchasing_cost + report.first_logistics_head_course) +  report.report_channel_profit + report.bychannel_channel_profit'.$repair_data. ") {$rate_fields}", 'report.report_sales_quota'. $rate_fields);
                        }
                    }
                }

            } else if ($time_target == 'amazon_fee') {  //亚马逊费用
                $other_field_tmp = "+report.bychannel_reserved_field44 + report.bychannel_reserved_field43";
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(report.byorder_channel_amazon_order_fee'.$other_field_tmp.$this->tax_field.' + report.byorder_channel_amazon_refund_fee + report.byorder_channel_amazon_storage_fee + report.byorder_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee)';
                        $time_fields = $this->getTimeFields($timeLine, 'report.byorder_channel_amazon_order_fee'.$other_field_tmp.$this->tax_field.' + report.byorder_channel_amazon_refund_fee + report.byorder_channel_amazon_storage_fee + report.byorder_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee');
                    } else {
                        $fields['count_total'] = 'SUM((report.byorder_channel_amazon_order_fee'.$other_field_tmp.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1))  + report.byorder_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.byorder_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.byorder_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_order_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1))) ';
                        $time_fields = $this->getTimeFields($timeLine, '(report.byorder_channel_amazon_order_fee'.$other_field_tmp.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1))  + report.byorder_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.byorder_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.byorder_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_order_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(report.report_channel_amazon_order_fee'.$other_field_tmp.$this->tax_field.' + report.report_channel_amazon_refund_fee + report.report_channel_amazon_storage_fee + report.report_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee)';
                        $time_fields = $this->getTimeFields($timeLine, 'report.report_channel_amazon_order_fee'.$other_field_tmp.$this->tax_field.' + report.report_channel_amazon_refund_fee + report.report_channel_amazon_storage_fee + report.report_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee');
                    } else {
                        $fields['count_total'] = 'SUM((report.report_channel_amazon_order_fee'.$other_field_tmp.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1))  + report.report_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.report_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.report_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_order_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1)))';
                        $time_fields = $this->getTimeFields($timeLine, '(report.report_channel_amazon_order_fee'.$other_field_tmp.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1))  + report.report_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.report_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.report_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_order_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'amazon_sales_commission') {  //亚马逊销售佣金
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_platform_sales_commission ) ";
                        $time_fields = $this->getTimeFields($timeLine, 'report.byorder_platform_sales_commission');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_platform_sales_commission * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($timeLine, 'report.byorder_platform_sales_commission * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_platform_sales_commission ) ";
                        $time_fields = $this->getTimeFields($timeLine, 'report.report_platform_sales_commission');
                    } else {
                        $fields['count_total'] = "sum( report.report_platform_sales_commission * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($timeLine, 'report.report_platform_sales_commission * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'amazon_fba_delivery_fee') {  //FBA代发货费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_fba_generation_delivery_cost + report.byorder_fbaperorderfulfillmentfee + report.byorder_fbaweightbasedfee - report.byorder_profit)";
                        $time_fields = $this->getTimeFields($timeLine, 'report.byorder_fba_generation_delivery_cost + report.byorder_fbaperorderfulfillmentfee + report.byorder_fbaweightbasedfee - report.byorder_profit');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_fba_generation_delivery_cost * ({:RATE} / COALESCE(rates.rate ,1))+ report.byorder_fbaperorderfulfillmentfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbaweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)) -report.byorder_profit * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($timeLine, 'report.byorder_fba_generation_delivery_cost * ({:RATE} / COALESCE(rates.rate ,1))+ report.byorder_fbaperorderfulfillmentfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbaweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)) -report.byorder_profit * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_fba_generation_delivery_cost + report.report_fbaperorderfulfillmentfee + report.report_fbaweightbasedfee - report.report_profit)";
                        $time_fields = $this->getTimeFields($timeLine, ' report.report_fba_generation_delivery_cost + report.report_fbaperorderfulfillmentfee + report.report_fbaweightbasedfee - report.report_profit');
                    } else {
                        $fields['count_total'] = "sum( report.report_fba_generation_delivery_cost * ({:RATE} / COALESCE(rates.rate ,1))+ report.report_fbaperorderfulfillmentfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbaweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)) - report.report_profit * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($timeLine, 'report.report_fba_generation_delivery_cost * ({:RATE} / COALESCE(rates.rate ,1))+ report.report_fbaperorderfulfillmentfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbaweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)) - report.report_profit * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'amazon_multi_channel_delivery_fee') {  //多渠道配送费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_profit ) ";
                        $time_fields = $this->getTimeFields($timeLine, ' report.byorder_profit');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_profit * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($timeLine, 'report.byorder_profit * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_profit ) ";
                        $time_fields = $this->getTimeFields($timeLine, ' report.report_profit');
                    } else {
                        $fields['count_total'] = "sum( report.report_profit * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($timeLine, 'report.report_profit * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'amazon_settlement_fee') {  //结算费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_order_variableclosingfee + report.byorder_fixedclosingfee + report.byorder_refund_variableclosingfee )";
                        $time_fields = $this->getTimeFields($timeLine, ' report.byorder_order_variableclosingfee + report.byorder_fixedclosingfee + report.byorder_refund_variableclosingfee');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_order_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fixedclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_refund_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($timeLine, 'report.byorder_order_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fixedclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_refund_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) ');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_order_variableclosingfee + report.report_fixedclosingfee + report.report_refund_variableclosingfee )";
                        $time_fields = $this->getTimeFields($timeLine, ' report.report_order_variableclosingfee + report.report_fixedclosingfee + report.report_refund_variableclosingfee');
                    } else {
                        $fields['count_total'] = "sum( report.report_order_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fixedclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_refund_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($timeLine, ' report.report_order_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fixedclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_refund_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }

            } else if ($time_target == 'amazon_other_fee') {  //其他亚马逊费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_channel_amazon_other_fee + report.bychannel_channel_amazon_other_fee+ report.bychannel_reserved_field43{$this->tax_field}) ";
                        $time_fields = $this->getTimeFields($timeLine, 'report.byorder_channel_amazon_other_fee + report.bychannel_channel_amazon_other_fee+ report.bychannel_reserved_field43'.$this->tax_field);
                    } else {
                        $fields['count_total'] = "sum( (report.byorder_channel_amazon_other_fee+ report.bychannel_reserved_field43{$this->tax_field}) * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($timeLine, '(report.byorder_channel_amazon_other_fee+ report.bychannel_reserved_field43'.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_channel_amazon_other_fee + report.bychannel_channel_amazon_other_fee+ report.bychannel_reserved_field43{$this->tax_field}) ";
                        $time_fields = $this->getTimeFields($timeLine, 'report.report_channel_amazon_other_fee + report.bychannel_channel_amazon_other_fee+ report.bychannel_reserved_field43'.$this->tax_field);
                    } else {
                        $fields['count_total'] = "sum( (report.report_channel_amazon_other_fee+ report.bychannel_reserved_field43'.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($timeLine, '(report.report_channel_amazon_other_fee+ report.bychannel_reserved_field43'.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'amazon_return_shipping_fee') {  //返还运费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_returnshipping )";
                        $time_fields = $this->getTimeFields($timeLine, 'report.byorder_returnshipping ');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_returnshipping * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($timeLine, ' report.byorder_returnshipping * ({:RATE} / COALESCE(rates.rate ,1)) ');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_returnshipping )";
                        $time_fields = $this->getTimeFields($timeLine, 'report.report_returnshipping ');
                    } else {
                        $fields['count_total'] = "sum( report.report_returnshipping * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($timeLine, ' report.report_returnshipping * ({:RATE} / COALESCE(rates.rate ,1)) ');
                    }
                }
            } else if ($time_target == 'amazon_return_sale_commission') {  //返还亚马逊销售佣金
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_return_and_return_sales_commission )";
                        $time_fields = $this->getTimeFields($timeLine, 'report.byorder_return_and_return_sales_commission');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_return_and_return_sales_commission * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($timeLine, ' report.byorder_return_and_return_sales_commission * ({:RATE} / COALESCE(rates.rate ,1)) ');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_return_and_return_sales_commission )";
                        $time_fields = $this->getTimeFields($timeLine, 'report.report_return_and_return_sales_commission');
                    } else {
                        $fields['count_total'] = "sum( report.report_return_and_return_sales_commission * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($timeLine, 'report.report_return_and_return_sales_commission * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'amazon_refund_deducted_commission') {  //退款扣除佣金
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_return_and_return_commission )";
                        $time_fields = $this->getTimeFields($timeLine, 'report.byorder_return_and_return_commission');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_return_and_return_commission * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($timeLine, 'report.byorder_return_and_return_commission * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_return_and_return_commission )";
                        $time_fields = $this->getTimeFields($timeLine, 'report.report_return_and_return_commission');
                    } else {
                        $fields['count_total'] = "sum( report.report_return_and_return_commission * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($timeLine, 'report.report_return_and_return_commission * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'amazon_fba_return_processing_fee') {  //FBA退货处理费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_fba_refund_treatment_fee + report.byorder_fbacustomerreturnperorderfee+report.byorder_fbacustomerreturnweightbasedfee)";
                        $time_fields = $this->getTimeFields($timeLine, 'report.byorder_fba_refund_treatment_fee + report.byorder_fbacustomerreturnperorderfee+report.byorder_fbacustomerreturnweightbasedfee');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_fba_refund_treatment_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbacustomerreturnperorderfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbacustomerreturnweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)))";
                        $time_fields = $this->getTimeFields($timeLine, 'report.byorder_fba_refund_treatment_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbacustomerreturnperorderfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbacustomerreturnweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_fba_refund_treatment_fee + report.report_fbacustomerreturnperorderfee + report.report_fbacustomerreturnweightbasedfee)";
                        $time_fields = $this->getTimeFields($timeLine, 'report.report_fba_refund_treatment_fee + report.report_fbacustomerreturnperorderfee + report.report_fbacustomerreturnweightbasedfee');
                    } else {
                        $fields['count_total'] = "sum( report.report_fba_refund_treatment_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbacustomerreturnperorderfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbacustomerreturnweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)))";
                        $time_fields = $this->getTimeFields($timeLine, 'report.report_fba_refund_treatment_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbacustomerreturnperorderfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbacustomerreturnweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'amazon_fba_monthly_storage_fee') {  //FBA月仓储费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.bychannel_fba_storage_fee )";
                        $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_fba_storage_fee');
                    } else {
                        $fields['count_total'] = "sum( report.bychannel_fba_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_fba_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.bychannel_fba_storage_fee )";
                        $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_fba_storage_fee');
                    } else {
                        $fields['count_total'] = "sum( report.bychannel_fba_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_fba_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)) ');
                    }
                }
            } else if ($time_target == 'amazon_fee_rate') {  //亚马逊费用占比
                $rate_fields = $datas['currency_code'] == 'ORIGIN' ? " * 1.0000" : " * ({:RATE} / COALESCE(rates.rate ,1))";

                $other_field_tmp = "+report.bychannel_reserved_field44 + report.bychannel_reserved_field43";

                if ($datas['sale_datas_origin'] == 1) {
                    if ($datas['finance_datas_origin'] == '1') {
                        $fields['count_total'] = "SUM((report.byorder_channel_amazon_order_fee {$other_field_tmp}$this->tax_field + report.byorder_channel_amazon_refund_fee + report.byorder_channel_amazon_storage_fee + report.byorder_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee) {$rate_fields}) /  nullif( sum(report.byorder_sales_quota {$rate_fields}) , 0 ) ";
                        $time_fields = $this->getTimeFields($timeLine, '(report.byorder_channel_amazon_order_fee + report.byorder_channel_amazon_refund_fee + report.byorder_channel_amazon_storage_fee + report.byorder_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee'.$other_field_tmp.$this->tax_field.')' . $rate_fields , 'report.byorder_sales_quota' . $rate_fields);

                    } elseif ($datas['finance_datas_origin'] == '2') {
                        $fields['count_total'] = "SUM((report.report_channel_amazon_order_fee {$other_field_tmp}$this->tax_field + report.report_channel_amazon_refund_fee + report.report_channel_amazon_storage_fee + report.report_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee) {$rate_fields}) /  nullif( sum(report.byorder_sales_quota {$rate_fields}) , 0 ) ";
                        $time_fields = $this->getTimeFields($timeLine, '(report.report_channel_amazon_order_fee + report.report_channel_amazon_refund_fee + report.report_channel_amazon_storage_fee + report.report_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee'.$other_field_tmp.$this->tax_field.')' . $rate_fields, 'report.byorder_sales_quota' . $rate_fields);
                    }
                } else {
                    if ($datas['finance_datas_origin'] == '1') {
                        $fields['count_total'] = "SUM((report.byorder_channel_amazon_order_fee{$other_field_tmp} $this->tax_field + report.byorder_channel_amazon_refund_fee + report.byorder_channel_amazon_storage_fee + report.byorder_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee) {$rate_fields}) /  nullif( sum(report.report_sales_quota {$rate_fields}) , 0 ) ";
                        $time_fields = $this->getTimeFields($timeLine, '(report.byorder_channel_amazon_order_fee + report.byorder_channel_amazon_refund_fee + report.byorder_channel_amazon_storage_fee + report.byorder_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee'.$other_field_tmp.$this->tax_field.')' . $rate_fields, 'report.report_sales_quota' . $rate_fields);

                    } elseif ($datas['finance_datas_origin'] == '2') {
                        $fields['count_total'] = "SUM((report.report_channel_amazon_order_fee{$other_field_tmp} $this->tax_field + report.report_channel_amazon_refund_fee + report.report_channel_amazon_storage_fee + report.report_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee) {$rate_fields}) /  nullif( sum(report.report_sales_quota {$rate_fields}) , 0 ) ";
                        $time_fields = $this->getTimeFields($timeLine, '(report.report_channel_amazon_order_fee + report.report_channel_amazon_refund_fee + report.report_channel_amazon_storage_fee + report.report_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee'.$other_field_tmp.$this->tax_field.')' . $rate_fields, 'report.report_sales_quota' . $rate_fields);
                    }
                }
            } else if ($time_target == 'purchase_logistics_purchase_cost') {  //采购成本
                if ($datas['cost_count_type'] == '1') {
                    if ($datas['finance_datas_origin'] == 1) {
                        if ($datas['currency_code'] == 'ORIGIN') {
                            $fields['count_total'] = " sum( report.byorder_purchasing_cost ) ";
                            $time_fields = $this->getTimeFields($timeLine, 'report.byorder_purchasing_cost');
                        } else {
                            $fields['count_total'] = " sum( report.byorder_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                            $time_fields = $this->getTimeFields($timeLine, ' report.byorder_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) ');
                        }
                    } else {
                        if ($datas['currency_code'] == 'ORIGIN') {
                            $fields['count_total'] = " sum( report.report_purchasing_cost ) ";
                            $time_fields = $this->getTimeFields($timeLine, 'report.report_purchasing_cost');
                        } else {
                            $fields['count_total'] = " sum( report.report_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                            $time_fields = $this->getTimeFields($timeLine, ' report.report_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) ');
                        }
                    }

                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = " sum(( report.first_purchasing_cost )) ";
                        $time_fields = $this->getTimeFields($timeLine, '(report.first_purchasing_cost)');
                    } else {
                        $fields['count_total'] = " sum( (report.first_purchasing_cost / COALESCE(rates.rate ,1)) * {:RATE} ) ";
                        $time_fields = $this->getTimeFields($timeLine, ' (report.first_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1))) ');
                    }
                }
            } else if ($time_target == 'purchase_logistics_logistics_cost') {  // 物流/头程
                if ($datas['cost_count_type'] == '1') {
                    if ($datas['finance_datas_origin'] == 1) {
                        if ($datas['currency_code'] == 'ORIGIN') {
                            $fields['count_total'] = " sum( report.byorder_logistics_head_course ) ";
                            $time_fields = $this->getTimeFields($timeLine, ' report.byorder_logistics_head_course');
                        } else {
                            $fields['count_total'] = " sum( report.byorder_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                            $time_fields = $this->getTimeFields($timeLine, 'report.byorder_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))');
                        }
                    } else {
                        if ($datas['currency_code'] == 'ORIGIN') {
                            $fields['count_total'] = " sum( report.report_logistics_head_course ) ";
                            $time_fields = $this->getTimeFields($timeLine, ' report.report_logistics_head_course');
                        } else {
                            $fields['count_total'] = " sum( report.report_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                            $time_fields = $this->getTimeFields($timeLine, 'report.report_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))');
                        }
                    }

                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = " sum( (report.first_logistics_head_course) ) ";
                        $time_fields = $this->getTimeFields($timeLine, ' (report.first_logistics_head_course)');
                    } else {
                        $fields['count_total'] = " sum( (report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))) ) ";
                        $time_fields = $this->getTimeFields($timeLine, '(report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)))');
                    }
                }
            } else if ($time_target == 'purchase_logistics_cost_rate') {  // 成本/物流费用占比
                $rate_fields = $datas['currency_code'] == 'ORIGIN' ? " * 1.0000" : " * ({:RATE} / COALESCE(rates.rate ,1))";
                if ($datas['sale_datas_origin'] == 1) {
                    if ($datas['cost_count_type'] == '1') {
                        if ($datas['finance_datas_origin'] == '1') {
                            $fields['count_total'] = " sum( (report.byorder_logistics_head_course + report.byorder_purchasing_cost) {$rate_fields} ) * 1.0000 / nullif(sum( report.byorder_sales_quota {$rate_fields} ),0)  ";
                            $time_fields = $this->getTimeFields($timeLine, ' (report.byorder_logistics_head_course  + report.byorder_purchasing_cost)  ' . $rate_fields, 'report.byorder_sales_quota' . $rate_fields);
                        } else {
                            $fields['count_total'] = " sum( (report.report_logistics_head_course + report.report_purchasing_cost) {$rate_fields}  )* 1.0000 / nullif(sum( report.byorder_sales_quota {$rate_fields} ),0)  ";
                            $time_fields = $this->getTimeFields($timeLine, ' (report.report_logistics_head_course + report.report_purchasing_cost)' . $rate_fields, 'report.byorder_sales_quota' . $rate_fields);
                        }
                    } else {
                        $fields['count_total'] = " sum( (report.first_logistics_head_course + report.first_purchasing_cost) {$rate_fields} ) * 1.0000 / nullif(sum( report.byorder_sales_quota {$rate_fields} ),0)  ";
                        $time_fields = $this->getTimeFields($timeLine, ' (report.first_logistics_head_course + report.first_purchasing_cost)' . $rate_fields, 'report.byorder_sales_quota' . $rate_fields);
                    }
                } else {
                    if ($datas['cost_count_type'] == '1') {
                        if ($datas['finance_datas_origin'] == '1') {
                            $fields['count_total'] = " sum( (report.byorder_logistics_head_course + report.byorder_purchasing_cost) {$rate_fields} ) * 1.0000 / nullif(sum( report.report_sales_quota {$rate_fields} ),0)  ";
                            $time_fields = $this->getTimeFields($timeLine, ' (report.byorder_logistics_head_course  + report.byorder_purchasing_cost) ' . $rate_fields, 'report.report_sales_quota' . $rate_fields);
                        } else {
                            $fields['count_total'] = " sum( (report.report_logistics_head_course + report.report_purchasing_cost) {$rate_fields}  )* 1.0000 / nullif(sum( report.report_sales_quota {$rate_fields} ),0)  ";
                            $time_fields = $this->getTimeFields($timeLine, ' (report.report_logistics_head_course + report.report_purchasing_cost)' . $rate_fields, 'report.report_sales_quota' . $rate_fields);
                        }
                    } else {
                        $fields['count_total'] = " sum( (report.first_logistics_head_course + report.first_purchasing_cost) {$rate_fields}) * 1.0000 / nullif(sum( report.report_sales_quota {$rate_fields} ),0)  ";
                        $time_fields = $this->getTimeFields($timeLine, ' (report.first_logistics_head_course + report.first_purchasing_cost)' . $rate_fields, 'report.report_sales_quota' . $rate_fields);
                    }
                }
            } else if ($time_target == 'operate_fee') {  //运营费用
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "sum( report.bychannel_operating_fee ) ";
                    $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_operating_fee');
                } else {
                    $fields['count_total'] = "sum( report.bychannel_operating_fee * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                    $time_fields = $this->getTimeFields($timeLine, ' report.bychannel_operating_fee * ({:RATE} / COALESCE(rates.rate ,1)) ');
                }
            } else if ($time_target == 'operate_fee_rate') {  //运营费用占比
                $rate_fields = $datas['currency_code'] == 'ORIGIN' ? " * 1.0000" : " * ({:RATE} / COALESCE(rates.rate ,1))";
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['count_total'] = "SUM(report.bychannel_operating_fee {$rate_fields}) /nullif(SUM(report.byorder_sales_quota {$rate_fields}),0)";
                    $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_operating_fee' . $rate_fields, 'report.byorder_sales_quota' . $rate_fields);
                } else {
                    $fields['count_total'] = "SUM(report.bychannel_operating_fee {$rate_fields}) /nullif(SUM(report.report_sales_quota {$rate_fields}),0)";
                    $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_operating_fee' . $rate_fields, 'report.report_sales_quota' . $rate_fields);
                }
            } else if ($time_target == 'evaluation_fee') {  //测评费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_reserved_field10 ) ";
                        $time_fields = $this->getTimeFields($timeLine, 'report.byorder_reserved_field10');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_reserved_field10 * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($timeLine, ' report.byorder_reserved_field10 * ({:RATE} / COALESCE(rates.rate ,1)) ');
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_reserved_field10 ) ";
                        $time_fields = $this->getTimeFields($timeLine, 'report.report_reserved_field10');
                    } else {
                        $fields['count_total'] = "sum( report.report_reserved_field10 * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($timeLine, ' report.report_reserved_field10 * ({:RATE} / COALESCE(rates.rate ,1)) ');
                    }
                }
            } else if ($time_target == 'evaluation_fee_rate') {  //测评费用占比
                $rate_fields = $datas['currency_code'] == 'ORIGIN' ? " * 1.0000" : " * ({:RATE} / COALESCE(rates.rate ,1))";
                if ($datas['sale_datas_origin'] == '1') {
                    if ($datas['finance_datas_origin'] == '1') {
                        $fields['count_total'] = "SUM(report.byorder_reserved_field10 {$rate_fields} ) /nullif(SUM(report.byorder_sales_quota {$rate_fields}),0)";
                        $time_fields = $this->getTimeFields($timeLine, 'report.byorder_reserved_field10' . $rate_fields, 'report.byorder_sales_quota' . $rate_fields);
                    } else {
                        $fields['count_total'] = "SUM(report.report_reserved_field10 {$rate_fields}) /nullif(SUM(report.byorder_sales_quota {$rate_fields}),0)";
                        $time_fields = $this->getTimeFields($timeLine, 'report.report_reserved_field10' . $rate_fields, 'report.byorder_sales_quota' . $rate_fields);
                    }

                } else {
                    if ($datas['finance_datas_origin'] == '1') {
                        $fields['count_total'] = "SUM(report.byorder_reserved_field10 {$rate_fields} ) /nullif(SUM(report.report_sales_quota {$rate_fields}),0)";
                        $time_fields = $this->getTimeFields($timeLine, 'report.byorder_reserved_field10' . $rate_fields, 'report.report_sales_quota' . $rate_fields);
                    } else {
                        $fields['count_total'] = "SUM(report.report_reserved_field10 {$rate_fields} ) /nullif(SUM(report.report_sales_quota {$rate_fields}),0)";
                        $time_fields = $this->getTimeFields($timeLine, 'report.report_reserved_field10' . $rate_fields, 'report.report_sales_quota' . $rate_fields);
                    }
                }
            } else if ($time_target == 'other_vat_fee') {//VAT
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "SUM(0-report.byorder_reserved_field17)";
                        $time_fields = $this->getTimeFields($timeLine, '0-report.byorder_reserved_field17');
                    } else {
                        $fields['count_total'] = "SUM((0-report.byorder_reserved_field17) * ({:RATE} / COALESCE(rates.rate ,1)))";
                        $time_fields = $this->getTimeFields($timeLine, '(0-report.byorder_reserved_field17) * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "SUM(0-report.report_reserved_field17)";
                        $time_fields = $this->getTimeFields($timeLine, '0-report.report_reserved_field17');
                    } else {
                        $fields['count_total'] = "SUM((0-report.report_reserved_field17) * ({:RATE} / COALESCE(rates.rate ,1)))";
                        $time_fields = $this->getTimeFields($timeLine, '(0-report.report_reserved_field17 )* ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }

            } else if ($time_target == 'other_other_fee') { //其他
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.bychannel_loan_payment +  report.bychannel_review_enrollment_fee)";
                    $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_loan_payment + report.bychannel_review_enrollment_fee');
                } else {
                    $fields['count_total'] = "SUM(report.bychannel_loan_payment * ({:RATE} / COALESCE(rates.rate ,1)) +  report.bychannel_review_enrollment_fee * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_loan_payment * ({:RATE} / COALESCE(rates.rate ,1)) +  report.bychannel_review_enrollment_fee * ({:RATE} / COALESCE(rates.rate ,1))');
                }
            } else if ($time_target == 'other_review_enrollment_fee') { //早期评论者计划
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.bychannel_review_enrollment_fee)";
                    $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_review_enrollment_fee');
                } else {
                    $fields['count_total'] = "SUM(report.bychannel_review_enrollment_fee * ({:RATE} / COALESCE(rates.rate ,1))  )";
                    $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_review_enrollment_fee * ({:RATE} / COALESCE(rates.rate ,1))');
                }
            } else if ($time_target == 'cpc_ad_settlement') { //广告结款
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.bychannel_product_ads_payment_eventlist_charge + report.bychannel_product_ads_payment_eventlist_refund)";
                    $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_product_ads_payment_eventlist_charge + report.bychannel_product_ads_payment_eventlist_refund ');
                } else {
                    $fields['count_total'] = "SUM(report.bychannel_product_ads_payment_eventlist_charge * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_product_ads_payment_eventlist_refund * ({:RATE} / COALESCE(rates.rate ,1)))";
                    $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_product_ads_payment_eventlist_charge * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_product_ads_payment_eventlist_refund * ({:RATE} / COALESCE(rates.rate ,1)) ');
                }
            } else if ($time_target == 'cpc_sp_cost') {  //CPC SP 花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = " sum( report.byorder_cpc_cost  ) ";
                    $time_fields = $this->getTimeFields($timeLine, ' report.byorder_cpc_cost ');
                } else {
                    $fields['count_total'] = " sum( report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                    $time_fields = $this->getTimeFields($timeLine, ' report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1)) ');
                }
            } else if ($time_target == 'cpc_sp_cost') {  //CPC SD 花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = " sum( report.byorder_cpc_sd_cost  ) ";
                    $time_fields = $this->getTimeFields($timeLine, ' report.byorder_cpc_sd_cost ');
                } else {
                    $fields['count_total'] = " sum( report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                    $time_fields = $this->getTimeFields($timeLine, ' report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1)) ');
                }
            } else if ($time_target == 'cpc_cost') {  //CPC花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = " sum( report.byorder_cpc_cost + report.byorder_cpc_sd_cost - COALESCE(report.bychannel_cpc_sb_cost,0) ) ";
                    $time_fields = $this->getTimeFields($timeLine, ' report.byorder_cpc_cost + report.byorder_cpc_sd_cost - COALESCE(report.bychannel_cpc_sb_cost,0)');
                } else {
                    $fields['count_total'] = " sum( report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1)) -  COALESCE(report.bychannel_cpc_sb_cost,0) * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                    $time_fields = $this->getTimeFields($timeLine, ' report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1)) -  COALESCE(report.bychannel_cpc_sb_cost,0) * ({:RATE} / COALESCE(rates.rate ,1)) ');
                }
            } else if ($time_target == 'cpc_cost_rate') {  //CPC花费占比
                $sale_denominator = "report.byorder_sales_quota";
                if ($datas['sale_datas_origin'] == '2') {
                    $sale_denominator = "report.report_sales_quota";
                }

                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = " sum( report.byorder_cpc_cost + report.byorder_cpc_sd_cost - COALESCE(report.bychannel_cpc_sb_cost,0) )  * 1.0000 / nullif( sum({$sale_denominator} ) , 0 )";
                    $time_fields = $this->getTimeFields($timeLine, ' report.byorder_cpc_cost + report.byorder_cpc_sd_cost - COALESCE(report.bychannel_cpc_sb_cost,0)', $sale_denominator);
                } else {
                    $fields['count_total'] = " sum( report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1)) -  COALESCE(report.bychannel_cpc_sb_cost,0) * ({:RATE} / COALESCE(rates.rate ,1)) )  * 1.0000 / nullif( sum({$sale_denominator} * ({:RATE} / COALESCE(rates.rate ,1)) ) , 0 ) ";
                    $time_fields = $this->getTimeFields($timeLine, ' report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1)) -  COALESCE(report.bychannel_cpc_sb_cost,0) * ({:RATE} / COALESCE(rates.rate ,1))  ', $sale_denominator.' * ({:RATE} / COALESCE(rates.rate ,1))');
                }
            } else if ($time_target == 'cpc_exposure') {  //CPC曝光量
                $fields['count_total'] = "sum( report.byorder_reserved_field1 + report.byorder_reserved_field2 + report.bychannel_reserved_field3)";
                $time_fields = $this->getTimeFields($timeLine, 'report.byorder_reserved_field1 + report.byorder_reserved_field2 + report.bychannel_reserved_field3  ');
            } else if ($time_target == 'cpc_click_number') {  //CPC点击次数
                $fields['count_total'] = "sum( report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks + report.bychannel_reserved_field4)";
                $time_fields = $this->getTimeFields($timeLine, 'report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks + report.bychannel_reserved_field4');

            } else if ($time_target == 'cpc_click_rate') {  //CPC点击率
                $fields['count_total'] = "(SUM( report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks + report.bychannel_reserved_field4)) * 1.0000 / nullif( SUM(report.byorder_reserved_field1 + report.byorder_reserved_field2 + report.bychannel_reserved_field3), 0 ) ";
                $time_fields = $this->getTimeFields($timeLine, 'report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks + report.bychannel_reserved_field4', 'report.byorder_reserved_field1 + report.byorder_reserved_field2 + report.bychannel_reserved_field3');
            } else if ($time_target == 'cpc_order_number') {  //CPC订单数
                $fields['count_total'] = 'sum( report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" + report.bychannel_reserved_field7) ';
                $time_fields = $this->getTimeFields($timeLine, 'report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" + report.bychannel_reserved_field7');
            } else if ($time_target == 'cpc_order_rate') {  //cpc订单占比
                $fields['count_total'] = 'sum( report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" + report.bychannel_reserved_field7) * 1.0000 / nullif( SUM(report.bychannel_sales_volume) , 0 )';
                $time_fields = $this->getTimeFields($timeLine, 'report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" + report.bychannel_reserved_field7', 'report.bychannel_sales_volume');
            } else if ($time_target == 'cpc_click_conversion_rate') {  //cpc点击转化率
                $fields['count_total'] = '(sum( report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" + report.bychannel_reserved_field7)) * 1.0000 / nullif( SUM(report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks + report.bychannel_reserved_field4) , 0 )';
                $time_fields = $this->getTimeFields($timeLine, 'report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" + report.bychannel_reserved_field7', 'report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks + report.bychannel_reserved_field4');
            } else if ($time_target == 'cpc_turnover') {  //CPC成交额
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'sum( report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d" + report."bychannel_reserved_field5" )';
                    $time_fields = $this->getTimeFields($timeLine, 'report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d" + report."bychannel_reserved_field5"');
                } else {
                    $fields['count_total'] = 'sum( report."byorder_sp_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1)) + report."byorder_sd_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1)) + report."bychannel_reserved_field5" * ({:RATE} / COALESCE(rates.rate ,1))  )';
                    $time_fields = $this->getTimeFields($timeLine, 'report."byorder_sp_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1)) + report."byorder_sd_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1)) + report."bychannel_reserved_field5" * ({:RATE} / COALESCE(rates.rate ,1))');
                }
            } else if ($time_target == 'cpc_turnover_rate') {  //CPC成交额占比
                $rate_fields = $datas['currency_code'] == 'ORIGIN' ? " * 1.0000" : " * ({:RATE} / COALESCE(rates.rate ,1))";
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['count_total'] = '(sum((report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d" + report."bychannel_reserved_field5" )' .$rate_fields ."))/nullif( SUM(report.byorder_sales_quota {$rate_fields}),0)";
                    $time_fields = $this->getTimeFields($timeLine, '( report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d" + report."bychannel_reserved_field5" )' . $rate_fields, 'report.byorder_sales_quota' . $rate_fields);
                } else {
                    $fields['count_total'] = '(sum((report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d" + report."bychannel_reserved_field5" )' .$rate_fields ."))/nullif( SUM(report.report_sales_quota {$rate_fields}),0)";
                    $time_fields = $this->getTimeFields($timeLine, ' (report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d" + report."bychannel_reserved_field5" )' . $rate_fields, 'report.report_sales_quota' . $rate_fields);
                }
            } else if ($time_target == 'cpc_avg_click_cost') {  //CPC平均点击花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = '(sum( report.byorder_cpc_cost + report.byorder_cpc_sd_cost - COALESCE(report.bychannel_cpc_sb_cost,0))) * 1.0000 / nullif(sum( report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks + report.bychannel_reserved_field4 ),0) ';
                    $time_fields = $this->getTimeFields($timeLine, 'report.byorder_cpc_cost + report.byorder_cpc_sd_cost - COALESCE(report.bychannel_cpc_sb_cost,0)', 'report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks + report.bychannel_reserved_field4');
                } else {
                    $fields['count_total'] = '(sum( report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1)) - COALESCE(report.bychannel_cpc_sb_cost,0) * ({:RATE} / COALESCE(rates.rate ,1)) )) * 1.0000 / nullif(sum( report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks + report.bychannel_reserved_field4 ),0) ';
                    $time_fields = $this->getTimeFields($timeLine, 'report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1)) - COALESCE(report.bychannel_cpc_sb_cost,0) * ({:RATE} / COALESCE(rates.rate ,1)) ', 'report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks + report.bychannel_reserved_field4');
                }
            } else if ($time_target == 'cpc_acos') {  // ACOS
                $fields['count_total'] = '(SUM( report.byorder_cpc_cost + report.byorder_cpc_sd_cost -  COALESCE(report.bychannel_cpc_sb_cost,0) )) * 1.0000 / nullif( sum( report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d" + report."bychannel_reserved_field5"  ) , 0 ) ';
                $time_fields = $this->getTimeFields($timeLine, 'report.byorder_cpc_cost + report.byorder_cpc_sd_cost -  COALESCE(report.bychannel_cpc_sb_cost,0)', 'report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d"  + report."bychannel_reserved_field5" ');
            } else if ($time_target == 'cpc_direct_sales_volume') {  //CPC直接销量

                $fields['count_total'] = 'sum( report."byorder_sd_attributedConversions7dSameSKU" + report."byorder_sp_attributedConversions7dSameSKU" + report.bychannel_reserved_field8 )';
                $time_fields = $this->getTimeFields($timeLine, ' report."byorder_sd_attributedConversions7dSameSKU" + report."byorder_sp_attributedConversions7dSameSKU" + report.bychannel_reserved_field8 ');
            } else if ($time_target == 'cpc_direct_sales_quota') {  //CPC直接销售额
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'sum( report."byorder_sd_attributedSales7dSameSKU" + report."byorder_sp_attributedSales7dSameSKU" + report."bychannel_reserved_field6"  )';
                    $time_fields = $this->getTimeFields($timeLine, '  report."byorder_sd_attributedSales7dSameSKU" + report."byorder_sp_attributedSales7dSameSKU" + report."bychannel_reserved_field6" ');
                } else {
                    $fields['count_total'] = 'sum( report."byorder_sd_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1))  + report."byorder_sp_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1)) + report."bychannel_reserved_field6" * ({:RATE} / COALESCE(rates.rate ,1))  )';
                    $time_fields = $this->getTimeFields($timeLine, ' report."byorder_sd_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1))  + report."byorder_sp_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1)) + report."bychannel_reserved_field6" * ({:RATE} / COALESCE(rates.rate ,1)) ');
                }
            } else if ($time_target == 'cpc_direct_sales_volume_rate') {  // CPC直接销量占比
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['count_total'] = 'sum( report."byorder_sd_attributedConversions7dSameSKU" + report."byorder_sp_attributedConversions7dSameSKU" + report.bychannel_reserved_field8  )  * 1.0000 / nullif(sum( report.byorder_sales_volume+ report.byorder_group_id ) ,0)';
                    $time_fields = $this->getTimeFields($timeLine, ' report."byorder_sd_attributedConversions7dSameSKU" + report."byorder_sp_attributedConversions7dSameSKU" + report.bychannel_reserved_field8 ', 'report.byorder_sales_volume+ report.byorder_group_id');
                } elseif ($datas['sale_datas_origin'] == '2') {
                    $fields['count_total'] = 'sum( report."byorder_sd_attributedConversions7dSameSKU" + report."byorder_sp_attributedConversions7dSameSKU" + report.bychannel_reserved_field8 )  * 1.0000 / nullif(sum( report.report_sales_volume + report.report_group_id  ) ,0)';
                    $time_fields = $this->getTimeFields($timeLine, ' report."byorder_sd_attributedConversions7dSameSKU" + report."byorder_sp_attributedConversions7dSameSKU" + report.bychannel_reserved_field8 ', 'report.report_sales_volume+ report.report_group_id');
                }
            } else if ($time_target == 'cpc_indirect_sales_volume') {  //CPC间接销量
                $fields['count_total'] = ' SUM(report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" + report.bychannel_reserved_field7 - report."byorder_sd_attributedConversions7dSameSKU" - report."byorder_sp_attributedConversions7dSameSKU" - report.bychannel_reserved_field8 )';
                $time_fields = $this->getTimeFields($timeLine, 'report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" + report.bychannel_reserved_field7 - report."byorder_sd_attributedConversions7dSameSKU" - report."byorder_sp_attributedConversions7dSameSKU" - report.bychannel_reserved_field8');
            } else if ($time_target == 'cpc_indirect_sales_quota') {  //CPC间接销售额
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'sum(report."byorder_sd_attributedSales7d" + report."byorder_sp_attributedSales7d" + report."bychannel_reserved_field5" - report."byorder_sd_attributedSales7dSameSKU" - report."byorder_sp_attributedSales7dSameSKU" - report."bychannel_reserved_field6" )';
                    $time_fields = $this->getTimeFields($timeLine, 'report."byorder_sd_attributedSales7d" + report."byorder_sp_attributedSales7d" + report."bychannel_reserved_field5"  - report."byorder_sd_attributedSales7dSameSKU" - report."byorder_sp_attributedSales7dSameSKU" - report."bychannel_reserved_field6"');
                } else {
                    $fields['count_total'] = 'sum(report."byorder_sd_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1))  + report."byorder_sp_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1)) + report."bychannel_reserved_field5" * ({:RATE} / COALESCE(rates.rate ,1))  - report."byorder_sd_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1))  - report."byorder_sp_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1)) - report."bychannel_reserved_field6" * ({:RATE} / COALESCE(rates.rate ,1))  )';
                    $time_fields = $this->getTimeFields($timeLine, 'report."byorder_sd_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1))  + report."byorder_sp_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1)) + report."bychannel_reserved_field5" * ({:RATE} / COALESCE(rates.rate ,1))  - report."byorder_sd_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1))  - report."byorder_sp_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1)) - report."bychannel_reserved_field6" * ({:RATE} / COALESCE(rates.rate ,1)) ');
                }
            } else if ($time_target == 'cpc_indirect_sales_volume_rate') {  //CPC间接销量占比
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['count_total'] = 'sum( report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" + report."bychannel_reserved_field7" - report."byorder_sd_attributedConversions7dSameSKU" - report."byorder_sp_attributedConversions7dSameSKU" - report."bychannel_reserved_field8" )  * 1.0000 / nullif(sum( report.byorder_sales_volume + report.byorder_group_id) ,0)';
                    $time_fields = $this->getTimeFields($timeLine, 'report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" + report."bychannel_reserved_field7" - report."byorder_sd_attributedConversions7dSameSKU" - report."byorder_sp_attributedConversions7dSameSKU" - report."bychannel_reserved_field8"', 'report.byorder_sales_volume + report.byorder_group_id');
                } else {
                    $fields['count_total'] = 'sum( report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" - report."byorder_sd_attributedConversions7dSameSKU" + report."bychannel_reserved_field7" - report."byorder_sp_attributedConversions7dSameSKU" - report."bychannel_reserved_field8" )  * 1.0000 / nullif(sum( report.report_sales_volume + report.report_group_id) ,0)';
                    $time_fields = $this->getTimeFields($timeLine, 'report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" - report."byorder_sd_attributedConversions7dSameSKU" + report."bychannel_reserved_field7" - report."byorder_sp_attributedConversions7dSameSKU" - report."bychannel_reserved_field8"', 'report.report_sales_volume+ report.report_group_id');
                }
            } else if ($time_target == 'fba_sales_volume') {  //FBA销量
                if ($datas['sale_datas_origin'] == '1'){
                    $fields['count_total'] = 'sum( report.byorder_fba_sales_volume )';
                    $time_fields = $this->getTimeFields($timeLine, 'report.byorder_fba_sales_volume');
                }else{
                    $fields['count_total'] = 'sum( report.report_fba_sales_volume )';
                    $time_fields = $this->getTimeFields($timeLine, 'report.report_fba_sales_volume');
                }

            } else if ($time_target == 'promote_coupon') { //coupon优惠券
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'SUM(report.bychannel_coupon_redemption_fee + report."bychannel_coupon_payment_eventList_tax")';
                    $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_coupon_redemption_fee + report."bychannel_coupon_payment_eventList_tax"');
                } else {
                    $fields['count_total'] = 'SUM(report.bychannel_coupon_redemption_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report."bychannel_coupon_payment_eventList_tax" * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_coupon_redemption_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report."bychannel_coupon_payment_eventList_tax" * ({:RATE} / COALESCE(rates.rate ,1)) ');
                }
            } elseif ($time_target == 'promote_run_lightning_deal_fee') {  //RunLightningDealFee';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'SUM(report.bychannel_run_lightning_deal_fee)';
                    $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_run_lightning_deal_fee');
                } else {
                    $fields['count_total'] = 'SUM(report.bychannel_run_lightning_deal_fee * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_run_lightning_deal_fee * ({:RATE} / COALESCE(rates.rate ,1)) ');
                }
            } elseif ($time_target == 'amazon_order_fee') {  //亚马逊-订单费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(report.byorder_channel_amazon_order_fee+report.bychannel_reserved_field44  + report.bychannel_channel_amazon_order_fee)';
                        $time_fields = $this->getTimeFields($timeLine, 'report.byorder_channel_amazon_order_fee + report.bychannel_channel_amazon_order_fee+report.bychannel_reserved_field44  ');
                    } else {
                        $fields['count_total'] = 'SUM((report.byorder_channel_amazon_order_fee+report.bychannel_reserved_field44 ) * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_order_fee * ({:RATE} / COALESCE(rates.rate ,1)))';
                        $time_fields = $this->getTimeFields($timeLine, '(report.byorder_channel_amazon_order_fee+report.bychannel_reserved_field44 ) * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_order_fee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(report.report_channel_amazon_order_fee + report.bychannel_channel_amazon_order_fee+report.bychannel_reserved_field44 )';
                        $time_fields = $this->getTimeFields($timeLine, 'report.report_channel_amazon_order_fee + report.bychannel_channel_amazon_order_fee+report.bychannel_reserved_field44 ');
                    } else {
                        $fields['count_total'] = 'SUM((report.report_channel_amazon_order_fee +report.bychannel_reserved_field44 )* ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_order_fee * ({:RATE} / COALESCE(rates.rate ,1)))';
                        $time_fields = $this->getTimeFields($timeLine, '(report.report_channel_amazon_order_fee+report.bychannel_reserved_field44 ) * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_order_fee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }

                }
            } elseif ($time_target == 'amazon_refund_fee') { //亚马逊-退货退款费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(report.byorder_channel_amazon_refund_fee + report.bychannel_channel_amazon_refund_fee)';
                        $time_fields = $this->getTimeFields($timeLine, 'report.byorder_channel_amazon_refund_fee + report.bychannel_channel_amazon_refund_fee');
                    } else {
                        $fields['count_total'] = 'SUM(report.byorder_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1)))';
                        $time_fields = $this->getTimeFields($timeLine, 'report.byorder_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(report.report_channel_amazon_refund_fee + report.bychannel_channel_amazon_refund_fee)';
                        $time_fields = $this->getTimeFields($timeLine, 'report.report_channel_amazon_refund_fee + report.bychannel_channel_amazon_refund_fee');
                    } else {
                        $fields['count_total'] = 'SUM(report.report_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1)))';
                        $time_fields = $this->getTimeFields($timeLine, 'report.report_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } elseif ($time_target == 'amazon_stock_fee') { //亚马逊-库存费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(report.byorder_channel_amazon_storage_fee + report.bychannel_channel_amazon_storage_fee)';
                        $time_fields = $this->getTimeFields($timeLine, 'report.byorder_channel_amazon_storage_fee + report.bychannel_channel_amazon_storage_fee');
                    } else {
                        $fields['count_total'] = 'SUM(report.byorder_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)))';
                        $time_fields = $this->getTimeFields($timeLine, 'report.byorder_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(report.report_channel_amazon_storage_fee + report.bychannel_channel_amazon_storage_fee)';
                        $time_fields = $this->getTimeFields($timeLine, 'report.report_channel_amazon_storage_fee + report.bychannel_channel_amazon_storage_fee');
                    } else {
                        $fields['count_total'] = 'SUM(report.report_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)))';
                        $time_fields = $this->getTimeFields($timeLine, 'report.report_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } elseif ($time_target == 'amazon_long_term_storage_fee') { //FBA长期仓储费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(report.bychannel_fba_long_term_storage_fee)';
                        $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_fba_long_term_storage_fee');
                    } else {
                        $fields['count_total'] = 'SUM(report.bychannel_fba_long_term_storage_fee  * ({:RATE} / COALESCE(rates.rate ,1)) )';
                        $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_fba_long_term_storage_fee  * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(report.bychannel_fba_long_term_storage_fee)';
                        $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_fba_long_term_storage_fee');
                    } else {
                        $fields['count_total'] = 'SUM(report.bychannel_fba_long_term_storage_fee  * ({:RATE} / COALESCE(rates.rate ,1)) )';
                        $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_fba_long_term_storage_fee  * ({:RATE} / COALESCE(rates.rate ,1)) ');
                    }
                }
            } elseif ($time_target == 'goods_adjust_fee') { //商品调整费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(report.byorder_channel_goods_adjustment_fee + report.bychannel_channel_goods_adjustment_fee)';
                        $time_fields = $this->getTimeFields($timeLine, 'report.byorder_channel_goods_adjustment_fee + report.bychannel_channel_goods_adjustment_fee');
                    } else {
                        $fields['count_total'] = 'SUM(report.byorder_channel_goods_adjustment_fee  * ({:RATE} / COALESCE(rates.rate ,1)) +  report.bychannel_channel_goods_adjustment_fee * ({:RATE} / COALESCE(rates.rate ,1)) )';
                        $time_fields = $this->getTimeFields($timeLine, 'report.byorder_channel_goods_adjustment_fee  * ({:RATE} / COALESCE(rates.rate ,1)) +  report.bychannel_channel_goods_adjustment_fee * ({:RATE} / COALESCE(rates.rate ,1)) ');
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(report.report_channel_goods_adjustment_fee + report.bychannel_channel_goods_adjustment_fee)';
                        $time_fields = $this->getTimeFields($timeLine, 'report.report_channel_goods_adjustment_fee + report.bychannel_channel_goods_adjustment_fee');
                    } else {
                        $fields['count_total'] = 'SUM(report.report_channel_goods_adjustment_fee  * ({:RATE} / COALESCE(rates.rate ,1)) +  report.bychannel_channel_goods_adjustment_fee * ({:RATE} / COALESCE(rates.rate ,1)) )';
                        $time_fields = $this->getTimeFields($timeLine, 'report.report_channel_goods_adjustment_fee  * ({:RATE} / COALESCE(rates.rate ,1)) +  report.bychannel_channel_goods_adjustment_fee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'cost_profit_total_income') { //总收入
                if ($datas['sale_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_sales_quota  + report.channel_fbm_safe_t_claim_demage)";
                        $time_fields = $this->getTimeFields($timeLine, "report.byorder_sales_quota + report.channel_fbm_safe_t_claim_demage");
                    } else {
                        $fields['count_total'] = "sum( report.byorder_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)) +  report.channel_fbm_safe_t_claim_demage * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($timeLine, "report.byorder_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)) + report.channel_fbm_safe_t_claim_demage * ({:RATE} / COALESCE(rates.rate ,1)) ");
                    }
                } elseif ($datas['sale_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_sales_quota )";
                        $time_fields = $this->getTimeFields($timeLine, "report.report_sales_quota");
                    } else {
                        $fields['count_total'] = "sum( report.report_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($timeLine, "report.report_sales_quota * ({:RATE} / COALESCE(rates.rate ,1))");
                    }
                }
            } elseif ($time_target == 'sale_channel_month_goal') { //店铺月销售额目标
                $this->countDimensionChannel = true;
                if ($datas['currency_code'] != 'ORIGIN'){
                    $fields['count_total'] = "SUM(monthly_profit.reserved_field11 / COALESCE(rates.rate, 1) * {:RATE})";
                    $time_fields = $this->getTimeFields($timeLine, "monthly_profit.reserved_field11 / COALESCE(rates.rate, 1) * {:RATE}");
                } else {
                    $fields['count_total'] = "SUM(monthly_profit.reserved_field11)";
                    $time_fields = $this->getTimeFields($timeLine, "monthly_profit.reserved_field11");
                }
            } else if ($time_target == 'cost_profit_total_pay') { //总支出
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        if ($datas['cost_count_type'] == '1') {
                            if ($datas['sale_datas_origin'] == '1') {
                                $filed1 = "report.byorder_channel_amazon_order_fee + report.byorder_channel_amazon_refund_fee + report.byorder_channel_amazon_storage_fee + report.byorder_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee";//亚马逊费用
                                $filed2 = " + report.bychannel_product_ads_payment_eventlist_charge + report.bychannel_product_ads_payment_eventlist_refund";//广告结款
                                $filed3 = " - report.byorder_reserved_field17";//VAT
                                $filed4 = " + report.byorder_purchasing_cost";//采购成本
                                $filed5 = " + report.byorder_logistics_head_course";//物流/头程
                                $filed6 = " + report.bychannel_operating_fee";//运营费用
                                $filed7 = " + report.byorder_reserved_field10";//测评费用
                                $filed8 = " + report.bychannel_loan_payment +  report.bychannel_review_enrollment_fee+report.bychannel_reserved_field44 + report.bychannel_reserved_field43";//其他
                                $filed9 = " + report.byorder_refund_promote_discount + report.byorder_promote_discount + report.bychannel_coupon_redemption_fee  + report.bychannel_run_lightning_deal_fee";//店铺促销
                                $filed10 = " + report.byorder_channel_goods_adjustment_fee + report.bychannel_channel_goods_adjustment_fee";//商品调整
                                $filed11 = "  - report.byorder_refund";//退款
                                $file_total = $filed1 . $filed2 . $filed3 . $filed4 . $filed5 . $filed6 . $filed7 . $filed8 . $filed9 . $filed10 . $filed11.$this->tax_field;
                                $fields['count_total'] = "SUM({$file_total})";
                                $time_fields = $this->getTimeFields($timeLine, $file_total);
                            } else {
                                $fields['count_total'] = 'SUM(report.byorder_channel_profit + report.bychannel_channel_profit + report.byorder_purchasing_cost + report.byorder_logistics_head_course - report.byorder_sales_quota+report.bychannel_reserved_field44 + report.bychannel_reserved_field43'.$this->tax_field.')';
                                $time_fields = $this->getTimeFields($timeLine, 'report.byorder_channel_profit + report.bychannel_channel_profit + report.byorder_purchasing_cost + report.byorder_logistics_head_course - report.report_sales_quota+report.bychannel_reserved_field44 + report.bychannel_reserved_field43'.$this->tax_field);
                            }
                        } else {
                            if ($datas['sale_datas_origin'] == '1') {
                                $fields['count_total'] = 'SUM((report.first_purchasing_cost + report.first_logistics_head_course) + report.byorder_channel_profit + report.bychannel_channel_profit  - report.byorder_sales_quota+report.bychannel_reserved_field44 + report.bychannel_reserved_field43)';
                                $time_fields = $this->getTimeFields($timeLine, '(report.first_purchasing_cost + report.first_logistics_head_course) + report.byorder_channel_profit + report.bychannel_channel_profit  - report.byorder_sales_quota+report.bychannel_reserved_field44 + report.bychannel_reserved_field43');
                            } else {
                                $fields['count_total'] = 'SUM((report.first_purchasing_cost + report.first_logistics_head_course) + report.byorder_channel_profit + report.bychannel_channel_profit  - report.report_sales_quota+report.bychannel_reserved_field44 + report.bychannel_reserved_field43'.$this->tax_field.')';
                                $time_fields = $this->getTimeFields($timeLine, '(report.first_purchasing_cost + report.first_logistics_head_course) + report.byorder_channel_profit + report.bychannel_channel_profit  - report.report_sales_quota+report.bychannel_reserved_field44 + report.bychannel_reserved_field43'.$this->tax_field);
                            }
                        }
                    } else {
                        if ($datas['cost_count_type'] == '1') {
                            if ($datas['sale_datas_origin'] == '1') {
                                $fields['count_total'] = 'SUM((report.byorder_channel_profit+report.bychannel_reserved_field44 + report.bychannel_reserved_field43'.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) - report.byorder_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)))';
                                $time_fields = $this->getTimeFields($timeLine, '(report.byorder_channel_profit+report.bychannel_reserved_field44 + report.bychannel_reserved_field43'.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) - report.byorder_sales_quota * ({:RATE} / COALESCE(rates.rate ,1))');
                            }
                        } else {
                            $fields['count_total'] = 'SUM(  ((report.first_purchasing_cost+report.bychannel_reserved_field44 + report.bychannel_reserved_field43'.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1)) + report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))) +  report.byorder_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) - report.report_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)))';
                            $time_fields = $this->getTimeFields($timeLine, '  ((report.first_purchasing_cost+report.bychannel_reserved_field44 + report.bychannel_reserved_field43'.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1)) + report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))) +  report.byorder_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) - report.report_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)))');
                        }
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        if ($datas['cost_count_type'] == '1') {
                            if ($datas['sale_datas_origin'] == '1') {
                                $fields['count_total'] = 'SUM(report.report_channel_profit + report.bychannel_channel_profit + report.report_purchasing_cost + report.report_logistics_head_course - report.byorder_sales_quota+report.bychannel_reserved_field44 + report.bychannel_reserved_field43'.$this->tax_field.' )';
                                $time_fields = $this->getTimeFields($timeLine, 'report.report_channel_profit + report.bychannel_channel_profit + report.report_purchasing_cost + report.report_logistics_head_course - report.byorder_sales_quota+report.bychannel_reserved_field44 + report.bychannel_reserved_field43'.$this->tax_field);
                            } else {
                                $fields['count_total'] = 'SUM(report.report_channel_profit + report.bychannel_channel_profit + report.report_purchasing_cost + report.report_logistics_head_course - report.report_sales_quota +report.bychannel_reserved_field44 + report.bychannel_reserved_field43'.$this->tax_field.')';
                                $time_fields = $this->getTimeFields($timeLine, 'report.report_channel_profit + report.bychannel_channel_profit + report.report_purchasing_cost + report.report_logistics_head_course - report.report_sales_quota+report.bychannel_reserved_field44 + report.bychannel_reserved_field43'.$this->tax_field);
                            }
                        } else {
                            if ($datas['sale_datas_origin'] == '1') {
                                $fields['count_total'] = 'SUM(  (report.first_purchasing_cost + report.first_logistics_head_course) + report.report_channel_profit + report.bychannel_channel_profit  - report.byorder_sales_quota+report.bychannel_reserved_field44 + report.bychannel_reserved_field43'.$this->tax_field.')';
                                $time_fields = $this->getTimeFields($timeLine, '  (report.first_purchasing_cost + report.first_logistics_head_course) + report.report_channel_profit + report.bychannel_channel_profit  - report.byorder_sales_quota+report.bychannel_reserved_field44 + report.bychannel_reserved_field43'.$this->tax_field);
                            } else {
                                $fields['count_total'] = 'SUM(  (report.first_purchasing_cost + report.first_logistics_head_course) + report.report_channel_profit + report.bychannel_channel_profit  - report.report_sales_quota+report.bychannel_reserved_field44 + report.bychannel_reserved_field43'.$this->tax_field.')';
                                $time_fields = $this->getTimeFields($timeLine, '  (report.first_purchasing_cost + report.first_logistics_head_course) + report.report_channel_profit + report.bychannel_channel_profit  - report.report_sales_quota+report.bychannel_reserved_field44 + report.bychannel_reserved_field43'.$this->tax_field);
                            }
                        }
                    } else {
                        if ($datas['cost_count_type'] == '1') {
                            if ($datas['sale_datas_origin'] == '1') {
                                $fields['count_total'] = 'SUM((report.report_channel_profit+report.bychannel_reserved_field44 + report.bychannel_reserved_field43'.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) - report.byorder_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)))';
                                $time_fields = $this->getTimeFields($timeLine, '(report.report_channel_profit+report.bychannel_reserved_field44 + report.bychannel_reserved_field43'.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) - report.byorder_sales_quota * ({:RATE} / COALESCE(rates.rate ,1))');
                            } else {
                                $fields['count_total'] = 'SUM((report.report_channel_profit+report.bychannel_reserved_field44 + report.bychannel_reserved_field43'.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) - report.report_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)))';
                                $time_fields = $this->getTimeFields($timeLine, '(report.report_channel_profit+report.bychannel_reserved_field44 + report.bychannel_reserved_field43'.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) - report.report_sales_quota * ({:RATE} / COALESCE(rates.rate ,1))');
                            }
                        } else {
                            if ($datas['sale_datas_origin'] == '1') {
                                $fields['count_total'] = 'SUM(((report.first_purchasing_cost+report.bychannel_reserved_field44 + report.bychannel_reserved_field43'.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1)) + report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))) + report.report_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) - report.byorder_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)) )';
                                $time_fields = $this->getTimeFields($timeLine, '((report.first_purchasing_cost+report.bychannel_reserved_field44 + report.bychannel_reserved_field43'.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1)) + report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))) + report.report_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) - report.byorder_sales_quota * ({:RATE} / COALESCE(rates.rate ,1))');
                            } else {
                                $fields['count_total'] = 'SUM(((report.first_purchasing_cost+report.bychannel_reserved_field44 + report.bychannel_reserved_field43'.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1)) + report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))) + report.report_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) - report.report_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)) )';
                                $time_fields = $this->getTimeFields($timeLine, '((report.first_purchasing_cost+report.bychannel_reserved_field44 + report.bychannel_reserved_field43'.$this->tax_field.') * ({:RATE} / COALESCE(rates.rate ,1)) + report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))) + report.report_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) - report.report_sales_quota * ({:RATE} / COALESCE(rates.rate ,1))');
                            }
                        }
                    }
                }
            }elseif ($time_target == 'repayment_transfer_fail') {  //转账失败
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'SUM(report.bychannel_reserved_field47)';
                    $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_reserved_field47');
                } else {
                    $fields['count_total'] = 'SUM(report.bychannel_reserved_field47  * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_reserved_field47  * ({:RATE} / COALESCE(rates.rate ,1))');
                }
            }elseif ($time_target == 'repayment_transfer_success') {  //转账成功
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'SUM(report.bychannel_reserved_field46)';
                    $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_reserved_field46');
                } else {
                    $fields['count_total'] = 'SUM(report.bychannel_reserved_field46  * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_reserved_field46  * ({:RATE} / COALESCE(rates.rate ,1))');
                }
            }elseif ($time_target == 'repayment_count_settled') {  //已结总计
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'SUM(report.bychannel_reserved_field48)';
                    $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_reserved_field48');
                } else {
                    $fields['count_total'] = 'SUM(report.bychannel_reserved_field48  * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_reserved_field48  * ({:RATE} / COALESCE(rates.rate ,1))');
                }
            }elseif ($time_target == 'buyer_evaluation_bad_feedback') {  //店铺的Feedback中差评
                $fields['count_total'] = 'SUM(report.bychannel_reserved_field49)';
                $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_reserved_field49');
            }elseif ($time_target == 'cpc_sb_cost') {  //sb花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'SUM(0 - report.bychannel_cpc_sb_cost)';
                    $time_fields = $this->getTimeFields($timeLine, '(0 - report.bychannel_cpc_sb_cost)');
                } else {
                    $fields['count_total'] = 'SUM((0 - report.bychannel_cpc_sb_cost)  * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    $time_fields = $this->getTimeFields($timeLine, '(0 - report.bychannel_cpc_sb_cost)  * ({:RATE} / COALESCE(rates.rate ,1))');
                }
            }elseif ($time_target == 'cpc_sbv_cost') {  //sbv花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'SUM(0 - report.bychannel_reserved_field45)';
                    $time_fields = $this->getTimeFields($timeLine, '(0 - report.bychannel_reserved_field45)');
                } else {
                    $fields['count_total'] = 'SUM((0 - report.bychannel_reserved_field45)  * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    $time_fields = $this->getTimeFields($timeLine, '(0- report.bychannel_reserved_field45)  * ({:RATE} / COALESCE(rates.rate ,1))');
                }
            }elseif ($time_target == 'amazon_fba_overage_fee') {  //库存仓储超量费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'SUM(report.bychannel_fba_overage_fee)';
                    $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_fba_overage_fee');
                } else {
                    $fields['count_total'] = 'SUM(report.bychannel_fba_overage_fee  * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_fba_overage_fee  * ({:RATE} / COALESCE(rates.rate ,1))');
                }
            }elseif ($time_target == 'amazon_fba_disposal_fee') {  //FBA弃置费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'SUM(report.bychannel_fba_disposal_fee)';
                    $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_fba_disposal_fee');
                } else {
                    $fields['count_total'] = 'SUM(report.bychannel_fba_disposal_fee  * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    $time_fields = $this->getTimeFields($timeLine, 'report.bychannel_fba_disposal_fee  * ({:RATE} / COALESCE(rates.rate ,1))');
                }
            }else if ($time_target == 'amazon_market_vat_principal') {  //MarketplaceFacilitatorVAT-Principal
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_cpc_sb_sales_quota' : 'report_cpc_sb_sales_quota';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.{$tmp_field})";
                    $time_fields = $this->getTimeFields($timeLine, "report.{$tmp_field}");
                } else {
                    $fields['count_total'] = "SUM(report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)))";
                    $time_fields = $this->getTimeFields($timeLine, "report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1))");
                }
            }else if ($time_target == 'amazon_market_vat_shipping') {  //MarketplaceFacilitatorVAT-Shipping
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_cpc_sb_cost' : 'report_cpc_sb_cost';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.{$tmp_field})";
                    $time_fields = $this->getTimeFields($timeLine, "report.{$tmp_field}");
                } else {
                    $fields['count_total'] = "SUM(report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)))";
                    $time_fields = $this->getTimeFields($timeLine, "report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1))");
                }
            }else if ($time_target == 'amazon_market_vat_principal_refund') {  //MarketplaceFacilitatorVAT-Principal-refund
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_refund_rate' : 'report_refund_rate';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.{$tmp_field})";
                    $time_fields = $this->getTimeFields($timeLine, "report.{$tmp_field}");
                } else {
                    $fields['count_total'] = "SUM(report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)))";
                    $time_fields = $this->getTimeFields($timeLine, "report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1))");
                }
            }else if ($time_target == 'amazon_market_vat_shipping_refund') {  //MarketplaceFacilitatorVAT-Shipping-refund
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_profit_margin' : 'report_profit_margin';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.{$tmp_field})";
                    $time_fields = $this->getTimeFields($timeLine, "report.{$tmp_field}");
                } else {
                    $fields['count_total'] = "SUM(report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)))";
                    $time_fields = $this->getTimeFields($timeLine, "report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1))");
                }
            }else if ($time_target == 'sales_evaluation_nums') {  //测评销量
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorderitem_evaluation_nums' : 'reportitem_evaluation_nums';
                $fields['count_total'] = "SUM( report.{$tmp_field} )";
                $time_fields = $this->getTimeFields($timeLine, $tmp_field);
            }else if ($time_target == 'amazon_fba_lost_num') {  //仓库丢失赔偿数量
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_lost_num' : 'report_lost_num';
                $fields['count_total'] = "SUM( report.{$tmp_field} )";
                $time_fields = $this->getTimeFields($timeLine, $tmp_field);
            }else if ($time_target == 'amazon_fba_damage_num') {  //仓库损坏赔偿数量
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_damage_num' : 'report_damage_num';
                $fields['count_total'] = "SUM( report.{$tmp_field} )";
                $time_fields = $this->getTimeFields($timeLine, $tmp_field);
            }elseif ($this->timeCustomTarget && $this->timeCustomTarget['target_type'] == 1) {
                if ($this->timeCustomTarget['count_dimension'] == 3) {
                    $tempField = "monthly_profit." . $this->timeCustomTarget['month_channel_field'];
                } else {
                    $tempField = "report.monthly_sku_" . $this->timeCustomTarget['month_goods_field'];
                }
                //新增指标
                if ($datas['currency_code'] != 'ORIGIN' && $this->timeCustomTarget['format_type'] == 4) {
                    $fields['count_total'] = "sum({$tempField} / COALESCE(rates.rate, 1) * {:RATE})";
                    $time_fields = $this->getTimeFields($timeLine, "{$tempField} * ({:RATE} / COALESCE(rates.rate ,1))");
                } else {
                    $fields['count_total'] = "SUM({$tempField})";
                    $time_fields = $this->getTimeFields($timeLine, $tempField);
                }
            } elseif (in_array($time_target, $keys)) {
                if ($this->timeCustomTarget['count_dimension'] == 3) {
                    $tempField = "monthly_profit." . $new_target_keys[$time_target]['month_channel_field'];
                } else {
                    $tempField = "report.monthly_sku_" . $new_target_keys[$time_target]['month_goods_field'];
                }
                //新增指标
                if ($datas['currency_code'] != 'ORIGIN' && $new_target_keys[$time_target]['format_type'] == 4) {
                    $fields['count_total'] = "sum({$tempField} / COALESCE(rates.rate, 1) * {:RATE})";
                    $time_fields = $this->getTimeFields($timeLine, "{$tempField} * ({:RATE} / COALESCE(rates.rate ,1))");
                } else {
                    $fields['count_total'] = "SUM({$tempField})";
                    $time_fields = $this->getTimeFields($timeLine, $tempField);
                }
            } else {
                $datas['time_target'] = $time_target;
                $fields_tmp = $this->getTimeField($datas, $timeLine, 2);
                $fields['count_total'] = $fields_tmp['count_total'];
                $time_fields = $fields_tmp['time_fields'];

            }
            $fields[$time_target] = $fields['count_total'] ;
            $time_fields_arr[$time_target] = $time_fields ;
        }
        if($this->timeCustomTarget && $this->timeCustomTarget['target_type'] == 2){
            $this->dealTimeTargets($fields, $this->timeCustomTarget,$timeLine,$time_fields_arr,$target_key,$isMysql);
        }else {
            if (!empty($time_fields) && is_array($time_fields)) {
                foreach ($time_fields as $kt => $time_field) {
                    $fields[$kt] = $time_field;
                }
            }
        }
        return $fields;
    }

    /**
     * 获取负责的所有部门的id
     * @param int $user_id
     * @param int $department_id
     * @return array
     * @author: LWZ
     */
    protected function getMyAllDepartmentIds($deparmentData, $department_id = 0)
    {
        $ids = array() ;
        $ids[] = $department_id ;
        if(!empty($deparmentData[$department_id])){
            if($deparmentData[$department_id]['level'] == 3){

            }else if($deparmentData[$department_id]['level'] == 2){
                foreach($deparmentData as $deparment2){
                    if($deparment2['parent_id'] == $department_id){
                        $ids[] = $deparment2['id'] ;
                    }
                }
            }else if($deparmentData[$department_id]['level'] == 1){
                foreach($deparmentData as $deparment2){
                    if($deparment2['parent_id'] == $department_id){
                        $ids[] = $deparment2['id'] ;
                        foreach($deparmentData as $deparment3){
                            if($deparment2['id'] == $deparment3['parent_id']){
                                $ids[] = $deparment3['id'] ;
                            }
                        }
                    }
                }
            }
        }
        return $ids ;
    }

    /**
     * 获取非商品维度FBA 的指标数据（新增统计维度完成）
     * @author: LWZ
     *
     * @param array $lists
     * @param array $fields
     * @param array $datas
     * @param array $channel_arr
     * @return array
     */
    protected function getUnGoodsFbaData($lists = [], $fields = [], $datas = [], $channel_arr = [], $currencyInfo = [], $exchangeCode = '1',$isMysql = false,$is_count = 0)
    {
        $isMysql = false;
        if(empty($lists)){
            return $lists ;
        } else {
            $table = "{$this->table_amazon_fba_inventory_by_channel} as c";
            $where = 'c.user_id = ' . $lists[0]['user_id'] ." AND c.db_num = '".$this->dbhost."'";
            if ($datas['currency_code'] != 'ORIGIN') {
//                if (empty($currencyInfo) || $currencyInfo['currency_type'] == '1') {
//                    $table .= " LEFT JOIN {$this->table_site_rate} as rates ON rates.site_id = c.site_id AND rates.user_id = 0 ";
//                } else {
//                    $table .= " LEFT JOIN {$this->table_site_rate} as rates ON rates.site_id = c.site_id AND rates.user_id = c.user_id  ";
//                }
                $table = $this->leftJoinCurrentMonthRate($table,$datas,$currencyInfo,'c');
            }

            if (!empty($channel_arr)){
                if (count($channel_arr)==1){
                    $where .= " AND c.channel_id = ".intval(implode(",",$channel_arr));
                }else{
                    $where .= " AND c.channel_id IN (".implode(",",$channel_arr).")";
                }
            }
            if ($is_count == 1){
                $fba_fields = 'max(c.channel_id) as channel_id' ;
                $group = '';
                $where_str = '1=1' ;
            }else{
                if($datas['count_dimension'] == 'channel_id'){
                    $fba_fields = $group = 'c.channel_id' ;
                }else if($datas['count_dimension'] == 'site_id'){
                    $fba_fields = $group = 'c.site_id' ;
                }else if($datas['count_dimension'] == 'department') { //部门
                    $fba_fields = $group = 'dc.user_department_id ,c.area_id' ;
                    $table .= " LEFT JOIN {$this->table_department_channel} as dc ON dc.user_id = c.user_id and dc.channel_id = c.channel_id " ;
                }else if($datas['count_dimension'] == 'admin_id'){ //子账号
                    $fba_fields = $group = 'uc.admin_id , c.area_id' ;
                    $table .= " LEFT JOIN {$this->table_user_channel} as uc ON uc.user_id = c.user_id and uc.channel_id = c.channel_id " ;
                }elseif($datas['count_dimension'] == 'all_channels'){
                    $fba_fields = 'max(c.channel_id) as channel_id' ;
                    $group = 'c.area_id';
                }elseif($datas['count_dimension'] == 'channel_operators'){
                    $fba_fields = $group = 'channel.operation_user_admin_id';
                    $table .= " LEFT JOIN {$this->table_channel} as channel ON channel.id = c.channel_id and channel.user_id = c.user_id";
                }
                $where_arr = array() ;
                foreach($lists as $list1){
                    if($datas['count_dimension'] == 'channel_id'){
                        $where_arr[] = array( 'channel_id'=>$list1['channel_id'] , 'site_id'=>$list1['site_id']) ;
                    }else if($datas['count_dimension'] == 'site_id'){
                        $where_arr[] = array('site_id'=>$list1['site_id']) ;
                    }else if($datas['count_dimension'] == 'department'){
                        $where_arr[] = array('user_department_id'=>$list1['user_department_id']) ;
                    }else if($datas['count_dimension'] == 'admin_id'){
                        $where_arr[] = array('admin_id'=>$list1['admin_id']) ;
                    }else if($datas['count_dimension'] == 'channel_operators'){
                        $where_arr[] = array('operation_user_admin_id'=>$list1['operation_user_admin_id']);
                    }
                }


                if($datas['count_dimension'] == 'channel_id'){
                    $where_strs = array_unique(array_column($where_arr , 'channel_id')) ;
                    $where_str = 'c.channel_id IN (' . implode(',' , $where_strs) . ")" ;
                }else if($datas['count_dimension'] == 'site_id'){
                    $where_strs = array_unique(array_column($where_arr , 'site_id')) ;
                    $where_str = 'c.site_id IN (' . implode(',' , $where_strs) . ")" ;
                }else if($datas['count_dimension'] == 'department'){
                    $where_strs = array_unique(array_column($where_arr , 'user_department_id')) ;
                    $where_str = 'dc.user_department_id IN (' . implode(',' , $where_strs) . ")" ;
                    $isMysql = false;

                }else if($datas['count_dimension'] == 'admin_id'){
                    $where_strs = array_unique(array_column($where_arr , 'admin_id')) ;
                    $where_str = 'uc.admin_id IN (' . implode(',' , $where_strs) . ")" ;
                    $isMysql = false;
                }else if($datas['count_dimension'] == 'channel_operators'){
                    $where_strs = array_unique(array_column($where_arr , 'operation_user_admin_id')) ;
                    $where_str = 'channel.operation_user_admin_id IN (' . implode(',' , $where_strs) . ")" ;
                    $isMysql = false;
                }else{
                    $where_str = '1=1' ;
                }
            }

            $amazon_fba_inventory_by_channel_md = new AmazonFbaInventoryByChannelPrestoModel($this->dbhost, $this->codeno);
            $amazon_fba_inventory_by_channel_md->dryRun(env('APP_TEST_RUNNING', false));
            $where.= ' AND ' . $where_str ;
        }

        if ($datas['currency_code'] == 'ORIGIN') {
            $fba_fields .= " , sum(DISTINCT(c.yjzhz))  as fba_goods_value";
        } else {
            $fba_fields .= " , sum(DISTINCT(c.yjzhz * ({:RATE} / COALESCE(rates.rate ,1))))  as fba_goods_value";
        }
        $fba_fields.= ' ,SUM(DISTINCT(c.total_fulfillable_quantity)) as fba_stock , SUM(DISTINCT(c.replenishment_sku_nums)) as fba_need_replenish ,SUM(DISTINCT(c.redundancy_sku)) as fba_predundancy_number';
        if ($exchangeCode == 1){
            $exchangeCode = "1.00000000";
        }
        $fba_fields = str_replace("{:RATE}", $exchangeCode, $fba_fields);
        $fbaData =$amazon_fba_inventory_by_channel_md->select($where , $fba_fields ,$table ,'' , '' ,$group,'',null,300,$isMysql);
        if ($isMysql && !empty($fba_data)){
            foreach ($fba_data as $key => $value){
                $fba_data[$key] = (array) $value;
            }
        }

        $fbaDatas = array() ;
        if($fbaData){
            foreach($fbaData as $fba){
                if($datas['count_dimension'] == 'channel_id'){
                    $fbaDatas[$fba['channel_id']] = $fba ;
                }else if($datas['count_dimension'] == 'site_id'){
                    $fbaDatas[$fba['site_id']] = $fba ;
                }else if($datas['count_dimension'] == 'department'){
                    if (empty($fbaDatas[$fba['user_department_id']])){
                        $fbaDatas[$fba['user_department_id']]['fba_goods_value']= $fba['fba_goods_value'] ;
                        $fbaDatas[$fba['user_department_id']]['fba_stock']= $fba['fba_stock'] ;
                        $fbaDatas[$fba['user_department_id']]['fba_need_replenish']= $fba['fba_need_replenish'] ;
                        $fbaDatas[$fba['user_department_id']]['fba_predundancy_number']= $fba['fba_predundancy_number'] ;
                    }else{
                        $fbaDatas[$fba['user_department_id']]['fba_goods_value']+= $fba['fba_goods_value'] ;
                        $fbaDatas[$fba['user_department_id']]['fba_stock']+= $fba['fba_stock'] ;
                        $fbaDatas[$fba['user_department_id']]['fba_need_replenish']+= $fba['fba_need_replenish'] ;
                        $fbaDatas[$fba['user_department_id']]['fba_predundancy_number']+= $fba['fba_predundancy_number'] ;
                    }

                }else if($datas['count_dimension'] == 'admin_id'){
                    if (empty($fbaDatas[$fba['admin_id']])){
                        $fbaDatas[$fba['admin_id']]['fba_goods_value']= $fba['fba_goods_value'] ;
                        $fbaDatas[$fba['admin_id']]['fba_stock']= $fba['fba_stock'] ;
                        $fbaDatas[$fba['admin_id']]['fba_need_replenish']= $fba['fba_need_replenish'] ;
                        $fbaDatas[$fba['admin_id']]['fba_predundancy_number']= $fba['fba_predundancy_number'] ;
                    }else{
                        $fbaDatas[$fba['admin_id']]['fba_goods_value']+= $fba['fba_goods_value'] ;
                        $fbaDatas[$fba['admin_id']]['fba_stock']+= $fba['fba_stock'] ;
                        $fbaDatas[$fba['admin_id']]['fba_need_replenish']+= $fba['fba_need_replenish'] ;
                        $fbaDatas[$fba['admin_id']]['fba_predundancy_number']+= $fba['fba_predundancy_number'] ;
                    }

                }elseif($datas['count_dimension'] == 'all_channels'){
                    if (empty($fbaDatas)){
                        $fbaDatas[0]['fba_goods_value'] = $fba['fba_goods_value'];
                        $fbaDatas[0]['fba_stock'] = $fba['fba_stock'];
                        $fbaDatas[0]['fba_need_replenish'] = $fba['fba_need_replenish'];
                        $fbaDatas[0]['fba_predundancy_number'] = $fba['fba_predundancy_number'];
                    }else{
                        $fbaDatas[0]['fba_goods_value'] += $fba['fba_goods_value'];
                        $fbaDatas[0]['fba_stock'] += $fba['fba_stock'];
                        $fbaDatas[0]['fba_need_replenish'] += $fba['fba_need_replenish'];
                        $fbaDatas[0]['fba_predundancy_number'] += $fba['fba_predundancy_number'];
                    }
                }elseif($datas['count_dimension'] == 'channel_operators'){
                    if (empty($fbaDatas[$fba['operation_user_admin_id']])){
                        $fbaDatas[$fba['operation_user_admin_id']]['fba_goods_value']= $fba['fba_goods_value'] ;
                        $fbaDatas[$fba['operation_user_admin_id']]['fba_stock']= $fba['fba_stock'] ;
                        $fbaDatas[$fba['operation_user_admin_id']]['fba_need_replenish']= $fba['fba_need_replenish'] ;
                        $fbaDatas[$fba['operation_user_admin_id']]['fba_predundancy_number']= $fba['fba_predundancy_number'] ;
                    }else{
                        $fbaDatas[$fba['operation_user_admin_id']]['fba_goods_value']+= $fba['fba_goods_value'] ;
                        $fbaDatas[$fba['operation_user_admin_id']]['fba_stock']+= $fba['fba_stock'] ;
                        $fbaDatas[$fba['operation_user_admin_id']]['fba_need_replenish']+= $fba['fba_need_replenish'] ;
                        $fbaDatas[$fba['operation_user_admin_id']]['fba_predundancy_number']+= $fba['fba_predundancy_number'] ;
                    }
                }else{
                    $fbaDatas[] = $fba ;
                }
            }
        }
        foreach($lists as $k=>$list2){
            if($datas['count_dimension'] == 'channel_id'){
                $fba_data = empty($fbaDatas[$list2['channel_id']]) ? array() :  $fbaDatas[$list2['channel_id']];
            }else if($datas['count_dimension'] == 'site_id'){
                $fba_data = empty($fbaDatas[$list2['site_id']]) ? array() :  $fbaDatas[$list2['site_id']];
            }else if($datas['count_dimension'] == 'department'){
                $fba_data = empty($fbaDatas[$list2['user_department_id']]) ? array() :  $fbaDatas[$list2['user_department_id']];
            }else if($datas['count_dimension'] == 'admin_id'){
                $fba_data = empty($fbaDatas[$list2['admin_id']]) ? array() :  $fbaDatas[$list2['admin_id']];
            }elseif($datas['count_dimension'] == 'channel_operators'){
                $fba_data = empty($fbaDatas[$list2['operation_user_admin_id']]) ? array() :  $fbaDatas[$list2['operation_user_admin_id']];
            }else{
                $fba_data = empty($fbaDatas[0]) ? array() :  $fbaDatas[0];
            }
            if (!empty($fields['fba_goods_value'])) {  //在库总成本
                $lists[$k]['fba_goods_value'] = empty($fba_data) ? null : $fba_data['fba_goods_value'] ;
            }
            if (!empty($fields['fba_stock'])) {  //FBA 库存
                $lists[$k]['fba_stock'] = empty($fba_data) ? null : $fba_data['fba_stock'] ;
            }
            if (!empty($fields['fba_need_replenish'])) {  //需补货sku
                $lists[$k]['fba_need_replenish'] = empty($fba_data) ? null : $fba_data['fba_need_replenish'] ;
            }
            if (!empty($fields['fba_predundancy_number'])) {  //冗余FBA 数
                $lists[$k]['fba_predundancy_number'] = empty($fba_data) ? null : $fba_data['fba_predundancy_number'] ;
            }
        }
        return $lists;
    }

    /**
     * 获取运营人员维度统计列表
     * @param string $where
     * @param array $datas
     * @param string $limit
     * @param string $sort
     * @param string $order
     * @param int $count_tip
     * @param array $channel_arr
     * @return array
     * @author: LWZ
     */
    public function getListByOperators(
        $where = '',
        $datas = [],
        $limit = '',
        $sort = '',
        $order = '',
        $count_tip = 0,
        array $channel_arr = [],
        array $currencyInfo = [],
        $exchangeCode = '1',
        array $timeLine = [],
        array $deparmentData = [],
        int $userId = 0,
        int $adminId = 0 ,
        array $rateInfo = [],
        int $day_param = 1
    ) {
        $searchKey = $datas['searchKey'] ?? '';
        $searchVal = $datas['searchVal'] ?? '';
        $matchType = $datas['matchType'] ?? '';
        $this->dws_user_id_mod = getUserIdMod($datas['user_id']);
        $searchVal = self::escape(stripslashes($searchVal));
        $where = $this->getSearchValWhere($where,$searchKey,$searchVal,$matchType);
        $this->tax_field = $this->getRemoveTaxField($datas);
        $datas['is_month_table'] = $this->is_month_table($datas)?1:0;
        $ym_where = $this->getYnWhere($datas['max_ym'] , $datas['min_ym'] ) ;

        //没有按周期统计 ， 按指标展示
        if ($datas['show_type'] == 2) {
            $fields_all = $this->getOperatorsFields($datas);
            $fields = $fields_all['fields'];
            $operation_table_field = $fields_all['operation_table_field'];
        } else {
            $fields_all = $this->getOperatorsTimeFields($datas, $timeLine);
            $fields = $fields_all['fields'];
            $operation_table_field = $fields_all['operation_table_field'];
        }
        if (empty($fields)) {
            return array();
        }

        if(($datas['count_periods'] == 0 || $datas['count_periods'] == 1) && $datas['cost_count_type'] != 2){ //按天或无统计周期
            $table = $this->operationTable($datas,$ym_where,'day',$operation_table_field);
        }else if($datas['count_periods'] == 2 && $datas['cost_count_type'] != 2){  //按周
            $table = $this->operationTable($datas,$ym_where,'week',$operation_table_field);
        }else if($datas['count_periods'] == 3 || $datas['count_periods'] == 4 || $datas['count_periods'] == 5 ){
            $table = $this->operationTable($datas,$ym_where,'month',$operation_table_field);
        }else if($datas['cost_count_type'] == 2){//先进先出只能读取月报
            $table = $this->operationTable($datas,$ym_where,'month',$operation_table_field);
        } else {
            return [];
        }

        $where_detail = is_array($datas['where_detail']) ? $datas['where_detail'] : json_decode($datas['where_detail'], true);
        if (empty($where_detail)) {
            $where_detail = array();
        }
        $orderby = '';
        if( !empty($datas['sort_target']) && !empty($fields[$datas['sort_target']]) && !empty($datas['sort_order']) ){
            $orderby = '(('.$fields[$datas['sort_target']].') IS NULL) ,  (' . $fields[$datas['sort_target']] . ' ) ' . $datas['sort_order'];
        }elseif ($datas['sort_target'] == 'create_time' && !empty($datas['sort_order'])){
            $orderby = " max(report.create_time) {$datas['sort_order']}";
        }

        if (!empty($order) && !empty($sort) && !empty($fields[$sort]) && $datas['limit_num'] == 0 ) {
            $orderby =  '(('.$fields[$sort].') IS NULL) ,  (' . $fields[$sort] . ' ) ' . $order;
        }

        $orderbyTmp = $orderby;

        $rt = array();
        $fields_arr = array();
        foreach ($fields as $field_name => $field) {
            $fields_arr[] = $field . ' AS "' . $field_name . '"';
        }


        $mod_where = "report.user_id_mod = " . $this->dws_user_id_mod;

        //$where = $ym_where . " AND " .$mod_where . " AND report.available = 1 " .  (empty($where) ? "" : " AND " . $where) ;
//        $field_data = str_replace("{:RATE}", $exchangeCode, implode(',', $fields_arr));
//        if ($datas['is_new_index'] == 0){
//
//        }else{
//            $field_data = str_replace("{:RATE}", $exchangeCode, implode(',', $fields_arr));
//        }
        $rate_table = $this->joinRateTable($datas,$fields_arr,$table,$exchangeCode,$day_param);
        $field_data = $rate_table['field_data'];
        $table      = $rate_table['table'];


        if (!empty($where_detail['operators_id'])) {
            if(is_array($where_detail['operators_id'])){
                $operators_str = implode(',', $where_detail['operators_id']);
            }else{
                $operators_str = $where_detail['operators_id'] ;
            }
            $where .= " AND report.goods_operation_user_admin_id  IN ( " . $operators_str . " ) ";
        }

        $orderbyTmp = $orderby;
        if ($datas['count_periods'] > 0 && $datas['show_type'] == '2') {
            if($datas['count_periods'] == '4'){ //按季度
                $group = 'report.goods_operation_user_admin_id , report.myear , report.mquarter ';
                $orderby = 'report.goods_operation_user_admin_id ,report.myear , report.mquarter ';
            }else if($datas['count_periods'] == '5') { //年
                $group = 'report.goods_operation_user_admin_id , report.myear' ;
                $orderby = 'report.goods_operation_user_admin_id , report.myear ';
            }else {
                $group = 'report.goods_operation_user_admin_id_group  ';
                $orderby = "report.goods_operation_user_admin_id_group ";
            }

        }else{
            $group = 'report.goods_operation_user_admin_id  ';
            $orderby = empty($orderby) ? ('report.goods_operation_user_admin_id ') : ($orderby . ' , report.goods_operation_user_admin_id');
        }
        if (isset($datas['is_time_sort']) && $datas['is_time_sort'] == 1 && !empty($orderbyTmp) && $datas['count_periods'] > 0 && $datas['show_type'] == '2'){//按周期排序添加
            $orderby = $orderbyTmp;
        }
        $having = '';
        $where .= " AND report.goods_operation_user_admin_id > 0";

        if (!empty($where_detail)) {
            $target_wheres = empty($where_detail['target']) ? array() : $where_detail['target'];
            $condition_relation = $where_detail['condition_relation'] ?? 'AND';
            if (!empty($target_wheres)) {
                foreach ($target_wheres as $target_where) {
                    if(!empty($fields[$target_where['key']])){
                        $where_value = $target_where['value'];
                        if (strpos($where_value, '%') !== false) {
                            $where_value = round((float)$where_value / 100, 4);
                        }
                        if (empty($having)) {
                            $having .= '(' . $fields[$target_where['key']] . ') ' . $target_where['formula'] . $where_value;
                        } else {
                            $having .= ' ' . $condition_relation . ' (' . $fields[$target_where['key']] . ') ' . $target_where['formula'] . $where_value;
                        }
                    }
                }
            }
        }

        if (!empty($having)) {
            $group .= " having " . $having;
        }
        if (isset($datas['is_time_sort']) && $datas['is_time_sort'] == 1 && !empty($orderbyTmp) && $datas['count_periods'] > 0 && $datas['show_type'] == '2'){//按周期排序添加
            $orderby = $orderbyTmp;
        }

        $group = str_replace("{:RATE}", $exchangeCode, $group);
        $orderby = str_replace("{:RATE}", $exchangeCode, $orderby);
        $group = str_replace("{:ERP_RATE}", $exchangeCode, $group ?? '');
        $where = str_replace("{:ERP_RATE}", $exchangeCode, $where ?? '');
        $orderby = str_replace("{:ERP_RATE}", $exchangeCode, $orderby ?? '');
        $orderby = str_replace("{:RMBRATE}",$this->cost_logistics_rate , $orderby);
        $where = str_replace("{:RMBRATE}",$this->cost_logistics_rate , $where);
        $group = str_replace("{:RMBRATE}",$this->cost_logistics_rate , $group);
        $group = str_replace("{:DAY}", $day_param, $group);
        $orderby = str_replace("{:DAY}", $day_param, $orderby);
        $limit_num = 0 ;
        $count = 0 ;
        if($datas['show_type'] == 2 && $datas['limit_num'] > 0 ){
            $limit_num = $datas['limit_num'] ;
        }
        if(!empty($datas['compare_data'])){
            $compareData = $this->getCompareDatas($datas , 2 , $exchangeCode , $day_param , $currencyInfo ) ;
        }else{
            $compareData = array();
        }
        if ($count_tip == 2) { //仅统计总条数
            $count = $this->getTotalNum($where, $table, $group,false ,false,$compareData,$field_data);
            if($limit_num > 0 && $count > $limit_num){
                $count = $limit_num ;
            }
        } else if ($count_tip == 1) {  //仅仅统计列表
            if ($datas['is_count'] == 1){
                if($datas['total_status'] == 1){
                    $count = $this->getTotalNum($where, $table, $group,false ,false,$compareData,$field_data);
                }
                $where = $this->getLimitWhere($where,$datas,$table,$limit,$orderby,$group);
                if(!empty($where_detail['target'])){
                    $lists = $this->queryList($fields,$datas,$exchangeCode,$day_param,$field_data,$table,$where,$group,false,false ,$compareData);
                }else {
                    //获取总计时 ， 更改连表ON 为 origin_table.user_id = compare_table1.user_id ;
                    if(!empty($compareData)){
                        foreach($compareData as $k3=>$cdata3){
                            $compareData[$k3]['on'] = 'origin_table.user_id = compare_table'.($k3+1).'.user_id' ;
                        }
                    }
                    $lists = $this->select($where, $field_data, $table, "", "", "", false,null,300,false,$compareData);
                }
            }elseif($datas['is_median'] == 1){
                $median_limit = !empty($datas['limit_num']) ? $limit : '';
                $median_order = !empty($datas['limit_num']) ? $orderby : '';
                $origin_sql = $this->getSelectSql($where, $field_data, $table, $median_limit, $median_order, $group);
                $lists = $this->getMedianValue($datas,$origin_sql);
            }else{
                $lists = $this->select($where, $field_data, $table, $limit, $orderby, $group,false,null,300,false,$compareData,[],[],$this->isUseTmpTable,$this->isReadTmpTable);
            }
        } else {  //统计列表和总条数
            if ($datas['is_count'] == 1){
                if($datas['total_status'] == 1){
                    $count = $this->getTotalNum($where, $table, $group,false,false,$compareData,$field_data);
                }
                $where = $this->getLimitWhere($where,$datas,$table,$limit,$orderby,$group);
                if(!empty($where_detail['target'])){
                    $lists = $this->queryList($fields,$datas,$exchangeCode,$day_param,$field_data,$table,$where,$group,false,false,$compareData);
                }else {
                    //获取总计时 ， 更改连表ON 为 origin_table.user_id = compare_table1.user_id ;
                    if(!empty($compareData)){
                        foreach($compareData as $k3=>$cdata3){
                            $compareData[$k3]['on'] = 'origin_table.user_id = compare_table'.($k3+1).'.user_id' ;
                        }
                    }
                    $lists = $this->select($where, $field_data, $table,"","","",false,null,300,false,$compareData);
                }
                $logger = ApplicationContext::getContainer()->get(LoggerFactory::class)->get('dataark', 'debug');
                $logger->info('getListByOperators Total Request', [$this->getLastSql()]);
            }elseif($datas['is_median'] == 1){
                $median_limit = !empty($datas['limit_num']) ? $limit : '';
                $median_order = !empty($datas['limit_num']) ? $orderby : '';
                $origin_sql = $this->getSelectSql($where, $field_data, $table, $median_limit, $median_order, $group);
                $lists = $this->getMedianValue($datas,$origin_sql);
            }else{
                $parallel = new Parallel();
                $parallel->add(function () use($where, $field_data, $table, $limit, $orderby, $group,$compareData){
                    $lists = $this->select($where, $field_data, $table, $limit, $orderby, $group,false,null,300,false,$compareData,[],[],$this->isUseTmpTable,$this->isReadTmpTable);
                    return $lists;
                });
                $parallel->add(function () use($where, $table, $group,$compareData,$field_data){
                    $count = $this->getTotalNum($where, $table, $group,false,false,$compareData,$field_data);
                    return $count;
                });

                try{
                    // $results 结果为 [1, 2]
                    $results = $parallel->wait();
                    $lists = $results[0];
                    $count = $results[1];
                } catch(ParallelExecutionException $e){
                    // $e->getResults() 获取协程中的返回值。
                    // $e->getThrowables() 获取协程中出现的异常。
                }

                $logger = ApplicationContext::getContainer()->get(LoggerFactory::class)->get('dataark', 'debug');
                $logger->info('getListByOperators Request', [$this->getLastSql()]);
            }
            if($limit_num > 0 && $count > $limit_num){
                $count = $limit_num ;
            }
        }
        $targets = is_array($datas['target']) ? $datas['target'] :  explode(',' , $datas['target'])  ;
        if(!empty($lists) && empty($datas['is_median']) && $datas['show_type'] == 2 && $datas['limit_num'] > 0 && !empty($order) && !empty($datas['sort_target']) && !empty($sort) && !empty($datas['sort_order'] &&  in_array($sort , $targets) && in_array($datas['sort_target'] , $targets))){
            //根据字段对数组$lists进行排列
            $sort_names = array_column($lists,$sort);
            $order2  =  $order == 'desc' ? \SORT_DESC : \SORT_ASC ;
            array_multisort($sort_names,$order2,$lists);
        }
        $rt['lists'] = empty($lists) ? array() : $lists;
        $rt['lists'] = $this->handleReturnData($datas,$rt['lists']);
        $rt['count'] = intval($count);
        return $rt;
    }



    public function handleReturnData($params,$lists){
        if ($params['show_type'] == 2 && !empty($lists)){//目前只有按指标展示的需要处理
            if (!empty($this->add_percentage_arr)){//百分比指标需要处理
                foreach ($lists as $key => $value){

                    foreach ($this->add_percentage_arr as $item){
                        $denominator_field = $this->finance_index_percentage_arr[$item]['denominator_field'];
                        $molecule_field    = str_replace("_rate","",$item);
                        if (isset($value[$denominator_field]) && $value[$denominator_field] != 0 && isset($value[$molecule_field])){
                            $lists[$key][$item] = round($value[$molecule_field]/$value[$denominator_field],4);
                        }else{
                            $lists[$key][$item] = '-';
                        }
                    }

                }
            }

        }

        return $lists;
    }

    //获取运营人员维度指标字段
    private function getOperatorsFields($datas = array())
    {
        $fields = array();
        $fields['user_id'] = 'max(report.user_id)';
        $fields['goods_operation_user_admin_id'] = 'max(report.goods_operation_user_admin_id)';

        if ($datas['count_periods'] == '1' && $datas['show_type'] == '2') { //按天
            $fields['time'] = "concat(cast(max(report.myear) as varchar), '-', cast(max(report.mmonth) as varchar), '-', cast(max(report.mday) as varchar))";
        } else if ($datas['count_periods'] == '2' && $datas['show_type'] == '2') { //按周
            $fields['time'] = "concat(cast(max(report.mweekyear) as varchar), '-', cast(max(report.mweek) as varchar))";
        } else if ($datas['count_periods'] == '3' && $datas['show_type'] == '2') { //按月
            $fields['time'] = "concat(cast(max(report.myear) as varchar), '-', cast(max(report.mmonth) as varchar))";
        } else if ($datas['count_periods'] == '4' && $datas['show_type'] == '2') {  //按季
            $fields['time'] = "concat(cast(max(report.myear) as varchar), '-',  cast(max(report.mquarter) as varchar))";
        } else if ($datas['count_periods'] == '5' && $datas['show_type'] == '2') { //按年
            $fields['time'] = "cast(max(report.myear) as varchar)";
        }

        $targets = explode(',', $datas['target']);
        $targets_temp = $targets;//基础指标缓存

        //自定义指标
        $datas_ark_custom_target_md = new DatasArkCustomTargetMySQLModel([], $this->dbhost, $this->codeno);
        $target_key_str = trim("'" . implode("','",explode(",",$datas['target'])) . "'");
        $target_template = $datas['is_new_index'] == 1 ? 1 : 0;
        $custom_targets_list = $datas_ark_custom_target_md->getList("user_id = {$datas['user_id']} AND target_type IN(1, 2) AND target_key IN ({$target_key_str}) AND count_dimension = 1 AND target_template = {$target_template}");
        //自定义公式里包含新增指标
        $custom_targets_list = $this->addNewTargets($datas_ark_custom_target_md,$datas['user_id'],$custom_targets_list);
        $targets = $this->addCustomTargets($targets,$custom_targets_list);
        $where_detail = is_array($datas['where_detail']) ? $datas['where_detail'] : json_decode($datas['where_detail'], true);
        $operation_table_field = array();
        if ($datas['is_new_index'] == 1){
            $fields_all = $this->handleNewIndexField($datas,$fields,$targets,3);
            $fields = $fields_all['fields'];
            $operation_table_field = $fields_all['operation_table_field'];
        }
        else{
            if (in_array('goods_visitors', $targets)) {  // 买家访问次数
                $fields['goods_visitors'] = 'SUM(report.byorder_user_sessions)';
            }
            if (in_array('goods_conversion_rate', $targets)) { //订单商品数量转化率
                if(!empty($where_detail['target']) && $datas['is_count'] == 1) {
                    $fields['quantity_of_goods_ordered'] = 'sum( report.byorder_quantity_of_goods_ordered )';
                    $fields['goods_visitors'] = 'sum( report.byorder_user_sessions )';
                }
                $fields['goods_conversion_rate'] = 'sum( report.byorder_quantity_of_goods_ordered ) * 1.0000 / nullif(sum( report.byorder_user_sessions ) ,0)';
            }

            if (in_array('sale_sales_volume', $targets) || in_array('sale_refund_rate', $targets)  || in_array('cpc_direct_sales_volume_rate', $targets) || in_array('cpc_indirect_sales_volume_rate', $targets)) { //销售量
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['sale_sales_volume'] = " sum( report.byorder_sales_volume +  report.byorder_group_id ) ";
                } elseif ($datas['sale_datas_origin'] == '2') {
                    $fields['sale_sales_volume'] = " sum( report.report_sales_volume +  report.report_group_id ) ";
                }
            }
            if (in_array('sale_many_channel_sales_volume', $targets)) { //多渠道数量
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['sale_many_channel_sales_volume'] = "sum( report.byorder_group_id )";
                } elseif ($datas['sale_datas_origin'] == '2') {
                    $fields['sale_many_channel_sales_volume'] = "sum( report.report_group_id )";
                }
            }
            if (in_array('sale_sales_quota', $targets) || in_array('cost_profit_profit_rate', $targets) || in_array('amazon_fee_rate', $targets) || in_array('purchase_logistics_cost_rate', $targets) || in_array('operate_fee_rate', $targets) || in_array('evaluation_fee_rate', $targets) || in_array('cpc_cost_rate', $targets) || in_array('cpc_turnover_rate', $targets)) {  //商品销售额
                if ($datas['sale_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['sale_sales_quota'] = "sum( report.byorder_sales_quota )";
                    } else {
                        $fields['sale_sales_quota'] = "sum( report.byorder_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                } elseif ($datas['sale_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['sale_sales_quota'] = "sum( report.report_sales_quota )";
                    } else {
                        $fields['sale_sales_quota'] = "sum( report.report_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                }
            }

            if (in_array('sale_return_goods_number', $targets) || in_array('sale_refund_rate', $targets)) {  //退款量
                if ($datas['refund_datas_origin'] == '1') {
                    $fields['sale_return_goods_number'] = "sum(report.byorder_refund_num )";
                } elseif ($datas['refund_datas_origin'] == '2') {
                    $fields['sale_return_goods_number'] = "sum(report.report_refund_num )";
                }
            }
            if (in_array('sale_refund', $targets)) {  //退款
                if ($datas['refund_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['sale_refund'] = "sum( 0 - report.byorder_refund )";
                    } else {
                        $fields['sale_refund'] = "sum( (0 - report.byorder_refund) * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                    }
                } elseif ($datas['refund_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['sale_refund'] = "sum( 0 - report.report_refund )";
                    } else {
                        $fields['sale_refund'] = "sum( (0 - report.report_refund) * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                    }
                }
            }
            if (in_array('sale_refund_rate', $targets)) {  //退款率
                $fields['sale_refund_rate'] = $fields['sale_return_goods_number'] . " * 1.0000 / nullif( " . $fields['sale_sales_volume'] . " ,0) ";
            }

            if (in_array('amazon_fee', $targets) || in_array('amazon_fee_rate', $targets)) {  //亚马逊费用
                if ($datas['currency_code'] != 'ORIGIN' && !empty($this->tax_field) && strpos($this->tax_field,'{:RATE') === false){
                    $this->tax_field .= "* ({:RATE} / COALESCE(rates.rate ,1)) ";
                }
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_fee'] = 'SUM(CASE WHEN report.goods_operation_pattern = 1 THEN report.byorder_goods_amazon_fee ELSE ( report.byorder_channel_amazon_order_fee + report.byorder_channel_amazon_refund_fee + report.byorder_channel_amazon_storage_fee + report.byorder_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee'.$this->operate_channel_amazon_goods_fee.') END '.$this->tax_field.')';
                    } else {
                        $fields['amazon_fee'] = 'SUM(CASE WHEN report.goods_operation_pattern = 1 THEN (report.byorder_goods_amazon_fee * ({:RATE} / COALESCE(rates.rate ,1))) ELSE ((report.byorder_channel_amazon_order_fee'.$this->operate_channel_amazon_goods_fee.') * ({:RATE} / COALESCE(rates.rate ,1))  + report.byorder_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.byorder_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.byorder_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_order_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1))) END '.$this->tax_field.')';
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    $estimated_monthly_storage_fee_field = "";
                    if ($datas['is_month_table'] == 1){
                        $estimated_monthly_storage_fee_field = " - report.report_estimated_monthly_storage_fee + report.monthly_sku_estimated_monthly_storage_fee";
                    }
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_fee'] = 'SUM(CASE WHEN report.goods_operation_pattern = 1 THEN (report.report_goods_amazon_fee'.$estimated_monthly_storage_fee_field.') ELSE ( report.report_channel_amazon_order_fee + report.report_channel_amazon_refund_fee + report.report_channel_amazon_storage_fee + report.report_channel_amazon_other_fee +    report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee'.$this->operate_channel_amazon_goods_fee.'  ) END '.$this->tax_field.')';
                    } else {
                        $fields['amazon_fee'] = 'SUM(CASE WHEN report.goods_operation_pattern = 1 THEN ((report.report_goods_amazon_fee'.$estimated_monthly_storage_fee_field.') * ({:RATE} / COALESCE(rates.rate ,1)))  ELSE ((report.report_channel_amazon_order_fee'.$this->operate_channel_amazon_goods_fee.') * ({:RATE} / COALESCE(rates.rate ,1))  + report.report_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.report_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.report_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_order_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1))   ) END '.$this->tax_field.')';
                    }
                }

            }

            if (in_array('amazon_fee_rate', $targets)) {  //亚马逊费用占比
                $fields['amazon_fee_rate'] = '(' . $fields['amazon_fee'] . ") * 1.0000 / nullif( " . $fields['sale_sales_quota'] . " , 0 ) ";
            }

            if (in_array('amazon_order_fee', $targets)) {  //亚马逊-订单费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_order_fee'] = 'SUM(report.byorder_channel_amazon_order_fee + report.bychannel_channel_amazon_order_fee'.$this->operate_channel_amazon_order_fee.')';
                    } else {
                        $fields['amazon_order_fee'] = 'SUM(report.byorder_channel_amazon_order_fee * ({:RATE} / COALESCE(rates.rate ,1)) + (report.bychannel_channel_amazon_order_fee'.$this->operate_channel_amazon_order_fee.') * ({:RATE} / COALESCE(rates.rate ,1)))';
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_order_fee'] = 'SUM(report.report_channel_amazon_order_fee + report.bychannel_channel_amazon_order_fee'.$this->operate_channel_amazon_order_fee.')';
                    } else {
                        $fields['amazon_order_fee'] = 'SUM(report.report_channel_amazon_order_fee * ({:RATE} / COALESCE(rates.rate ,1)) + (report.bychannel_channel_amazon_order_fee'.$this->operate_channel_amazon_order_fee.') * ({:RATE} / COALESCE(rates.rate ,1)))';
                    }

                }
            }

            if (in_array('amazon_sales_commission', $targets)) {  //亚马逊销售佣金
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_sales_commission'] = "sum( report.byorder_platform_sales_commission ) ";
                    } else {
                        $fields['amazon_sales_commission'] = "sum( report.byorder_platform_sales_commission * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_sales_commission'] = "sum( report.report_platform_sales_commission ) ";
                    } else {
                        $fields['amazon_sales_commission'] = "sum( report.report_platform_sales_commission * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                    }
                }
            }

            if (in_array('amazon_fba_delivery_fee', $targets)) {  //FBA代发货费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_fba_delivery_fee'] = "sum( report.byorder_fba_generation_delivery_cost + report.byorder_fbaperorderfulfillmentfee + report.byorder_fbaweightbasedfee - report.byorder_profit)";
                    } else {
                        $fields['amazon_fba_delivery_fee'] = "sum( report.byorder_fba_generation_delivery_cost * ({:RATE} / COALESCE(rates.rate ,1))+ report.byorder_fbaperorderfulfillmentfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbaweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)) -report.byorder_profit * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_fba_delivery_fee'] = "sum( report.report_fba_generation_delivery_cost + report.report_fbaperorderfulfillmentfee + report.report_fbaweightbasedfee - report.report_profit)";
                    } else {
                        $fields['amazon_fba_delivery_fee'] = "sum( report.report_fba_generation_delivery_cost * ({:RATE} / COALESCE(rates.rate ,1))+ report.report_fbaperorderfulfillmentfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbaweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)) - report.report_profit * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                }
            }

            if (in_array('amazon_multi_channel_delivery_fee', $targets)) {  //多渠道配送费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_multi_channel_delivery_fee'] = "sum( report.byorder_profit ) ";
                    } else {
                        $fields['amazon_multi_channel_delivery_fee'] = "sum( report.byorder_profit * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_multi_channel_delivery_fee'] = "sum( report.report_profit ) ";
                    } else {
                        $fields['amazon_multi_channel_delivery_fee'] = "sum( report.report_profit * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                    }
                }
            }

            if (in_array('amazon_settlement_fee', $targets)) {  //结算费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_settlement_fee'] = "sum( report.byorder_order_variableclosingfee + report.byorder_fixedclosingfee + report.byorder_refund_variableclosingfee )";
                    } else {
                        $fields['amazon_settlement_fee'] = "sum( report.byorder_order_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fixedclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_refund_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_settlement_fee'] = "sum( report.report_order_variableclosingfee + report.report_fixedclosingfee + report.report_refund_variableclosingfee )";
                    } else {
                        $fields['amazon_settlement_fee'] = "sum( report.report_order_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fixedclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_refund_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                }
            }

            if (in_array('amazon_refund_fee', $targets)) { //亚马逊-退货退款费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_refund_fee'] = 'SUM(report.byorder_channel_amazon_refund_fee + report.bychannel_channel_amazon_refund_fee)';
                    } else {
                        $fields['amazon_refund_fee'] = 'SUM(report.byorder_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1)))';
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_refund_fee'] = 'SUM(report.report_channel_amazon_refund_fee + report.bychannel_channel_amazon_refund_fee)';
                    } else {
                        $fields['amazon_refund_fee'] = 'SUM(report.report_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1)))';
                    }
                }
            }
            if (in_array('amazon_fba_return_processing_fee', $targets)) {  //FBA退货处理费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_fba_return_processing_fee'] = "sum( report.byorder_fba_refund_treatment_fee + report.byorder_fbacustomerreturnperorderfee+report.byorder_fbacustomerreturnweightbasedfee)";
                    } else {
                        $fields['amazon_fba_return_processing_fee'] = "sum( report.byorder_fba_refund_treatment_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbacustomerreturnperorderfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbacustomerreturnweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)))";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_fba_return_processing_fee'] = "sum( report.report_fba_refund_treatment_fee + report.report_fbacustomerreturnperorderfee + report.report_fbacustomerreturnweightbasedfee)";
                    } else {
                        $fields['amazon_fba_return_processing_fee'] = "sum( report.report_fba_refund_treatment_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbacustomerreturnperorderfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbacustomerreturnweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)))";
                    }
                }
            }
            if (in_array('amazon_return_sale_commission', $targets)) {  //返还亚马逊销售佣金
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_return_sale_commission'] = "sum( report.byorder_return_and_return_sales_commission )";
                    } else {
                        $fields['amazon_return_sale_commission'] = "sum( report.byorder_return_and_return_sales_commission * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_return_sale_commission'] = "sum( report.report_return_and_return_sales_commission )";
                    } else {
                        $fields['amazon_return_sale_commission'] = "sum( report.report_return_and_return_sales_commission * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                }
            }

            if (in_array('amazon_return_shipping_fee', $targets)) {  //返还运费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_return_shipping_fee'] = "sum( report.byorder_returnshipping )";
                    } else {
                        $fields['amazon_return_shipping_fee'] = "sum( report.byorder_returnshipping * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_return_shipping_fee'] = "sum( report.report_returnshipping )";
                    } else {
                        $fields['amazon_return_shipping_fee'] = "sum( report.report_returnshipping * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                }
            }

            if (in_array('amazon_refund_deducted_commission', $targets)) {  //退款扣除佣金
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_refund_deducted_commission'] = "sum( report.byorder_return_and_return_commission )";
                    } else {
                        $fields['amazon_refund_deducted_commission'] = "sum( report.byorder_return_and_return_commission * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_refund_deducted_commission'] = "sum( report.report_return_and_return_commission )";
                    } else {
                        $fields['amazon_refund_deducted_commission'] = "sum( report.report_return_and_return_commission * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                }
            }

            if (in_array('amazon_stock_fee', $targets)) { //亚马逊-库存费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_stock_fee'] = 'SUM(CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_channel_amazon_storage_fee + report.byorder_channel_amazon_storage_fee) ELSE report.byorder_estimated_monthly_storage_fee END )';
                    } else {
                        $fields['amazon_stock_fee'] = 'SUM(CASE WHEN report.goods_operation_pattern = 2 THEN ( report.bychannel_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))) ELSE (report.byorder_estimated_monthly_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))) END )';
                    }
                } else {
                    $estimated_monthly_storage_fee_field = "report.report_estimated_monthly_storage_fee";
                    if ($datas['is_month_table'] == 1){
                        $estimated_monthly_storage_fee_field = " report.monthly_sku_estimated_monthly_storage_fee";
                    }
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_stock_fee'] = 'SUM(CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_channel_amazon_storage_fee + report.report_channel_amazon_storage_fee) ELSE '.$estimated_monthly_storage_fee_field.' END )';
                    } else {
                        $fields['amazon_stock_fee'] = 'SUM(CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))) ELSE ('.$estimated_monthly_storage_fee_field.'* ({:RATE} / COALESCE(rates.rate ,1))) END )';
                    }
                }
            }

            if (in_array('amazon_fba_monthly_storage_fee', $targets)) {  //FBA月仓储费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_fba_monthly_storage_fee'] = "sum( CASE WHEN report.goods_operation_pattern = 2 THEN report.bychannel_fba_storage_fee ELSE report.byorder_estimated_monthly_storage_fee END  )";
                    } else {
                        $fields['amazon_fba_monthly_storage_fee'] = "sum( CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_fba_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))) ELSE (report.byorder_estimated_monthly_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))) END  )";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    $estimated_monthly_storage_fee_field = "report.report_estimated_monthly_storage_fee";
                    if ($datas['is_month_table'] == 1){
                        $estimated_monthly_storage_fee_field = " report.monthly_sku_estimated_monthly_storage_fee";
                    }
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_fba_monthly_storage_fee'] = "sum( CASE WHEN report.goods_operation_pattern = 2 THEN report.bychannel_fba_storage_fee ELSE {$estimated_monthly_storage_fee_field}  END )";
                    } else {
                        $fields['amazon_fba_monthly_storage_fee'] = "sum( CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_fba_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))) ELSE {$estimated_monthly_storage_fee_field} * ({:RATE} / COALESCE(rates.rate ,1)) END  )";
                    }
                }
            }

            if (in_array('amazon_long_term_storage_fee', $targets)) { //FBA长期仓储费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_long_term_storage_fee'] = 'SUM(report.byorder_long_term_storage_fee + report.bychannel_fba_long_term_storage_fee)';
                    } else {
                        $fields['amazon_long_term_storage_fee'] = 'SUM(report.byorder_long_term_storage_fee  * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_fba_long_term_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_long_term_storage_fee'] = 'SUM(report.report_long_term_storage_fee + report.bychannel_fba_long_term_storage_fee)';
                    } else {
                        $fields['amazon_long_term_storage_fee'] = 'SUM(report.report_long_term_storage_fee  * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_fba_long_term_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    }
                }
            }

            if (in_array('amazon_other_fee', $targets)) {  //其他亚马逊费用
                if ($datas['currency_code'] != 'ORIGIN' && !empty($this->tax_field) && strpos($this->tax_field,'{:RATE') === false){
                    $this->tax_field .= "* ({:RATE} / COALESCE(rates.rate ,1)) ";
                }
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_other_fee'] = "sum( CASE WHEN report.goods_operation_pattern = 2 THEN (report.byorder_channel_amazon_other_fee + report.bychannel_channel_amazon_other_fee{$this->operate_channel_amazon_other_fee} ) ELSE report.byorder_goods_amazon_other_fee END {$this->tax_field}) ";
                    } else {
                        $fields['amazon_other_fee'] = "sum(CASE WHEN report.goods_operation_pattern = 2 THEN (report.byorder_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1)) + (report.bychannel_channel_amazon_other_fee{$this->operate_channel_amazon_other_fee}) * ({:RATE} / COALESCE(rates.rate ,1)) ) ELSE ((report.byorder_goods_amazon_other_fee) * ({:RATE} / COALESCE(rates.rate ,1))) END   {$this->tax_field}) ";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['amazon_other_fee'] = "sum(CASE WHEN report.goods_operation_pattern = 2 THEN (report.report_channel_amazon_other_fee + report.bychannel_channel_amazon_other_fee{$this->operate_channel_amazon_other_fee}) ELSE report.report_goods_amazon_other_fee END   {$this->tax_field}) ";
                    } else {
                        $fields['amazon_other_fee'] = "sum(CASE WHEN report.goods_operation_pattern = 2 THEN (report.report_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1)) + (report.bychannel_channel_amazon_other_fee{$this->operate_channel_amazon_other_fee}) * ({:RATE} / COALESCE(rates.rate ,1))) ELSE ((report.report_goods_amazon_other_fee) * ({:RATE} / COALESCE(rates.rate ,1))) END {$this->tax_field}) ";
                    }
                }
            }

            if (in_array('promote_discount', $targets)) {  //promote折扣
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['promote_discount'] = "SUM(report.byorder_promote_discount)";
                    } else {
                        $fields['promote_discount'] = "SUM(report.byorder_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['promote_discount'] = "SUM(report.report_promote_discount)";
                    } else {
                        $fields['promote_discount'] = "SUM(report.report_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                }
            }

            if (in_array('promote_refund_discount', $targets)) {  //退款返还promote折扣
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['promote_refund_discount'] = "SUM(report.byorder_refund_promote_discount)";
                    } else {
                        $fields['promote_refund_discount'] = "SUM(report.byorder_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['promote_refund_discount'] = "SUM(report.report_refund_promote_discount)";
                    } else {
                        $fields['promote_refund_discount'] = "SUM(report.report_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    }
                }
            }

            if (in_array('promote_store_fee', $targets)) { //店铺促销费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['promote_store_fee'] = 'SUM(report.byorder_refund_promote_discount + report.byorder_promote_discount + report.bychannel_coupon_redemption_fee  + report.bychannel_run_lightning_deal_fee)';
                    } else {
                        $fields['promote_store_fee'] = 'SUM(report.byorder_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1))+ report.byorder_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_coupon_redemption_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_run_lightning_deal_fee * ({:RATE} / COALESCE(rates.rate ,1)))';
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['promote_store_fee'] = 'SUM(report.report_refund_promote_discount + report.report_promote_discount + report.bychannel_coupon_redemption_fee  + report.bychannel_run_lightning_deal_fee)';
                    } else {
                        $fields['promote_store_fee'] = 'SUM(report.report_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1))+ report.report_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_coupon_redemption_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_run_lightning_deal_fee * ({:RATE} / COALESCE(rates.rate ,1)))';
                    }
                }
            }

            if (in_array('promote_coupon', $targets)) { //coupon优惠券
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['promote_coupon'] = 'SUM(report.bychannel_coupon_redemption_fee + report."bychannel_coupon_payment_eventList_tax")';
                } else {
                    $fields['promote_coupon'] = 'SUM(report.bychannel_coupon_redemption_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report."bychannel_coupon_payment_eventList_tax" * ({:RATE} / COALESCE(rates.rate ,1))  )';
                }
            }
            if (in_array('promote_run_lightning_deal_fee', $targets)) {  //RunLightningDealFee';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['promote_run_lightning_deal_fee'] = 'SUM(report.bychannel_run_lightning_deal_fee)';
                } else {
                    $fields['promote_run_lightning_deal_fee'] = 'SUM(report.bychannel_run_lightning_deal_fee * ({:RATE} / COALESCE(rates.rate ,1)) )';
                }
            }

            if (in_array('cpc_ad_fee', $targets) || in_array('cpc_cost_rate', $targets) || in_array('cpc_avg_click_cost', $targets) || in_array('cpc_acos', $targets)) {  //广告费用
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['cpc_ad_fee'] = " sum( CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_product_ads_payment_eventlist_charge + report.bychannel_product_ads_payment_eventlist_refund) ELSE (report.byorder_cpc_cost + report.byorder_cpc_sd_cost) END ) ";
                } else {
                    $fields['cpc_ad_fee'] = " sum( CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_product_ads_payment_eventlist_charge * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_product_ads_payment_eventlist_refund * ({:RATE} / COALESCE(rates.rate ,1))) ELSE (report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1))) END) ";
                }
            }
            if (in_array('cpc_cost_rate', $targets)) {  //CPC花费占比
                $fields['cpc_cost_rate'] = '(' . $fields['cpc_ad_fee'] . ") * 1.0000 / nullif( " . $fields['sale_sales_quota'] . " , 0 ) ";
            }
            if (in_array('cpc_exposure', $targets) || in_array('cpc_click_rate', $targets)) {  //CPC曝光量
                $fields['cpc_exposure'] = "sum( report.byorder_reserved_field1 + report.byorder_reserved_field2 + report.bychannel_reserved_field3 )";
            }
            if (in_array('cpc_click_number', $targets) || in_array('cpc_click_rate', $targets) || in_array('cpc_click_conversion_rate', $targets) || in_array('cpc_avg_click_cost', $targets)) {  //CPC点击次数
                $fields['cpc_click_number'] = "sum( report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks + report.bychannel_reserved_field4 )";
            }
            if (in_array('cpc_click_rate', $targets)) {  //CPC点击率
                $fields['cpc_click_rate'] = '('.$fields['cpc_click_number'].')' . " * 1.0000 / nullif( " . $fields['cpc_exposure'] . " , 0 ) ";
            }
            if (in_array('cpc_order_number', $targets) ||  in_array('cpc_click_conversion_rate', $targets)) {  //CPC订单数
                $fields['cpc_order_number'] = 'sum( report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" + report.bychannel_reserved_field7 ) ';
            }

            if (in_array('cpc_click_conversion_rate', $targets)) {  //cpc点击转化率
                $fields['cpc_click_conversion_rate'] = '('.$fields['cpc_order_number'] . ") * 1.0000 / nullif( " . $fields['cpc_click_number'] . " , 0 ) ";
            }

            if (in_array('cpc_turnover', $targets) || in_array('cpc_turnover_rate', $targets) || in_array('cpc_acos', $targets)) {  //CPC成交额
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['cpc_turnover'] = 'sum( report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d" +  report."bychannel_reserved_field5" )';
                } else {
                    $fields['cpc_turnover'] = 'sum( report."byorder_sp_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1)) + report."byorder_sd_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1))  + report."bychannel_reserved_field5" * ({:RATE} / COALESCE(rates.rate ,1))  )';
                }
            }

            if (in_array('cpc_turnover_rate', $targets)) {  //CPC成交额占比
                $fields['cpc_turnover_rate'] = '(' . $fields['cpc_turnover'] . ") * 1.0000 / nullif( " . $fields['sale_sales_quota'] . " , 0 ) ";
            }
            if (in_array('cpc_avg_click_cost', $targets)) {  //CPC平均点击花费
                $fields['cpc_avg_click_cost'] = '('.$fields['cpc_ad_fee'] . ") * 1.0000 / nullif( " . $fields['cpc_click_number'] . " , 0 ) ";
            }
            if (in_array('cpc_acos', $targets)) {  // ACOS
                $fields['cpc_acos'] = '('.$fields['cpc_ad_fee'] . ") * 1.0000 / nullif( " . $fields['cpc_turnover'] . " , 0 ) ";
            }
            if (in_array('cpc_direct_sales_volume', $targets) || in_array('cpc_direct_sales_volume_rate', $targets)) {  //CPC直接销量
                $fields['cpc_direct_sales_volume'] = 'sum( report."byorder_sd_attributedConversions7dSameSKU" + report."byorder_sp_attributedConversions7dSameSKU" + report.bychannel_reserved_field8  )';
            }
            if (in_array('cpc_direct_sales_quota', $targets)) {  //CPC直接销售额
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['cpc_direct_sales_quota'] = 'sum( report."byorder_sd_attributedSales7dSameSKU" + report."byorder_sp_attributedSales7dSameSKU" + report."bychannel_reserved_field6" )';
                } else {
                    $fields['cpc_direct_sales_quota'] = 'sum( report."byorder_sd_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1))  + report."byorder_sp_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1)) + report."bychannel_reserved_field6" * ({:RATE} / COALESCE(rates.rate ,1))  )';
                }
            }
            if (in_array('cpc_direct_sales_volume_rate', $targets)) {  // CPC直接销量占比
                $fields['cpc_direct_sales_volume_rate'] = '(' . $fields['cpc_direct_sales_volume'] . ") * 1.0000 / nullif( " . $fields['sale_sales_volume'] . " , 0 ) ";
            }

            if (in_array('cpc_indirect_sales_volume', $targets) || in_array('cpc_indirect_sales_volume_rate', $targets)) {  //CPC间接销量
                $fields['cpc_indirect_sales_volume'] = 'sum( report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" + report.bychannel_reserved_field7 - report."byorder_sd_attributedConversions7dSameSKU" - report."byorder_sp_attributedConversions7dSameSKU" - report.bychannel_reserved_field8) ';
            }

            if (in_array('cpc_indirect_sales_quota', $targets)) {  //CPC间接销售额
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['cpc_indirect_sales_quota'] = 'sum(report."byorder_sd_attributedSales7d" + report."byorder_sp_attributedSales7d" + report.bychannel_reserved_field5 - report."byorder_sd_attributedSales7dSameSKU" - report."byorder_sp_attributedSales7dSameSKU" - report.bychannel_reserved_field6 )';
                } else {
                    $fields['cpc_indirect_sales_quota'] = 'sum(report."byorder_sd_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1))  + report."byorder_sp_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_reserved_field5 * ({:RATE} / COALESCE(rates.rate ,1))  - report."byorder_sd_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1))  - report."byorder_sp_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1)) - report.bychannel_reserved_field6 * ({:RATE} / COALESCE(rates.rate ,1))   )';
                }
            }
            if (in_array('cpc_indirect_sales_volume_rate', $targets)) {  //CPC间接销量占比
                $fields['cpc_indirect_sales_volume_rate'] = '(' . $fields['cpc_indirect_sales_volume'] . ") * 1.0000 / nullif( " . $fields['sale_sales_volume'] . " , 0 ) ";
            }

            if (in_array('goods_adjust_fee', $targets)) { //商品调整费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['goods_adjust_fee'] = 'SUM(CASE WHEN report.goods_operation_pattern = 2 THEN (report.byorder_channel_goods_adjustment_fee + report.bychannel_channel_goods_adjustment_fee) ELSE 0 END)';
                    } else {
                        $fields['goods_adjust_fee'] = 'SUM(CASE WHEN report.goods_operation_pattern = 2 THEN (report.byorder_channel_goods_adjustment_fee  * ({:RATE} / COALESCE(rates.rate ,1)) +  report.bychannel_channel_goods_adjustment_fee * ({:RATE} / COALESCE(rates.rate ,1)) ) ELSE 0 END)';
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['goods_adjust_fee'] = 'SUM(CASE WHEN report.goods_operation_pattern = 2 THEN (report.report_channel_goods_adjustment_fee + report.bychannel_channel_goods_adjustment_fee) ELSE 0 END)';
                    } else {
                        $fields['goods_adjust_fee'] = 'SUM(CASE WHEN report.goods_operation_pattern = 2 THEN (report.report_channel_goods_adjustment_fee  * ({:RATE} / COALESCE(rates.rate ,1)) +  report.bychannel_channel_goods_adjustment_fee * ({:RATE} / COALESCE(rates.rate ,1)) ) ELSE 0 END)';
                    }
                }
            }

            if (in_array('evaluation_fee', $targets) || in_array('evaluation_fee_rate', $targets)) {  //测评费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['evaluation_fee'] = "sum( report.byorder_reserved_field10 ) ";
                    } else {
                        $fields['evaluation_fee'] = "sum( report.byorder_reserved_field10 * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                    }
                }else{
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['evaluation_fee'] = "sum( report.report_reserved_field10 ) ";
                    } else {
                        $fields['evaluation_fee'] = "sum( report.report_reserved_field10 * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                    }
                }
            }
            if (in_array('evaluation_fee_rate', $targets)) {  //测评费用占比
                $fields['evaluation_fee_rate'] = '(' . $fields['evaluation_fee'] . ") * 1.0000 / nullif( " . $fields['sale_sales_quota'] . " , 0 ) ";
            }


            if (in_array('purchase_logistics_purchase_cost', $targets) || in_array('purchase_logistics_cost_rate', $targets) || in_array('cost_profit_profit', $targets) || in_array('cost_profit_profit_rate', $targets)) {  //采购成本
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['purchase_logistics_purchase_cost'] = " sum( report.byorder_purchasing_cost ) ";
                        } else {
                            $fields['purchase_logistics_purchase_cost'] = " sum((report.first_purchasing_cost) ) ";
                        }
                    } else {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['purchase_logistics_purchase_cost'] = " sum( report.byorder_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        } else {
                            $fields['purchase_logistics_purchase_cost'] = " sum( ( report.first_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1))) ) ";
                        }
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['purchase_logistics_purchase_cost'] = " sum( report.report_purchasing_cost ) ";
                        } else {
                            $fields['purchase_logistics_purchase_cost'] = " sum((report.first_purchasing_cost) ) ";
                        }
                    } else {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['purchase_logistics_purchase_cost'] = " sum( report.report_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        } else {
                            $fields['purchase_logistics_purchase_cost'] = " sum( ( report.first_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1))) ) ";
                        }
                    }
                }

            }

            if (in_array('purchase_logistics_logistics_cost', $targets) || in_array('purchase_logistics_cost_rate', $targets) || in_array('cost_profit_profit', $targets)  || in_array('cost_profit_profit_rate', $targets)) {  // 物流/头程
                if ($datas['finance_datas_origin'] == 1) {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['purchase_logistics_logistics_cost'] = " sum( report.byorder_logistics_head_course ) ";
                        } else {
                            $fields['purchase_logistics_logistics_cost'] = " sum(  (report.first_logistics_head_course) ) ";
                        }

                    } else {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['purchase_logistics_logistics_cost'] = " sum( report.byorder_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        } else {
                            $fields['purchase_logistics_logistics_cost'] = " sum( (report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) )) ";
                        }

                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['purchase_logistics_logistics_cost'] = " sum( report.report_logistics_head_course ) ";
                        } else {
                            $fields['purchase_logistics_logistics_cost'] = " sum(  (report.first_logistics_head_course) ) ";
                        }

                    } else {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['purchase_logistics_logistics_cost'] = " sum( report.report_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        } else {
                            $fields['purchase_logistics_logistics_cost'] = " sum( (report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) )) ";
                        }

                    }
                }
            }

            if (in_array('purchase_logistics_cost_rate', $targets)) {  // 成本/物流费用占比
                $fields['purchase_logistics_cost_rate'] = '(' . $fields['purchase_logistics_purchase_cost'] . ' + ' . $fields['purchase_logistics_logistics_cost'] . ") * 1.0000 / nullif( " . $fields['sale_sales_quota'] . " , 0 ) ";
            }

            if (in_array('operate_fee', $targets) || in_array('operate_fee_rate', $targets)) {  //运营费用
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['operate_fee'] = "sum( CASE WHEN report.goods_operation_pattern = 1 THEN  (0- report.byorder_reserved_field16 ) ELSE report.bychannel_operating_fee END) ";
                } else {
                    $fields['operate_fee'] = "sum( CASE WHEN report.goods_operation_pattern = 1 THEN  (0 -  report.byorder_reserved_field16) * ({:RATE} / COALESCE(rates.rate ,1)) ELSE report.bychannel_operating_fee * ({:RATE} / COALESCE(rates.rate ,1)) END) ";
                }
            }
            if (in_array('operate_fee_rate', $targets)) {  //运营费用占比
                $fields['operate_fee_rate'] = '(' . $fields['operate_fee'] . ") * 1.0000 / nullif( " . $fields['sale_sales_quota'] . " , 0 ) ";
            }

            if (in_array('other_vat_fee', $targets)) {//VAT
                if($datas['finance_datas_origin'] == 1){
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['other_vat_fee'] = "SUM(0-report.byorder_reserved_field17)";
                    } else {
                        $fields['other_vat_fee'] = "SUM((0-report.byorder_reserved_field17) * ({:RATE} / COALESCE(rates.rate ,1)))";
                    }
                }else{
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['other_vat_fee'] = "SUM(0-report.report_reserved_field17)";
                    } else {
                        $fields['other_vat_fee'] = "SUM((0-report.report_reserved_field17) * ({:RATE} / COALESCE(rates.rate ,1)))";
                    }
                }

            }

            if (in_array('other_other_fee', $targets)) { //其他
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['other_other_fee'] = "SUM(report.bychannel_loan_payment  + report.bychannel_review_enrollment_fee)";
                } else {
                    $fields['other_other_fee'] = "SUM(report.bychannel_loan_payment  * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_review_enrollment_fee  * ({:RATE} / COALESCE(rates.rate ,1)))";
                }
            }

            if (in_array('other_review_enrollment_fee', $targets)) { //早期评论者计划
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['other_review_enrollment_fee'] = "SUM(report.bychannel_review_enrollment_fee)";
                } else {
                    $fields['other_review_enrollment_fee'] = "SUM(report.bychannel_review_enrollment_fee  * ({:RATE} / COALESCE(rates.rate ,1)))";
                }
            }

        if (in_array('cost_profit_profit', $targets) || in_array('cost_profit_profit_rate', $targets)) {  //毛利润
            $repair_data = $this->operate_profit ;
            if ($datas['finance_datas_origin'] == '1') {
                if ($datas['sale_datas_origin'] == '2') {
                    $repair_data .= " + report.report_sales_quota - report.byorder_sales_quota  ";
                }
                if ($datas['refund_datas_origin'] == '2') {
                    $repair_data .=  " + report.byorder_refund - report.report_refund ";
                }
            }else{
                if ($datas['sale_datas_origin'] == '1') {
                    $repair_data .= " + report.byorder_sales_quota - report.report_sales_quota  ";
                }
                if ($datas['refund_datas_origin'] == '1') {
                    $repair_data .=  " + report.report_refund - report.byorder_refund ";
                }
            }
            $estimated_monthly_storage_fee_field = "";
            if ($datas['is_month_table'] == 1){
                $estimated_monthly_storage_fee_field = " - report.report_estimated_monthly_storage_fee + report.monthly_sku_estimated_monthly_storage_fee";
            }

                $purchase_logistics = $fields['purchase_logistics_purchase_cost'] . ' + ' . $fields['purchase_logistics_logistics_cost'];
                if (!empty($this->tax_field) && strpos($this->tax_field,'{:RATE') === false){
                    $this->tax_field .= "* ({:RATE} / COALESCE(rates.rate ,1))";
                }
                if(empty($repair_data)){
                    if ($datas['finance_datas_origin'] == '1') {
                        if ($datas['currency_code'] == 'ORIGIN') {
                            $fields['cost_profit_profit'] = "(SUM( CASE WHEN report.goods_operation_pattern = 2 THEN (COALESCE(report.byorder_channel_profit,0) + COALESCE(report.bychannel_channel_profit,0) ) ELSE (report.byorder_goods_profit ) END {$this->tax_field})+ $purchase_logistics)";
                        } else {
                            $fields['cost_profit_profit'] = "(SUM( CASE WHEN report.goods_operation_pattern = 2 THEN (COALESCE(report.byorder_channel_profit,0) * ({:RATE} / COALESCE(rates.rate ,1)) + COALESCE(report.bychannel_channel_profit,0) * ({:RATE} / COALESCE(rates.rate ,1)) ) ELSE (report.byorder_goods_profit * ({:RATE} / COALESCE(rates.rate ,1)) ) END  {$this->tax_field}) + $purchase_logistics) ";
                        }
                    } else {
                        if ($datas['currency_code'] == 'ORIGIN') {
                            $fields['cost_profit_profit'] = "(SUM(CASE WHEN report.goods_operation_pattern = 2 THEN (COALESCE(report.report_channel_profit,0) + COALESCE(report.bychannel_channel_profit,0) ) ELSE ((report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost) {$estimated_monthly_storage_fee_field}) END  {$this->tax_field}) + $purchase_logistics)";
                        } else {
                            $fields['cost_profit_profit'] = "(SUM( CASE WHEN report.goods_operation_pattern = 2 THEN (COALESCE(report.report_channel_profit,0) * ({:RATE} / COALESCE(rates.rate ,1)) + COALESCE(report.bychannel_channel_profit,0) * ({:RATE} / COALESCE(rates.rate ,1)) ) ELSE (((report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost) {$estimated_monthly_storage_fee_field}) * ({:RATE} / COALESCE(rates.rate ,1)) ) END {$this->tax_field})+$purchase_logistics) ";
                        }
                    }
                }else{
                    if ($datas['finance_datas_origin'] == '1') {
                        if ($datas['currency_code'] == 'ORIGIN') {
                            $fields['cost_profit_profit'] = "(SUM( CASE WHEN report.goods_operation_pattern = 2 THEN (COALESCE(report.byorder_channel_profit,0) + COALESCE(report.bychannel_channel_profit,0) ) ELSE (report.byorder_goods_profit ) END {$this->tax_field})+ $purchase_logistics + SUM( (0 {$repair_data})))";
                        } else {
                            $fields['cost_profit_profit'] = "(SUM( CASE WHEN report.goods_operation_pattern = 2 THEN (COALESCE(report.byorder_channel_profit,0) * ({:RATE} / COALESCE(rates.rate ,1)) + COALESCE(report.bychannel_channel_profit,0) * ({:RATE} / COALESCE(rates.rate ,1)) ) ELSE (report.byorder_goods_profit * ({:RATE} / COALESCE(rates.rate ,1)) ) END  {$this->tax_field}) + $purchase_logistics + SUM( (0 {$repair_data}) * ({:RATE} / COALESCE(rates.rate ,1))))";
                        }
                    } else {
                        if ($datas['currency_code'] == 'ORIGIN') {
                            $fields['cost_profit_profit'] = "(SUM(CASE WHEN report.goods_operation_pattern = 2 THEN (COALESCE(report.report_channel_profit,0) + COALESCE(report.bychannel_channel_profit,0) ) ELSE ((report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost){$estimated_monthly_storage_fee_field} ) END  {$this->tax_field}) + $purchase_logistics + SUM( (0 {$repair_data})))";
                        } else {
                            $fields['cost_profit_profit'] = "(SUM( CASE WHEN report.goods_operation_pattern = 2 THEN (COALESCE(report.report_channel_profit,0) * ({:RATE} / COALESCE(rates.rate ,1)) + COALESCE(report.bychannel_channel_profit,0) * ({:RATE} / COALESCE(rates.rate ,1)) ) ELSE (((report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost){$estimated_monthly_storage_fee_field}) * ({:RATE} / COALESCE(rates.rate ,1)) ) END {$this->tax_field})+$purchase_logistics  + SUM( (0 {$repair_data}) * ({:RATE} / COALESCE(rates.rate ,1))))";
                        }
                    }
                }
            }
            if (in_array('cost_profit_profit_rate', $targets)) {  //毛利率
                $fields['cost_profit_profit_rate'] = "(" . $fields['cost_profit_profit'] . ")" . " * 1.0000 / nullif( " . $fields['sale_sales_quota'] . " , 0 ) ";
            }

            if (in_array('sales_evaluation_nums', $targets)) {  //测评销量
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorderitem_evaluation_nums' : 'reportitem_evaluation_nums';
                $fields['sales_evaluation_nums'] = "sum( report.{$tmp_field} )";
            }

            if (in_array('fba_sales_refund', $targets)) {  //FBA退款金额
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorderitem_reserved_field12' : 'reportitem_reserved_field12';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['fba_sales_refund'] = "sum( report.{$tmp_field} )";
                } else {
                    $fields['fba_sales_refund'] = "sum( report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('fbm_sales_refund', $targets)) {  //FBM退款金额
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorderitem_reserved_field13' : 'reportitem_reserved_field13';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['fbm_sales_refund'] = "sum( report.{$tmp_field} )";
                } else {
                    $fields['fbm_sales_refund'] = "sum( report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('amazon_fba_lost_num', $targets)) {  //仓库丢失赔偿数量
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_lost_num' : 'report_lost_num';
                $fields['amazon_fba_lost_num'] = "sum( report.{$tmp_field} )";
            }

            if (in_array('amazon_fba_damage_num', $targets)) {  //仓库损坏赔偿数量
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_damage_num' : 'report_damage_num';
                $fields['amazon_fba_damage_num'] = "sum( report.{$tmp_field} )";
            }

            if (in_array('amazon_market_vat_principal', $targets)) {  //MarketplaceFacilitatorVAT-Principal
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_cpc_sb_sales_quota' : 'report_cpc_sb_sales_quota';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_market_vat_principal'] = "sum( report.{$tmp_field} )";
                } else {
                    $fields['amazon_market_vat_principal'] = "sum( report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('amazon_market_vat_shipping', $targets)) {  //MarketplaceFacilitatorVAT-Shipping
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_cpc_sb_cost' : 'report_cpc_sb_cost';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_market_vat_shipping'] = "sum( report.{$tmp_field} )";
                } else {
                    $fields['amazon_market_vat_shipping'] = "sum( report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('amazon_market_vat_principal_refund', $targets)) {  //MarketplaceFacilitatorVAT-Principal-refund
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_refund_rate' : 'report_refund_rate';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_market_vat_principal_refund'] = "sum( report.{$tmp_field} )";
                } else {
                    $fields['amazon_market_vat_principal_refund'] = "sum( report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('amazon_market_vat_shipping_refund', $targets)) {  //MarketplaceFacilitatorVAT-Shipping-refund
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_profit_margin' : 'report_profit_margin';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_market_vat_shipping_refund'] = "sum( report.{$tmp_field} )";
                } else {
                    $fields['amazon_market_vat_shipping_refund'] = "sum( report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('repayment_transfer_fail', $targets)) {  //转账失败
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['repayment_transfer_fail'] = "sum( report.bychannel_reserved_field47 )";
                } else {
                    $fields['repayment_transfer_fail'] = "sum( report.bychannel_reserved_field47 * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('repayment_transfer_success', $targets)) {  //转账成功
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['repayment_transfer_success'] = "sum( report.bychannel_reserved_field46 )";
                } else {
                    $fields['repayment_transfer_success'] = "sum( report.bychannel_reserved_field46 * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('repayment_count_settled', $targets)) {  //已结总计
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['repayment_count_settled'] = "sum( report.bychannel_reserved_field48 )";
                } else {
                    $fields['repayment_count_settled'] = "sum( report.bychannel_reserved_field48 * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('cpc_sp_cost', $targets)) {  //SP花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['cpc_sp_cost'] = " sum( report.byorder_cpc_cost) ";
                } else {
                    $fields['cpc_sp_cost'] = " sum( report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1))) ";
                }
            }
            if (in_array('cpc_sd_cost', $targets)) {  //SD花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['cpc_sd_cost'] = " sum( report.byorder_cpc_sd_cost) ";
                } else {
                    $fields['cpc_sd_cost'] = " sum( report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1))) ";
                }
            }

            if (in_array('cpc_sb_cost', $targets)) {  //sb花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['cpc_sb_cost'] = "sum( 0 - report.bychannel_cpc_sb_cost )";
                } else {
                    $fields['cpc_sb_cost'] = "sum( (0 - report.bychannel_cpc_sb_cost) * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('cpc_sbv_cost', $targets)) {  //sbv花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['cpc_sbv_cost'] = "sum( 0 - report.bychannel_cpc_sbv_cost )";
                } else {
                    $fields['cpc_sbv_cost'] = "sum( (0 - report.bychannel_cpc_sbv_cost) * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('amazon_fba_overage_fee', $targets)) {  //库存仓储超量费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_fba_overage_fee'] = "sum( report.bychannel_fba_overage_fee )";
                } else {
                    $fields['amazon_fba_overage_fee'] = "sum( report.bychannel_fba_overage_fee * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }

            if (in_array('amazon_fba_disposal_fee', $targets)) {  //FBA弃置费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['amazon_fba_disposal_fee'] = "sum( report.bychannel_fba_disposal_fee )";
                } else {
                    $fields['amazon_fba_disposal_fee'] = "sum( report.bychannel_fba_disposal_fee * ({:RATE} / COALESCE(rates.rate ,1)) )";
                }
            }
            $this->getUnTimeFields($fields,$datas,$targets,3);

        }


        $fba_target_key = [];
        //加入自定义指标
        $this->getCustomTargetFields($fields,$custom_targets_list,$targets,$targets_temp, $datas,$fba_target_key,$operation_table_field);
        return ["fields" =>$fields,"operation_table_field" => $operation_table_field];

    }

    //按运营人员维度,时间展示字段（新增统计维度完成）
    private function getOperatorsTimeFields($datas = array(), $time_line)
    {
        $fields = array();
        $fields['user_id'] = 'max(report.user_id)';
        $fields['goods_operation_user_admin_id'] = 'max(report.goods_operation_user_admin_id)';
        if ($datas['count_periods'] == '1' && $datas['show_type'] == '2') { //按天
            $fields['time'] = "concat(cast(max(report.myear) as varchar), '-', cast(max(report.mmonth) as varchar), '-', cast(max(report.mday) as varchar))";
        } else if ($datas['count_periods'] == '2' && $datas['show_type'] == '2') { //按周
            $fields['time'] = "concat(cast(max(report.mweekyear) as varchar), '-', cast(max(report.mweek) as varchar))";
        } else if ($datas['count_periods'] == '3' && $datas['show_type'] == '2') { //按月
            $fields['time'] = "concat(cast(max(report.myear) as varchar), '-', cast(max(report.mmonth) as varchar))";
        } else if ($datas['count_periods'] == '4' && $datas['show_type'] == '2') {  //按季
            $fields['time'] = "concat(cast(max(report.myear) as varchar), '-', cast(max(report.mquarter) as varchar))";
        } else if ($datas['count_periods'] == '5' && $datas['show_type'] == '2') { //按年
            $fields['time'] = "cast(max(report.myear) as varchar)";
        }
        $target_key = $datas['time_target'];
        //自定义指标
        $datas_ark_custom_target_md = new DatasArkCustomTargetMySQLModel([], $this->dbhost, $this->codeno);
        $target_template = $datas['is_new_index'] == 1 ? 1 : 0;
        $custom_target = $datas_ark_custom_target_md->get_one("user_id = {$datas['user_id']} AND target_type IN(1, 2) AND target_key = '{$target_key}' AND status = 1 AND count_dimension = 1 AND target_template = {$target_template}");
        $keys = [];
        $new_target_keys = [];
        if($custom_target && $custom_target['target_type'] == 2){
            $time_targets = explode(",",$custom_target['formula_fields']);
            //公式所涉及到的新增指标
            $target_key_str = trim("'" . implode("','",$time_targets) . "'");
            $new_target = $datas_ark_custom_target_md->getList("user_id = {$datas['user_id']} AND target_type = 1 AND count_dimension IN (1,2) AND target_key IN ($target_key_str) AND target_template = {$target_template}","target_key,month_goods_field,format_type");
            $keys = array_column($new_target,'target_key');
            $new_target_keys = array_column($new_target,null,'target_key');
        }else{
            $time_targets = array($target_key);
        }
        $time_fields = array();
        $time_fields_arr = array();
        $operation_table_field = array(
            "goods_key"     => array(),
            "channel_key"   => array(),
        );
        foreach ($time_targets as $time_target) {
            if ($datas['is_new_index'] == 1){
                if ($custom_target && $custom_target['target_type'] == 1) {
                    $tempField = "report.monthly_sku_" . $custom_target['month_goods_field'];
                    $operation_table_field['goods_key'][] = "monthly_sku_" . $custom_target['month_goods_field'];
                    //新增指标
                    if ($datas['currency_code'] != 'ORIGIN' && $custom_target['format_type'] == 4) {
                        $fields['count_total'] = "sum({$tempField} / COALESCE(rates.rate, 1) * {:RATE})";
                        $time_fields = $this->getTimeFields($time_line, "{$tempField} * ({:RATE} / COALESCE(rates.rate ,1))");
                    } else {
                        $fields['count_total'] = "SUM({$tempField})";
                        $time_fields = $this->getTimeFields($time_line, $tempField);
                    }
                    $fields[$time_target] = $fields['count_total'] ;
                    $time_fields_arr[$time_target] = $time_fields ;
                } elseif (in_array($time_target, $keys)) {
                    $tempField = "report.monthly_sku_" . $new_target_keys[$time_target]['month_goods_field'];
                    $operation_table_field['goods_key'][] = "monthly_sku_" . $new_target_keys[$time_target]['month_goods_field'];
                    //新增指标
                    if ($datas['currency_code'] != 'ORIGIN' && $new_target_keys[$time_target]['format_type'] == 4) {
                        $fields['count_total'] = "sum({$tempField} / COALESCE(rates.rate, 1) * {:RATE})";
                        $time_fields = $this->getTimeFields($time_line, "{$tempField} * ({:RATE} / COALESCE(rates.rate ,1))");
                    } else {
                        $fields['count_total'] = "SUM({$tempField})";
                        $time_fields = $this->getTimeFields($time_line, $tempField);
                    }
                    $fields[$time_target] = $fields['count_total'] ;
                    $time_fields_arr[$time_target] = $time_fields ;
                }else{
                    $return_field = $this->handleNewIndexTimeField($datas,$fields,$time_target,3);
                    $fields['count_total'] = $return_field['count_total'];
                    $operation_table_field['goods_key'] = array_merge($operation_table_field['goods_key'],$return_field['operation_table_field']['goods_key']);
                    $operation_table_field['channel_key'] = array_merge($operation_table_field['channel_key'],$return_field['operation_table_field']['channel_key']);

                    if (!empty($return_field['denominator'])){
                        $time_fields = $this->getTimeFields($time_line, $return_field['molecule'], $return_field['denominator']);
                    }else{
                        $time_fields = $this->getTimeFields($time_line, $return_field['molecule']);
                    }
                    $fields[$time_target] = $fields['count_total'] ;
                    $time_fields_arr[$time_target] = $time_fields ;
                }

                continue;
            }
            if ($time_target == 'goods_visitors') {  // 买家访问次数
                $fields['count_total'] = "SUM(report.byorder_user_sessions)";
                $time_fields = $this->getTimeFields($time_line, 'report.byorder_user_sessions');
            } else if ($time_target == 'goods_conversion_rate') { //订单商品数量转化率
                $fields['count_total'] = 'sum( report.byorder_quantity_of_goods_ordered ) * 1.0000 / nullif(sum( report.byorder_user_sessions ) ,0)';
                $time_fields = $this->getTimeFields($time_line, 'report.byorder_quantity_of_goods_ordered', 'report.byorder_user_sessions');
            } else if ($time_target == 'sale_sales_volume') { //销售量
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['count_total'] = " sum( report.byorder_sales_volume  +  report.byorder_group_id) ";
                    $time_fields = $this->getTimeFields($time_line, "report.byorder_sales_volume  +  report.byorder_group_id");
                } elseif ($datas['sale_datas_origin'] == '2') {
                    $fields['count_total'] = " sum( report.report_sales_volume  +  report.report_group_id ) ";
                    $time_fields = $this->getTimeFields($time_line, "report.report_sales_volume  +  report.report_group_id");
                }
            } else if ($time_target == 'sale_many_channel_sales_volume') { //多渠道数量
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['count_total'] = "sum( report.byorder_group_id )";
                    $time_fields = $this->getTimeFields($time_line, "report.byorder_group_id");
                } elseif ($datas['sale_datas_origin'] == '2') {
                    $fields['count_total'] = "sum( report.report_group_id )";
                    $time_fields = $this->getTimeFields($time_line, "report.report_group_id");
                }
            } else if ($time_target == 'sale_sales_quota') {  //商品销售额
                if ($datas['sale_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_sales_quota )";
                        $time_fields = $this->getTimeFields($time_line, "report.byorder_sales_quota");
                    } else {
                        $fields['count_total'] = "sum( report.byorder_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, "report.byorder_sales_quota * ({:RATE} / COALESCE(rates.rate ,1))");
                    }
                } elseif ($datas['sale_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_sales_quota )";
                        $time_fields = $this->getTimeFields($time_line, "report.report_sales_quota");
                    } else {
                        $fields['count_total'] = "sum( report.report_sales_quota * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, "report.report_sales_quota * ({:RATE} / COALESCE(rates.rate ,1))");
                    }
                }
            } else if ($time_target == 'sale_return_goods_number') {  //退款量
                if ($datas['refund_datas_origin'] == '1') {
                    $fields['count_total'] = "sum(report.byorder_refund_num )";
                    $time_fields = $this->getTimeFields($time_line, "report.byorder_refund_num");
                } elseif ($datas['refund_datas_origin'] == '2') {
                    $fields['count_total'] = "sum(report.report_refund_num )";
                    $time_fields = $this->getTimeFields($time_line, "report.report_refund_num");
                }
            } else if ($time_target == 'sale_refund') {  //退款
                if ($datas['refund_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( 0 - report.byorder_refund )";
                        $time_fields = $this->getTimeFields($time_line, "( 0 - report.byorder_refund )");
                    } else {
                        $fields['count_total'] = "sum( ( 0 - report.byorder_refund) * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($time_line, "( 0 - report.byorder_refund ) * ({:RATE} / COALESCE(rates.rate ,1)) ");
                    }
                } elseif ($datas['refund_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( 0 - report.report_refund )";
                        $time_fields = $this->getTimeFields($time_line, " ( 0 - report.report_refund ) ");
                    } else {
                        $fields['count_total'] = "sum( ( 0 - report.report_refund) * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($time_line, " (0 - report.report_refund )* ({:RATE} / COALESCE(rates.rate ,1)) ");
                    }
                }
            } else if ($time_target == 'sale_refund_rate') {  //退款率
                if ($datas['sale_datas_origin'] == '1') {
                    if ($datas['refund_datas_origin'] == '1') {
                        $fields['count_total'] = "sum(report.byorder_refund_num ) * 1.0000 / nullif(SUM(report.byorder_sales_volume + report.byorder_group_id),0)";
                        $time_fields = $this->getTimeFields($time_line, "report.byorder_refund_num * 1.0000", "report.byorder_sales_volume+ report.byorder_group_id");
                    } elseif ($datas['refund_datas_origin'] == '2') {
                        $fields['count_total'] = "sum(report.report_refund_num  ) * 1.0000 / nullif(SUM(report.byorder_sales_volume+ report.byorder_group_id),0)";
                        $time_fields = $this->getTimeFields($time_line, "report.report_refund_num * 1.0000 ", "report.byorder_sales_volume+ report.byorder_group_id");
                    }
                } else {
                    if ($datas['refund_datas_origin'] == '1') {
                        $fields['count_total'] = "sum(report.byorder_refund_num ) * 1.0000  / nullif(SUM(report.report_sales_volume+ report.report_group_id),0)";
                        $time_fields = $this->getTimeFields($time_line, "report.byorder_refund_num * 1.0 ", "report.report_sales_volume+ report.report_group_id");
                    } elseif ($datas['refund_datas_origin'] == '2') {
                        $fields['count_total'] = "sum(report.report_refund_num ) * 1.0000 / nullif(SUM(report.report_sales_volume+ report.report_group_id),0)";
                        $time_fields = $this->getTimeFields($time_line, "report.report_refund_num * 1.0 ", "report.report_sales_volume+ report.report_group_id");
                    }
                }
            } else if ($time_target == 'amazon_fee') {  //亚马逊费用
                if ($datas['currency_code'] != 'ORIGIN' && !empty($this->tax_field) && strpos($this->tax_field,'{:RATE') === false){
                    $this->tax_field .= "* ({:RATE} / COALESCE(rates.rate ,1)) ";
                }
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(CASE WHEN report.goods_operation_pattern = 1 THEN report.byorder_goods_amazon_fee ELSE ( report.byorder_channel_amazon_order_fee + report.byorder_channel_amazon_refund_fee + report.byorder_channel_amazon_storage_fee + report.byorder_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee'.$this->operate_channel_amazon_goods_fee.') END '.$this->tax_field.')';
                        $time_fields = $this->getTimeFields($time_line, '(CASE WHEN report.goods_operation_pattern = 1 THEN report.byorder_goods_amazon_fee ELSE ( report.byorder_channel_amazon_order_fee + report.byorder_channel_amazon_refund_fee + report.byorder_channel_amazon_storage_fee + report.byorder_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee'.$this->operate_channel_amazon_goods_fee.') END '.$this->tax_field.')');
                    } else {
                        $fields['count_total'] = 'SUM(CASE WHEN report.goods_operation_pattern = 1 THEN (report.byorder_goods_amazon_fee * ({:RATE} / COALESCE(rates.rate ,1))) ELSE  ((report.byorder_channel_amazon_order_fee'.$this->operate_channel_amazon_goods_fee.') * ({:RATE} / COALESCE(rates.rate ,1))  + report.byorder_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.byorder_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.byorder_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_order_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1))) END '.$this->tax_field.') ';
                        $time_fields = $this->getTimeFields($time_line, '(CASE WHEN report.goods_operation_pattern = 1 THEN (report.byorder_goods_amazon_fee * ({:RATE} / COALESCE(rates.rate ,1))) ELSE  ((report.byorder_channel_amazon_order_fee'.$this->operate_channel_amazon_goods_fee.') * ({:RATE} / COALESCE(rates.rate ,1))  + report.byorder_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.byorder_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.byorder_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_order_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1))) END '.$this->tax_field.')');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    $estimated_monthly_storage_fee_field = "";
                    if ($datas['is_month_table'] == 1){
                        $estimated_monthly_storage_fee_field = " - report.report_estimated_monthly_storage_fee + report.monthly_sku_estimated_monthly_storage_fee";
                    }
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(CASE WHEN report.goods_operation_pattern = 1 THEN (report.report_goods_amazon_fee'.$estimated_monthly_storage_fee_field.') ELSE ( report.report_channel_amazon_order_fee + report.report_channel_amazon_refund_fee + report.report_channel_amazon_storage_fee + report.report_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee'.$this->operate_channel_amazon_goods_fee.') END '.$this->tax_field.')';
                        $time_fields = $this->getTimeFields($time_line, '(CASE WHEN report.goods_operation_pattern = 1 THEN (report.report_goods_amazon_fee'.$estimated_monthly_storage_fee_field.') ELSE ( report.report_channel_amazon_order_fee + report.report_channel_amazon_refund_fee + report.report_channel_amazon_storage_fee + report.report_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee'.$this->operate_channel_amazon_goods_fee.') END '.$this->tax_field.')');
                    } else {
                        $fields['count_total'] = 'SUM(CASE WHEN report.goods_operation_pattern = 1 THEN ((report.report_goods_amazon_fee'.$estimated_monthly_storage_fee_field.') * ({:RATE} / COALESCE(rates.rate ,1)) ) ELSE (  (report.report_channel_amazon_order_fee'.$this->operate_channel_amazon_goods_fee.') * ({:RATE} / COALESCE(rates.rate ,1))  + report.report_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.report_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.report_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_order_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1))) END )';
                        $time_fields = $this->getTimeFields($time_line, '(CASE WHEN report.goods_operation_pattern = 1 THEN ((report.report_goods_amazon_fee'.$estimated_monthly_storage_fee_field.') * ({:RATE} / COALESCE(rates.rate ,1)) ) ELSE (  (report.report_channel_amazon_order_fee'.$this->operate_channel_amazon_goods_fee.') * ({:RATE} / COALESCE(rates.rate ,1))  + report.report_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.report_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.report_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_order_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1))) END '.$this->tax_field.')');
                    }
                }
            } else if ($time_target == 'amazon_fee_rate') {  //亚马逊费用占比
                if ($datas['currency_code'] != 'ORIGIN' && !empty($this->tax_field) && strpos($this->tax_field,'{:RATE') === false){
                    $this->tax_field .= "* ({:RATE} / COALESCE(rates.rate ,1)) ";
                }
                $estimated_monthly_storage_fee_field = "";
                if ($datas['is_month_table'] == 1){
                    $estimated_monthly_storage_fee_field = " - report.report_estimated_monthly_storage_fee + report.monthly_sku_estimated_monthly_storage_fee";
                }
                if ($datas['sale_datas_origin'] == 1) {
                    if ($datas['finance_datas_origin'] == '1') {
                        $fields['count_total'] = 'SUM(CASE WHEN report.goods_operation_pattern = 1 THEN report.byorder_goods_amazon_fee* ({:RATE} / COALESCE(rates.rate ,1)) ELSE ( (report.byorder_channel_amazon_order_fee'.$this->operate_channel_amazon_goods_fee.') + report.byorder_channel_amazon_refund_fee + report.byorder_channel_amazon_storage_fee + report.byorder_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee)* ({:RATE} / COALESCE(rates.rate ,1)) END '.$this->tax_field.') * 1.0000 / nullif( sum(report.byorder_sales_quota* ({:RATE} / COALESCE(rates.rate ,1))) , 0 ) ';
                        $time_fields = $this->getTimeFields($time_line, '(CASE WHEN report.goods_operation_pattern = 1 THEN report.byorder_goods_amazon_fee* ({:RATE} / COALESCE(rates.rate ,1)) ELSE ( (report.byorder_channel_amazon_order_fee'.$this->operate_channel_amazon_goods_fee.') + report.byorder_channel_amazon_refund_fee + report.byorder_channel_amazon_storage_fee + report.byorder_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee)* ({:RATE} / COALESCE(rates.rate ,1)) END '.$this->tax_field.')', 'report.byorder_sales_quota* ({:RATE} / COALESCE(rates.rate ,1))');

                    } elseif ($datas['finance_datas_origin'] == '2') {
                        $fields['count_total'] = 'SUM(CASE WHEN report.goods_operation_pattern = 1 THEN (report.report_goods_amazon_fee'.$estimated_monthly_storage_fee_field.')* ({:RATE} / COALESCE(rates.rate ,1)) ELSE ( report.report_channel_amazon_order_fee'.$this->operate_channel_amazon_goods_fee.' + report.report_channel_amazon_refund_fee + report.report_channel_amazon_storage_fee + report.report_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee)* ({:RATE} / COALESCE(rates.rate ,1)) END '.$this->tax_field.') * 1.0000 / nullif( sum(report.byorder_sales_quota* ({:RATE} / COALESCE(rates.rate ,1))) , 0 ) ';
                        $time_fields = $this->getTimeFields($time_line, '(CASE WHEN report.goods_operation_pattern = 1 THEN (report.report_goods_amazon_fee'.$estimated_monthly_storage_fee_field.')* ({:RATE} / COALESCE(rates.rate ,1)) ELSE ( report.report_channel_amazon_order_fee'.$this->operate_channel_amazon_goods_fee.' + report.report_channel_amazon_refund_fee + report.report_channel_amazon_storage_fee + report.report_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee)* ({:RATE} / COALESCE(rates.rate ,1)) END '.$this->tax_field.')', 'report.byorder_sales_quota');
                    }
                } else {
                    if ($datas['finance_datas_origin'] == '1') {
                        $fields['count_total'] = 'SUM(CASE WHEN report.goods_operation_pattern = 1 THEN report.byorder_goods_amazon_fee * ({:RATE} / COALESCE(rates.rate ,1)) ELSE ( report.byorder_channel_amazon_order_fee'.$this->operate_channel_amazon_goods_fee.' + report.byorder_channel_amazon_refund_fee + report.byorder_channel_amazon_storage_fee + report.byorder_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee)* ({:RATE} / COALESCE(rates.rate ,1)) END '.$this->tax_field.') * 1.0000 / nullif( sum(report.report_sales_quota* ({:RATE} / COALESCE(rates.rate ,1))) , 0 ) ';
                        $time_fields = $this->getTimeFields($time_line, '(CASE WHEN report.goods_operation_pattern = 1 THEN report.byorder_goods_amazon_fee* ({:RATE} / COALESCE(rates.rate ,1)) ELSE ( report.byorder_channel_amazon_order_fee'.$this->operate_channel_amazon_goods_fee.' + report.byorder_channel_amazon_refund_fee + report.byorder_channel_amazon_storage_fee + report.byorder_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee)* ({:RATE} / COALESCE(rates.rate ,1)) END '.$this->tax_field.')', 'report.report_sales_quota* ({:RATE} / COALESCE(rates.rate ,1))');

                    } elseif ($datas['finance_datas_origin'] == '2') {
                        $fields['count_total'] = 'SUM(CASE WHEN report.goods_operation_pattern = 1 THEN (report.report_goods_amazon_fee'.$estimated_monthly_storage_fee_field.')* ({:RATE} / COALESCE(rates.rate ,1)) ELSE ( report.report_channel_amazon_order_fee'.$this->operate_channel_amazon_goods_fee.' + report.report_channel_amazon_refund_fee + report.report_channel_amazon_storage_fee + report.report_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee)* ({:RATE} / COALESCE(rates.rate ,1)) END '.$this->tax_field.') * 1.0000 / nullif( sum(report.report_sales_quota* ({:RATE} / COALESCE(rates.rate ,1))) , 0 ) ';
                        $time_fields = $this->getTimeFields($time_line, '(CASE WHEN report.goods_operation_pattern = 1 THEN (report.report_goods_amazon_fee'.$estimated_monthly_storage_fee_field.')* ({:RATE} / COALESCE(rates.rate ,1)) ELSE ( report.report_channel_amazon_order_fee'.$this->operate_channel_amazon_goods_fee.' + report.report_channel_amazon_refund_fee + report.report_channel_amazon_storage_fee + report.report_channel_amazon_other_fee + report.bychannel_channel_amazon_order_fee + report.bychannel_channel_amazon_refund_fee + report.bychannel_channel_amazon_storage_fee + report.bychannel_channel_amazon_other_fee)* ({:RATE} / COALESCE(rates.rate ,1)) END '.$this->tax_field.')', 'report.report_sales_quota* ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'amazon_order_fee') {  //亚马逊-订单费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(report.byorder_channel_amazon_order_fee + report.bychannel_channel_amazon_order_fee'.$this->operate_channel_amazon_order_fee.')';
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_channel_amazon_order_fee + report.bychannel_channel_amazon_order_fee '.$this->operate_channel_amazon_order_fee);
                    } else {
                        $fields['count_total'] = 'SUM(report.byorder_channel_amazon_order_fee * ({:RATE} / COALESCE(rates.rate ,1)) + (report.bychannel_channel_amazon_order_fee'.$this->operate_channel_amazon_order_fee.') * ({:RATE} / COALESCE(rates.rate ,1)))';
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_channel_amazon_order_fee * ({:RATE} / COALESCE(rates.rate ,1)) + (report.bychannel_channel_amazon_order_fee'.$this->operate_channel_amazon_order_fee.') * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(report.report_channel_amazon_order_fee + report.bychannel_channel_amazon_order_fee'.$this->operate_channel_amazon_order_fee.')';
                        $time_fields = $this->getTimeFields($time_line, 'report.report_channel_amazon_order_fee + report.bychannel_channel_amazon_order_fee'.$this->operate_channel_amazon_order_fee.'');
                    } else {
                        $fields['count_total'] = 'SUM(report.report_channel_amazon_order_fee * ({:RATE} / COALESCE(rates.rate ,1)) + (report.bychannel_channel_amazon_order_fee'.$this->operate_channel_amazon_order_fee.') * ({:RATE} / COALESCE(rates.rate ,1)))';
                        $time_fields = $this->getTimeFields($time_line, 'report.report_channel_amazon_order_fee * ({:RATE} / COALESCE(rates.rate ,1)) + (report.bychannel_channel_amazon_order_fee'.$this->operate_channel_amazon_order_fee.') * ({:RATE} / COALESCE(rates.rate ,1))');
                    }

                }
            } else if ($time_target == 'amazon_sales_commission') {  //亚马逊销售佣金
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_platform_sales_commission ) ";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_platform_sales_commission');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_platform_sales_commission * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_platform_sales_commission * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_platform_sales_commission ) ";
                        $time_fields = $this->getTimeFields($time_line, 'report.report_platform_sales_commission');
                    } else {
                        $fields['count_total'] = "sum( report.report_platform_sales_commission * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($time_line, 'report.report_platform_sales_commission * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'amazon_fba_delivery_fee') {  //FBA代发货费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_fba_generation_delivery_cost + report.byorder_fbaperorderfulfillmentfee + report.byorder_fbaweightbasedfee - report.byorder_profit)";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_fba_generation_delivery_cost + report.byorder_fbaperorderfulfillmentfee + report.byorder_fbaweightbasedfee - report.byorder_profit');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_fba_generation_delivery_cost * ({:RATE} / COALESCE(rates.rate ,1))+ report.byorder_fbaperorderfulfillmentfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbaweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)) -report.byorder_profit * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_fba_generation_delivery_cost * ({:RATE} / COALESCE(rates.rate ,1))+ report.byorder_fbaperorderfulfillmentfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbaweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)) -report.byorder_profit * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_fba_generation_delivery_cost + report.report_fbaperorderfulfillmentfee + report.report_fbaweightbasedfee - report.report_profit)";
                        $time_fields = $this->getTimeFields($time_line, ' report.report_fba_generation_delivery_cost + report.report_fbaperorderfulfillmentfee + report.report_fbaweightbasedfee - report.report_profit');
                    } else {
                        $fields['count_total'] = "sum( report.report_fba_generation_delivery_cost * ({:RATE} / COALESCE(rates.rate ,1))+ report.report_fbaperorderfulfillmentfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbaweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)) - report.report_profit * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, 'report.report_fba_generation_delivery_cost * ({:RATE} / COALESCE(rates.rate ,1))+ report.report_fbaperorderfulfillmentfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbaweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)) - report.report_profit * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }

            } else if ($time_target == 'amazon_multi_channel_delivery_fee') {  //多渠道配送费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_profit ) ";
                        $time_fields = $this->getTimeFields($time_line, ' report.byorder_profit');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_profit * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_profit * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_profit ) ";
                        $time_fields = $this->getTimeFields($time_line, ' report.report_profit');
                    } else {
                        $fields['count_total'] = "sum( report.report_profit * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($time_line, 'report.report_profit * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'amazon_settlement_fee') {  //结算费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_order_variableclosingfee + report.byorder_fixedclosingfee + report.byorder_refund_variableclosingfee )";
                        $time_fields = $this->getTimeFields($time_line, ' report.byorder_order_variableclosingfee + report.byorder_fixedclosingfee + report.byorder_refund_variableclosingfee');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_order_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fixedclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_refund_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_order_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fixedclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_refund_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) ');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_order_variableclosingfee + report.report_fixedclosingfee + report.report_refund_variableclosingfee )";
                        $time_fields = $this->getTimeFields($time_line, ' report.report_order_variableclosingfee + report.report_fixedclosingfee + report.report_refund_variableclosingfee');
                    } else {
                        $fields['count_total'] = "sum( report.report_order_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fixedclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_refund_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, ' report.report_order_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fixedclosingfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_refund_variableclosingfee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'amazon_refund_fee') { //亚马逊-退货退款费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(report.byorder_channel_amazon_refund_fee + report.bychannel_channel_amazon_refund_fee)';
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_channel_amazon_refund_fee + report.bychannel_channel_amazon_refund_fee');
                    } else {
                        $fields['count_total'] = 'SUM(report.byorder_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1)))';
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(report.report_channel_amazon_refund_fee + report.bychannel_channel_amazon_refund_fee)';
                        $time_fields = $this->getTimeFields($time_line, 'report.report_channel_amazon_refund_fee + report.bychannel_channel_amazon_refund_fee');
                    } else {
                        $fields['count_total'] = 'SUM(report.report_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1)))';
                        $time_fields = $this->getTimeFields($time_line, 'report.report_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_refund_fee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'amazon_fba_return_processing_fee') {  //FBA退货处理费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_fba_refund_treatment_fee + report.byorder_fbacustomerreturnperorderfee+report.byorder_fbacustomerreturnweightbasedfee)";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_fba_refund_treatment_fee + report.byorder_fbacustomerreturnperorderfee+report.byorder_fbacustomerreturnweightbasedfee');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_fba_refund_treatment_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbacustomerreturnperorderfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbacustomerreturnweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)))";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_fba_refund_treatment_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbacustomerreturnperorderfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_fbacustomerreturnweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_fba_refund_treatment_fee + report.report_fbacustomerreturnperorderfee + report.report_fbacustomerreturnweightbasedfee)";
                        $time_fields = $this->getTimeFields($time_line, 'report.report_fba_refund_treatment_fee + report.report_fbacustomerreturnperorderfee + report.report_fbacustomerreturnweightbasedfee');
                    } else {
                        $fields['count_total'] = "sum( report.report_fba_refund_treatment_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbacustomerreturnperorderfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbacustomerreturnweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1)))";
                        $time_fields = $this->getTimeFields($time_line, 'report.report_fba_refund_treatment_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbacustomerreturnperorderfee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_fbacustomerreturnweightbasedfee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'amazon_return_sale_commission') {  //返还亚马逊销售佣金
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_return_and_return_sales_commission )";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_return_and_return_sales_commission');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_return_and_return_sales_commission * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, ' report.byorder_return_and_return_sales_commission * ({:RATE} / COALESCE(rates.rate ,1)) ');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_return_and_return_sales_commission )";
                        $time_fields = $this->getTimeFields($time_line, 'report.report_return_and_return_sales_commission');
                    } else {
                        $fields['count_total'] = "sum( report.report_return_and_return_sales_commission * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, 'report.report_return_and_return_sales_commission * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'amazon_return_shipping_fee') {  //返还运费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_returnshipping )";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_returnshipping ');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_returnshipping * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, ' report.byorder_returnshipping * ({:RATE} / COALESCE(rates.rate ,1)) ');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_returnshipping )";
                        $time_fields = $this->getTimeFields($time_line, 'report.report_returnshipping ');
                    } else {
                        $fields['count_total'] = "sum( report.report_returnshipping * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, ' report.report_returnshipping * ({:RATE} / COALESCE(rates.rate ,1)) ');
                    }
                }
            } else if ($time_target == 'amazon_refund_deducted_commission') {  //退款扣除佣金
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_return_and_return_commission )";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_return_and_return_commission');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_return_and_return_commission * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_return_and_return_commission * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_return_and_return_commission )";
                        $time_fields = $this->getTimeFields($time_line, 'report.report_return_and_return_commission');
                    } else {
                        $fields['count_total'] = "sum( report.report_return_and_return_commission * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, 'report.report_return_and_return_commission * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } elseif ($time_target == 'amazon_stock_fee') { //亚马逊-库存费用
                $estimated_monthly_storage_fee_field = "report.report_estimated_monthly_storage_fee";
                if ($datas['is_month_table'] == 1){
                    $estimated_monthly_storage_fee_field = " report.monthly_sku_estimated_monthly_storage_fee";
                }
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_channel_amazon_storage_fee + report.byorder_channel_amazon_storage_fee) ELSE report.byorder_estimated_monthly_storage_fee END )';
                        $time_fields = $this->getTimeFields($time_line, 'CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_channel_amazon_storage_fee + report.byorder_channel_amazon_storage_fee) ELSE report.byorder_estimated_monthly_storage_fee END');
                    } else {
                        $fields['count_total'] = 'SUM( CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))) ELSE (report.byorder_estimated_monthly_storage_fee / COALESCE(rates.rate ,1) * {:RATE}) END )';
                        $time_fields = $this->getTimeFields($time_line, 'CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))) ELSE (report.byorder_estimated_monthly_storage_fee / COALESCE(rates.rate ,1) * {:RATE}) END ');
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM( CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_channel_amazon_storage_fee+report.report_channel_amazon_storage_fee) ELSE '.$estimated_monthly_storage_fee_field.' END )';
                        $time_fields = $this->getTimeFields($time_line, 'CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_channel_amazon_storage_fee + report.report_channel_amazon_storage_fee) ELSE '.$estimated_monthly_storage_fee_field.' END');
                    } else {
                        $fields['count_total'] = 'SUM( CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))) ELSE ('.$estimated_monthly_storage_fee_field.' / COALESCE(rates.rate ,1) * {:RATE}) END )';
                        $time_fields = $this->getTimeFields($time_line, 'CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_channel_amazon_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))) ELSE ('.$estimated_monthly_storage_fee_field.' / COALESCE(rates.rate ,1) * {:RATE}) END');
                    }
                }
            } else if ($time_target == 'amazon_fba_monthly_storage_fee') {  //FBA月仓储费
                $estimated_monthly_storage_fee_field = "report.report_estimated_monthly_storage_fee";
                if ($datas['is_month_table'] == 1){
                    $estimated_monthly_storage_fee_field = " report.monthly_sku_estimated_monthly_storage_fee";
                }
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( CASE WHEN report.goods_operation_pattern = 2 THEN report.bychannel_fba_storage_fee ELSE report.byorder_estimated_monthly_storage_fee END  )";
                        $time_fields = $this->getTimeFields($time_line, 'CASE WHEN report.goods_operation_pattern = 2 THEN report.bychannel_fba_storage_fee ELSE report.byorder_estimated_monthly_storage_fee END');
                    } else {
                        $fields['count_total'] = "sum( CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_fba_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))) ELSE (report.byorder_estimated_monthly_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))) END  )";
                        $time_fields = $this->getTimeFields($time_line, 'CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_fba_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))) ELSE (report.byorder_estimated_monthly_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))) END ');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( CASE WHEN report.goods_operation_pattern = 2 THEN report.bychannel_fba_storage_fee ELSE {$estimated_monthly_storage_fee_field} END  )";
                        $time_fields = $this->getTimeFields($time_line, 'CASE WHEN report.goods_operation_pattern = 2 THEN report.bychannel_fba_storage_fee ELSE '.$estimated_monthly_storage_fee_field.' END');
                    } else {
                        $fields['count_total'] = "sum( CASE  WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_fba_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))) ELSE ({$estimated_monthly_storage_fee_field} * ({:RATE} / COALESCE(rates.rate ,1))) END  )";
                        $time_fields = $this->getTimeFields($time_line, 'CASE  WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_fba_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))) ELSE ('.$estimated_monthly_storage_fee_field.' * ({:RATE} / COALESCE(rates.rate ,1))) END ');
                    }
                }
            } elseif ($time_target == 'amazon_long_term_storage_fee') { //FBA长期仓储费
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(report.byorder_long_term_storage_fee + report.bychannel_fba_long_term_storage_fee)';
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_long_term_storage_fee + report.bychannel_fba_long_term_storage_fee');
                    } else {
                        $fields['count_total'] = 'SUM(report.byorder_long_term_storage_fee  * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_fba_long_term_storage_fee * ({:RATE} / COALESCE(rates.rate ,1)) )';
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_long_term_storage_fee  * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_fba_long_term_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(report.report_long_term_storage_fee + report.bychannel_fba_long_term_storage_fee)';
                        $time_fields = $this->getTimeFields($time_line, 'report.report_long_term_storage_fee + report.bychannel_fba_long_term_storage_fee');
                    } else {
                        $fields['count_total'] = 'SUM(report.report_long_term_storage_fee  * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_fba_long_term_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))  )';
                        $time_fields = $this->getTimeFields($time_line, 'report.report_long_term_storage_fee  * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_fba_long_term_storage_fee * ({:RATE} / COALESCE(rates.rate ,1))  ');
                    }
                }
            } else if ($time_target == 'amazon_other_fee') {  //其他亚马逊费用
                if ($datas['currency_code'] != 'ORIGIN' && !empty($this->tax_field) && strpos($this->tax_field,'{:RATE') === false){
                    $this->tax_field .= "* ({:RATE} / COALESCE(rates.rate ,1)) ";
                }
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( CASE WHEN report.goods_operation_pattern = 2 THEN (report.byorder_channel_amazon_other_fee + report.bychannel_channel_amazon_other_fee) ELSE report.byorder_goods_amazon_other_fee{$this->operate_channel_amazon_other_fee} END {$this->tax_field}) ";
                        $time_fields = $this->getTimeFields($time_line, '( CASE WHEN report.goods_operation_pattern = 2 THEN (report.byorder_channel_amazon_other_fee + report.bychannel_channel_amazon_other_fee) ELSE report.byorder_goods_amazon_other_fee'.$this->operate_channel_amazon_other_fee.' END '.$this->tax_field.')');
                    } else {
                        $fields['count_total'] = "sum(CASE WHEN report.goods_operation_pattern = 2 THEN (report.byorder_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1))) ELSE ((report.byorder_goods_amazon_other_fee{$this->operate_channel_amazon_other_fee}) * ({:RATE} / COALESCE(rates.rate ,1))) END  {$this->tax_field}) ";
                        $time_fields = $this->getTimeFields($time_line, '(CASE WHEN report.goods_operation_pattern = 2 THEN (report.byorder_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1))) ELSE ((report.byorder_goods_amazon_other_fee'.$this->operate_channel_amazon_other_fee.') * ({:RATE} / COALESCE(rates.rate ,1))) END  '.$this->tax_field.')');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum(CASE WHEN report.goods_operation_pattern = 2 THEN (report.report_channel_amazon_other_fee + report.bychannel_channel_amazon_other_fee) ELSE report.report_goods_amazon_other_fee{$this->operate_channel_amazon_other_fee} END {$this->tax_field}) ";
                        $time_fields = $this->getTimeFields($time_line, '(CASE WHEN report.goods_operation_pattern = 2 THEN (report.report_channel_amazon_other_fee + report.bychannel_channel_amazon_other_fee) ELSE report.report_goods_amazon_other_fee'.$this->operate_channel_amazon_other_fee.' END '.$this->tax_field.')');
                    } else {
                        $fields['count_total'] = "sum(CASE WHEN report.goods_operation_pattern = 2 THEN (report.report_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1))) ELSE ((report.report_goods_amazon_other_fee{$this->operate_channel_amazon_other_fee}) * ({:RATE} / COALESCE(rates.rate ,1))) END  {$this->tax_field}) ";
                        $time_fields = $this->getTimeFields($time_line, '(CASE WHEN report.goods_operation_pattern = 2 THEN (report.report_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_amazon_other_fee * ({:RATE} / COALESCE(rates.rate ,1))) ELSE ((report.report_goods_amazon_other_fee'.$this->operate_channel_amazon_other_fee.') * ({:RATE} / COALESCE(rates.rate ,1))) END  '.$this->tax_field.')');
                    }
                }
            } else if ($time_target == 'promote_discount') {  //promote折扣
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "SUM(report.byorder_promote_discount)";
                        $time_fields = $this->getTimeFields($time_line, "report.byorder_promote_discount");
                    } else {
                        $fields['count_total'] = "SUM(report.byorder_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, "report.byorder_promote_discount * ({:RATE} / COALESCE(rates.rate ,1))");
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "SUM(report.report_promote_discount)";
                        $time_fields = $this->getTimeFields($time_line, "report.report_promote_discount");
                    } else {
                        $fields['count_total'] = "SUM(report.report_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, "report.report_promote_discount * ({:RATE} / COALESCE(rates.rate ,1))");
                    }
                }
            } else if ($time_target == 'promote_refund_discount') {  //退款返还promote折扣
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "SUM(report.byorder_refund_promote_discount)";
                        $time_fields = $this->getTimeFields($time_line, "report.report_refund_promote_discount");
                    } else {
                        $fields['count_total'] = "SUM(report.byorder_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, "report.byorder_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) ");
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "SUM(report.report_refund_promote_discount)";
                        $time_fields = $this->getTimeFields($time_line, "report.report_refund_promote_discount");
                    } else {
                        $fields['count_total'] = "SUM(report.report_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) )";
                        $time_fields = $this->getTimeFields($time_line, "report.report_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1))");
                    }
                }
            } else if ($time_target == 'promote_store_fee') { //店铺促销费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(report.byorder_refund_promote_discount + report.byorder_promote_discount + report.bychannel_coupon_redemption_fee  + report.bychannel_run_lightning_deal_fee)';
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_refund_promote_discount + report.byorder_promote_discount + report.bychannel_coupon_redemption_fee +  report.bychannel_run_lightning_deal_fee');
                    } else {
                        $fields['count_total'] = 'SUM(report.byorder_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1))+ report.byorder_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_coupon_redemption_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_run_lightning_deal_fee * ({:RATE} / COALESCE(rates.rate ,1)))';
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1))+ report.byorder_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_coupon_redemption_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_run_lightning_deal_fee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(report.report_refund_promote_discount + report.report_promote_discount + report.bychannel_coupon_redemption_fee + report.bychannel_run_lightning_deal_fee)';
                        $time_fields = $this->getTimeFields($time_line, 'report.report_refund_promote_discount + report.report_promote_discount + report.bychannel_coupon_redemption_fee  + report.bychannel_run_lightning_deal_fee');
                    } else {
                        $fields['count_total'] = 'SUM(report.report_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1))+ report.report_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_coupon_redemption_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_run_lightning_deal_fee * ({:RATE} / COALESCE(rates.rate ,1)))';
                        $time_fields = $this->getTimeFields($time_line, 'report.report_refund_promote_discount * ({:RATE} / COALESCE(rates.rate ,1))+ report.report_promote_discount * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_coupon_redemption_fee * ({:RATE} / COALESCE(rates.rate ,1))  + report.bychannel_run_lightning_deal_fee * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'promote_coupon') { //coupon优惠券
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'SUM(report.bychannel_coupon_redemption_fee + report."bychannel_coupon_payment_eventList_tax")';
                    $time_fields = $this->getTimeFields($time_line, 'report.bychannel_coupon_redemption_fee + report."bychannel_coupon_payment_eventList_tax"');
                } else {
                    $fields['count_total'] = 'SUM(report.bychannel_coupon_redemption_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report."bychannel_coupon_payment_eventList_tax" * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    $time_fields = $this->getTimeFields($time_line, 'report.bychannel_coupon_redemption_fee * ({:RATE} / COALESCE(rates.rate ,1)) + report."bychannel_coupon_payment_eventList_tax" * ({:RATE} / COALESCE(rates.rate ,1)) ');
                }
            } elseif ($time_target == 'promote_run_lightning_deal_fee') {  //RunLightningDealFee';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'SUM(report.bychannel_run_lightning_deal_fee)';
                    $time_fields = $this->getTimeFields($time_line, 'report.bychannel_run_lightning_deal_fee');
                } else {
                    $fields['count_total'] = 'SUM(report.bychannel_run_lightning_deal_fee * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    $time_fields = $this->getTimeFields($time_line, 'report.bychannel_run_lightning_deal_fee * ({:RATE} / COALESCE(rates.rate ,1)) ');
                }
            } else if ($time_target == 'cpc_ad_fee') {  //广告费用
                if ($datas['currency_code'] == 'ORIGIN') {//由于byorder_cpc_cost 和report_cpc_cost 实际一样，所以不用区分
                    $fields['count_total'] = " sum( CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_product_ads_payment_eventlist_charge + report.bychannel_product_ads_payment_eventlist_refund) ELSE (report.byorder_cpc_cost + report.byorder_cpc_sd_cost) END ) ";
                    $time_fields = $this->getTimeFields($time_line, '( CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_product_ads_payment_eventlist_charge + report.bychannel_product_ads_payment_eventlist_refund) ELSE (report.byorder_cpc_cost + report.byorder_cpc_sd_cost) END )');
                } else {
                    $fields['count_total'] = " sum( CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_product_ads_payment_eventlist_charge * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_product_ads_payment_eventlist_refund * ({:RATE} / COALESCE(rates.rate ,1))) ELSE (report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1)) ) END) ";
                    $time_fields = $this->getTimeFields($time_line, '( CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_product_ads_payment_eventlist_charge * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_product_ads_payment_eventlist_refund * ({:RATE} / COALESCE(rates.rate ,1))) ELSE (report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1)) ) END) ');
                }
            } else if ($time_target == 'cpc_cost_rate') {  //CPC花费占比
                $fields_tmp = "( CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_product_ads_payment_eventlist_charge + report.bychannel_product_ads_payment_eventlist_refund) ELSE (report.byorder_cpc_cost + report.byorder_cpc_sd_cost) END ) * ({:RATE} / COALESCE(rates.rate ,1)) ";
                if ($datas['sale_datas_origin'] == '1') {

                    $fields_denominator = "report.byorder_sales_quota * ({:RATE} / COALESCE(rates.rate ,1))";

                } else {

                    $fields_denominator = "report.report_sales_quota * ({:RATE} / COALESCE(rates.rate ,1))";
                }
                $fields['count_total'] = "SUM(  $fields_tmp )  * 1.0000 / nullif(SUM($fields_denominator),0)";
                $time_fields = $this->getTimeFields($time_line, $fields_tmp, $fields_denominator);
            } else if ($time_target == 'cpc_exposure') {  //CPC曝光量
                $fields['count_total'] = "sum( report.byorder_reserved_field1 + report.byorder_reserved_field2 + report.bychannel_reserved_field3 )";
                $time_fields = $this->getTimeFields($time_line, 'report.byorder_reserved_field1 + report.byorder_reserved_field2 + report.bychannel_reserved_field3');
            } else if ($time_target == 'cpc_click_number') {  //CPC点击次数
                $fields['count_total'] = "sum( report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks + report.bychannel_reserved_field4 )";
                $time_fields = $this->getTimeFields($time_line, 'report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks + report.bychannel_reserved_field4');
            } else if ($time_target == 'cpc_click_rate') {  //CPC点击率
                $fields['count_total'] = "(SUM( report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks + report.bychannel_reserved_field4 )) * 1.0000 / nullif( SUM(report.byorder_reserved_field1 + report.byorder_reserved_field2 + report.bychannel_reserved_field3), 0 ) ";
                $time_fields = $this->getTimeFields($time_line, 'report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks + report.bychannel_reserved_field4', 'report.byorder_reserved_field1 + report.byorder_reserved_field2 + report.bychannel_reserved_field3');

            } else if ($time_target == 'cpc_order_number') {  //CPC订单数
                $fields['count_total'] = 'sum( report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" + report.bychannel_reserved_field7 ) ';
                $time_fields = $this->getTimeFields($time_line, 'report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" + report.bychannel_reserved_field7');
            } else if ($time_target == 'cpc_click_conversion_rate') {  //cpc点击转化率
                $fields['count_total'] = '(sum( report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" + report.bychannel_reserved_field7 ))  * 1.0000 / nullif (SUM(report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks + report.bychannel_reserved_field4) , 0 )';
                $time_fields = $this->getTimeFields($time_line, 'report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" + report.bychannel_reserved_field7', 'report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks + report.bychannel_reserved_field4');
            } else if ($time_target == 'cpc_turnover') {  //CPC成交额
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'sum( report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d" +  report."bychannel_reserved_field5"  )';
                    $time_fields = $this->getTimeFields($time_line, 'report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d" +  report."bychannel_reserved_field5"');
                } else {
                    $fields['count_total'] = 'sum( report."byorder_sp_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1)) + report."byorder_sd_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1))  + report."bychannel_reserved_field5" * ({:RATE} / COALESCE(rates.rate ,1))  )';
                    $time_fields = $this->getTimeFields($time_line, 'report."byorder_sp_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1)) + report."byorder_sd_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1))  + report."bychannel_reserved_field5" * ({:RATE} / COALESCE(rates.rate ,1)) ');
                }
            } else if ($time_target == 'cpc_turnover_rate') {  //CPC成交额占比
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['count_total'] = 'sum(  (report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d" +  report."bychannel_reserved_field5")* ({:RATE} / COALESCE(rates.rate ,1)) ) * 1.0000 / nullif( SUM(report.byorder_sales_quota* ({:RATE} / COALESCE(rates.rate ,1))),0)';
                    $time_fields = $this->getTimeFields($time_line, ' (report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d" +  report."bychannel_reserved_field5") * ({:RATE} / COALESCE(rates.rate ,1))', 'report.byorder_sales_quota* ({:RATE} / COALESCE(rates.rate ,1))');
                } else {
                    $fields['count_total'] = 'sum(  (report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d" +  report."bychannel_reserved_field5") * ({:RATE} / COALESCE(rates.rate ,1))) * 1.0000 / nullif( SUM(report.report_sales_quota* ({:RATE} / COALESCE(rates.rate ,1))),0)';
                    $time_fields = $this->getTimeFields($time_line, '  (report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d" +  report."bychannel_reserved_field5") * ({:RATE} / COALESCE(rates.rate ,1))', 'report.report_sales_quota* ({:RATE} / COALESCE(rates.rate ,1))');
                }
            } else if ($time_target == 'cpc_avg_click_cost') {  //CPC平均点击花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'sum( CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_product_ads_payment_eventlist_charge * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_product_ads_payment_eventlist_refund * ({:RATE} / COALESCE(rates.rate ,1))) ELSE (report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1))) END ) * 1.0000 / nullif(sum( report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks + report.bychannel_reserved_field4 ),0) ';
                    $time_fields = $this->getTimeFields($time_line, '(CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_product_ads_payment_eventlist_charge * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_product_ads_payment_eventlist_refund * ({:RATE} / COALESCE(rates.rate ,1))) ELSE (report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1))) END)', 'report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks + report.bychannel_reserved_field4');
                } else {
                    $fields['count_total'] = 'sum( (CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_product_ads_payment_eventlist_charge * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_product_ads_payment_eventlist_refund * ({:RATE} / COALESCE(rates.rate ,1))) ELSE (report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1))) END) * ({:RATE} / COALESCE(rates.rate ,1)) ) * 1.0000 / nullif(sum( report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks + report.bychannel_reserved_field4 ),0) ';
                    $time_fields = $this->getTimeFields($time_line, '(CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_product_ads_payment_eventlist_charge * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_product_ads_payment_eventlist_refund * ({:RATE} / COALESCE(rates.rate ,1))) ELSE (report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1))) END) * ({:RATE} / COALESCE(rates.rate ,1)) ', 'report.byorder_cpc_sd_clicks +report.byorder_cpc_sp_clicks + report.bychannel_reserved_field4');
                }

            } else if ($time_target == 'cpc_acos') {  // ACOS
                $fields['count_total'] = 'SUM(CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_product_ads_payment_eventlist_charge * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_product_ads_payment_eventlist_refund * ({:RATE} / COALESCE(rates.rate ,1))) ELSE (report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1))) END  ) * 1.0000 / nullif( sum( report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d" +  report."bychannel_reserved_field5"  ) , 0 ) ';
                $time_fields = $this->getTimeFields($time_line, '(CASE WHEN report.goods_operation_pattern = 2 THEN (report.bychannel_product_ads_payment_eventlist_charge * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_product_ads_payment_eventlist_refund * ({:RATE} / COALESCE(rates.rate ,1))) ELSE (report.byorder_cpc_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_cpc_sd_cost * ({:RATE} / COALESCE(rates.rate ,1))) END) ', 'report."byorder_sp_attributedSales7d" + report."byorder_sd_attributedSales7d" +  report."bychannel_reserved_field5" ');

            } else if ($time_target == 'cpc_direct_sales_volume') {  //CPC直接销量
                $fields['count_total'] = 'sum( report."byorder_sd_attributedConversions7dSameSKU" + report."byorder_sp_attributedConversions7dSameSKU" + report.bychannel_reserved_field8 )';
                $time_fields = $this->getTimeFields($time_line, ' report."byorder_sd_attributedConversions7dSameSKU" + report."byorder_sp_attributedConversions7dSameSKU" + report.bychannel_reserved_field8 ');
            } else if ($time_target == 'cpc_direct_sales_quota') {  //CPC直接销售额
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'sum( report."byorder_sd_attributedSales7dSameSKU" + report."byorder_sp_attributedSales7dSameSKU" + report."bychannel_reserved_field6"  )';
                    $time_fields = $this->getTimeFields($time_line, '  report."byorder_sd_attributedSales7dSameSKU" + report."byorder_sp_attributedSales7dSameSKU" + report."bychannel_reserved_field6" ');
                } else {
                    $fields['count_total'] = 'sum( report."byorder_sd_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1))  + report."byorder_sp_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1)) + report."bychannel_reserved_field6" * ({:RATE} / COALESCE(rates.rate ,1))  )';
                    $time_fields = $this->getTimeFields($time_line, ' report."byorder_sd_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1))  + report."byorder_sp_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1)) + report."bychannel_reserved_field6" * ({:RATE} / COALESCE(rates.rate ,1)) ');
                }
            } else if ($time_target == 'cpc_direct_sales_volume_rate') {  // CPC直接销量占比
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['count_total'] = 'sum( report."byorder_sd_attributedConversions7dSameSKU" + report."byorder_sp_attributedConversions7dSameSKU" + report.bychannel_reserved_field8  )  * 1.0000 / nullif(sum( report.byorder_sales_volume+ report.byorder_group_id ) ,0)';
                    $time_fields = $this->getTimeFields($time_line, ' report."byorder_sd_attributedConversions7dSameSKU" + report."byorder_sp_attributedConversions7dSameSKU" + report.bychannel_reserved_field8 ', 'report.byorder_sales_volume+ report.byorder_group_id');
                } elseif ($datas['sale_datas_origin'] == '2') {
                    $fields['count_total'] = 'sum( report."byorder_sd_attributedConversions7dSameSKU" + report."byorder_sp_attributedConversions7dSameSKU" + report.bychannel_reserved_field8 )  * 1.0000 / nullif(sum( report.report_sales_volume + report.report_group_id  ) ,0)';
                    $time_fields = $this->getTimeFields($time_line, ' report."byorder_sd_attributedConversions7dSameSKU" + report."byorder_sp_attributedConversions7dSameSKU" + report.bychannel_reserved_field8 ', 'report.report_sales_volume+ report.report_group_id');
                }
            } else if ($time_target == 'cpc_indirect_sales_volume') {  //CPC间接销量
                $fields['count_total'] = ' SUM(report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" + report.bychannel_reserved_field7 - report."byorder_sd_attributedConversions7dSameSKU" - report."byorder_sp_attributedConversions7dSameSKU" - report.bychannel_reserved_field8 )';
                $time_fields = $this->getTimeFields($time_line, 'report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" + report.bychannel_reserved_field7 - report."byorder_sd_attributedConversions7dSameSKU" - report."byorder_sp_attributedConversions7dSameSKU" - report.bychannel_reserved_field8');
            } else if ($time_target == 'cpc_indirect_sales_quota') {  //CPC间接销售额
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'sum(report."byorder_sd_attributedSales7d" + report."byorder_sp_attributedSales7d" + report."bychannel_reserved_field5" - report."byorder_sd_attributedSales7dSameSKU" - report."byorder_sp_attributedSales7dSameSKU" - report."bychannel_reserved_field6" )';
                    $time_fields = $this->getTimeFields($time_line, 'report."byorder_sd_attributedSales7d" + report."byorder_sp_attributedSales7d" + report."bychannel_reserved_field5"  - report."byorder_sd_attributedSales7dSameSKU" - report."byorder_sp_attributedSales7dSameSKU" - report."bychannel_reserved_field6"');
                } else {
                    $fields['count_total'] = 'sum(report."byorder_sd_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1))  + report."byorder_sp_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1)) + report."bychannel_reserved_field5" * ({:RATE} / COALESCE(rates.rate ,1))  - report."byorder_sd_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1))  - report."byorder_sp_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1)) - report."bychannel_reserved_field6" * ({:RATE} / COALESCE(rates.rate ,1))  )';
                    $time_fields = $this->getTimeFields($time_line, 'report."byorder_sd_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1))  + report."byorder_sp_attributedSales7d" * ({:RATE} / COALESCE(rates.rate ,1)) + report."bychannel_reserved_field5" * ({:RATE} / COALESCE(rates.rate ,1))  - report."byorder_sd_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1))  - report."byorder_sp_attributedSales7dSameSKU" * ({:RATE} / COALESCE(rates.rate ,1)) - report."bychannel_reserved_field6" * ({:RATE} / COALESCE(rates.rate ,1)) ');
                }
            } else if ($time_target == 'cpc_indirect_sales_volume_rate') {  //CPC间接销量占比
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['count_total'] = 'sum( report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" + report."bychannel_reserved_field7" - report."byorder_sd_attributedConversions7dSameSKU" - report."byorder_sp_attributedConversions7dSameSKU" - report."bychannel_reserved_field8" )  * 1.0000 / nullif(sum( report.byorder_sales_volume + report.byorder_group_id) ,0)';
                    $time_fields = $this->getTimeFields($time_line, 'report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" + report."bychannel_reserved_field7" - report."byorder_sd_attributedConversions7dSameSKU" - report."byorder_sp_attributedConversions7dSameSKU" - report."bychannel_reserved_field8"', 'report.byorder_sales_volume + report.byorder_group_id');
                } else {
                    $fields['count_total'] = 'sum( report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" - report."byorder_sd_attributedConversions7dSameSKU" + report."bychannel_reserved_field7" - report."byorder_sp_attributedConversions7dSameSKU" - report."bychannel_reserved_field8" )  * 1.0000 / nullif(sum( report.report_sales_volume + report.report_group_id) ,0)';
                    $time_fields = $this->getTimeFields($time_line, 'report."byorder_sp_attributedConversions7d" + report."byorder_sd_attributedConversions7d" - report."byorder_sd_attributedConversions7dSameSKU" + report."bychannel_reserved_field7" - report."byorder_sp_attributedConversions7dSameSKU" - report."bychannel_reserved_field8"', 'report.report_sales_volume+ report.report_group_id');
                }
            } else if ($time_target == 'goods_adjust_fee') { //商品调整费用

                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(CASE WHEN report.goods_operation_pattern = 2 THEN (report.byorder_channel_goods_adjustment_fee + report.bychannel_channel_goods_adjustment_fee) ELSE 0 END)';
                        $time_fields = $this->getTimeFields($time_line, 'CASE WHEN report.goods_operation_pattern = 2 THEN (report.byorder_channel_goods_adjustment_fee + report.bychannel_channel_goods_adjustment_fee) ELSE 0 END');
                    } else {
                        $fields['count_total'] = 'SUM(CASE WHEN report.goods_operation_pattern = 2 THEN (report.byorder_channel_goods_adjustment_fee  * ({:RATE} / COALESCE(rates.rate ,1)) +  report.bychannel_channel_goods_adjustment_fee * ({:RATE} / COALESCE(rates.rate ,1)) ) ELSE 0 END)';
                        $time_fields = $this->getTimeFields($time_line, 'CASE WHEN report.goods_operation_pattern = 2 THEN (report.byorder_channel_goods_adjustment_fee  * ({:RATE} / COALESCE(rates.rate ,1)) +  report.bychannel_channel_goods_adjustment_fee * ({:RATE} / COALESCE(rates.rate ,1)) ) ELSE 0 END');
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = 'SUM(CASE WHEN report.goods_operation_pattern = 2 THEN (report.report_channel_goods_adjustment_fee + report.bychannel_channel_goods_adjustment_fee) ELSE 0 END)';
                        $time_fields = $this->getTimeFields($time_line, 'CASE WHEN report.goods_operation_pattern = 2 THEN (report.report_channel_goods_adjustment_fee + report.bychannel_channel_goods_adjustment_fee) ELSE 0 END');
                    } else {
                        $fields['count_total'] = 'SUM(CASE WHEN report.goods_operation_pattern = 2 THEN (report.report_channel_goods_adjustment_fee  * ({:RATE} / COALESCE(rates.rate ,1)) +  report.bychannel_channel_goods_adjustment_fee * ({:RATE} / COALESCE(rates.rate ,1)) ) ELSE 0 END)';
                        $time_fields = $this->getTimeFields($time_line, 'CASE WHEN report.goods_operation_pattern = 2 THEN (report.report_channel_goods_adjustment_fee  * ({:RATE} / COALESCE(rates.rate ,1)) +  report.bychannel_channel_goods_adjustment_fee * ({:RATE} / COALESCE(rates.rate ,1))) ELSE 0 END');
                    }
                }

            } else if ($time_target == 'evaluation_fee') {  //测评费用
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.byorder_reserved_field10 ) ";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_reserved_field10');
                    } else {
                        $fields['count_total'] = "sum( report.byorder_reserved_field10 * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($time_line, ' report.byorder_reserved_field10 * ({:RATE} / COALESCE(rates.rate ,1)) ');
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "sum( report.report_reserved_field10 ) ";
                        $time_fields = $this->getTimeFields($time_line, 'report.report_reserved_field10');
                    } else {
                        $fields['count_total'] = "sum( report.report_reserved_field10 * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                        $time_fields = $this->getTimeFields($time_line, ' report.report_reserved_field10 * ({:RATE} / COALESCE(rates.rate ,1)) ');
                    }
                }

            } else if ($time_target == 'evaluation_fee_rate') {  //测评费用占比
                if ($datas['sale_datas_origin'] == '1') {
                    if ($datas['finance_datas_origin'] == '1') {
                        $fields['count_total'] = "SUM(report.byorder_reserved_field10* ({:RATE} / COALESCE(rates.rate ,1)) )  * 1.0000 / nullif(SUM(report.byorder_sales_quota* ({:RATE} / COALESCE(rates.rate ,1))),0)";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_reserved_field10* ({:RATE} / COALESCE(rates.rate ,1))', 'report.byorder_sales_quota* ({:RATE} / COALESCE(rates.rate ,1))');
                    } else {
                        $fields['count_total'] = "SUM(report.report_reserved_field10* ({:RATE} / COALESCE(rates.rate ,1)) )  * 1.0000 / nullif(SUM(report.byorder_sales_quota* ({:RATE} / COALESCE(rates.rate ,1))),0)";
                        $time_fields = $this->getTimeFields($time_line, 'report.report_reserved_field10* ({:RATE} / COALESCE(rates.rate ,1))', 'report.byorder_sales_quota* ({:RATE} / COALESCE(rates.rate ,1))');
                    }

                } else {
                    if ($datas['finance_datas_origin'] == '1') {
                        $fields['count_total'] = "SUM(report.byorder_reserved_field10* ({:RATE} / COALESCE(rates.rate ,1)) )  * 1.0000 / nullif(SUM(report.report_sales_quota* ({:RATE} / COALESCE(rates.rate ,1))),0)";
                        $time_fields = $this->getTimeFields($time_line, 'report.byorder_reserved_field10* ({:RATE} / COALESCE(rates.rate ,1))', 'report.report_sales_quota* ({:RATE} / COALESCE(rates.rate ,1))');
                    } else {
                        $fields['count_total'] = "SUM(report.report_reserved_field10* ({:RATE} / COALESCE(rates.rate ,1)) )  * 1.0000 / nullif(SUM(report.report_sales_quota* ({:RATE} / COALESCE(rates.rate ,1))),0)";
                        $time_fields = $this->getTimeFields($time_line, 'report.report_reserved_field10* ({:RATE} / COALESCE(rates.rate ,1))', 'report.report_sales_quota* ({:RATE} / COALESCE(rates.rate ,1))');
                    }

                }
            } else if ($time_target == 'purchase_logistics_purchase_cost') {  //采购成本
                if ($datas['cost_count_type'] == '1') {
                    if ($datas['finance_datas_origin'] == '1') {
                        if ($datas['currency_code'] == 'ORIGIN') {
                            $fields['count_total'] = " sum( report.byorder_purchasing_cost ) ";
                            $time_fields = $this->getTimeFields($time_line, 'report.byorder_purchasing_cost');
                        } else {
                            $fields['count_total'] = " sum( report.byorder_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                            $time_fields = $this->getTimeFields($time_line, ' report.byorder_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) ');
                        }
                    } else {
                        if ($datas['currency_code'] == 'ORIGIN') {
                            $fields['count_total'] = " sum( report.report_purchasing_cost ) ";
                            $time_fields = $this->getTimeFields($time_line, 'report.report_purchasing_cost');
                        } else {
                            $fields['count_total'] = " sum( report.report_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                            $time_fields = $this->getTimeFields($time_line, ' report.report_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) ');
                        }
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = " sum(  (report.first_purchasing_cost) ) ";
                        $time_fields = $this->getTimeFields($time_line, '(report.first_purchasing_cost)');
                    } else {
                        $fields['count_total'] = " sum( (report.first_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) ) ) ";
                        $time_fields = $this->getTimeFields($time_line, ' (report.first_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1))) ');
                    }
                }

            } else if ($time_target == 'purchase_logistics_logistics_cost') {  // 物流/头程
                if ($datas['cost_count_type'] == '1') {
                    if ($datas['finance_datas_origin'] == '1') {
                        if ($datas['currency_code'] == 'ORIGIN') {
                            $fields['count_total'] = " sum( report.byorder_logistics_head_course ) ";
                            $time_fields = $this->getTimeFields($time_line, ' report.byorder_logistics_head_course');
                        } else {
                            $fields['count_total'] = " sum( report.byorder_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                            $time_fields = $this->getTimeFields($time_line, 'report.byorder_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))');
                        }
                    } else {
                        if ($datas['currency_code'] == 'ORIGIN') {
                            $fields['count_total'] = " sum( report.report_logistics_head_course ) ";
                            $time_fields = $this->getTimeFields($time_line, ' report.report_logistics_head_course');
                        } else {
                            $fields['count_total'] = " sum( report.report_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) ) ";
                            $time_fields = $this->getTimeFields($time_line, 'report.report_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))');
                        }
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = " sum(( report.first_logistics_head_course) ) ";
                        $time_fields = $this->getTimeFields($time_line, ' (report.first_logistics_head_course)');
                    } else {
                        $fields['count_total'] = " sum( (report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) ) ) ";
                        $time_fields = $this->getTimeFields($time_line, '(report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1)) )');
                    }
                }
            } else if ($time_target == 'purchase_logistics_cost_rate') {  // 成本/物流费用占比
                if ($datas['sale_datas_origin'] == 1) {
                    if ($datas['cost_count_type'] == '1') {
                        if ($datas['finance_datas_origin'] == '1') {
                            $fields['count_total'] = " sum( (report.byorder_logistics_head_course + report.byorder_purchasing_cost)* ({:RATE} / COALESCE(rates.rate ,1)) ) * 1.0000 / nullif(sum( report.byorder_sales_quota* ({:RATE} / COALESCE(rates.rate ,1)) ),0)  ";
                            $time_fields = $this->getTimeFields($time_line, ' (report.byorder_logistics_head_course  + report.byorder_purchasing_cost)* ({:RATE} / COALESCE(rates.rate ,1)) ', 'report.byorder_sales_quota* ({:RATE} / COALESCE(rates.rate ,1))');
                        } else {
                            $fields['count_total'] = " sum( (report.report_logistics_head_course + report.report_purchasing_cost)* ({:RATE} / COALESCE(rates.rate ,1))  ) * 1.0000 / nullif(sum( report.byorder_sales_quota* ({:RATE} / COALESCE(rates.rate ,1)) ),0)  ";
                            $time_fields = $this->getTimeFields($time_line, ' (report.report_logistics_head_course + report.report_purchasing_cost)* ({:RATE} / COALESCE(rates.rate ,1))', 'report.byorder_sales_quota* ({:RATE} / COALESCE(rates.rate ,1))');
                        }
                    } else {
                        $fields['count_total'] = " sum( (report.first_logistics_head_course + report.first_purchasing_cost)* ({:RATE} / COALESCE(rates.rate ,1))) * 1.0000 / nullif(sum( report.byorder_sales_quota* ({:RATE} / COALESCE(rates.rate ,1)) ),0)  ";
                        $time_fields = $this->getTimeFields($time_line, '( report.first_logistics_head_course + report.first_purchasing_cost)* ({:RATE} / COALESCE(rates.rate ,1))', 'report.byorder_sales_quota* ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } else {
                    if ($datas['cost_count_type'] == '1') {
                        if ($datas['finance_datas_origin'] == '1') {
                            $fields['count_total'] = " sum( (report.byorder_logistics_head_course + report.byorder_purchasing_cost)* ({:RATE} / COALESCE(rates.rate ,1)) ) * 1.0000 / nullif(sum( report.report_sales_quota* ({:RATE} / COALESCE(rates.rate ,1)) ),0)  ";
                            $time_fields = $this->getTimeFields($time_line, ' (report.byorder_logistics_head_course  + report.byorder_purchasing_cost)* ({:RATE} / COALESCE(rates.rate ,1)) ', 'report.report_sales_quota* ({:RATE} / COALESCE(rates.rate ,1))');
                        } else {
                            $fields['count_total'] = " sum( (report.report_logistics_head_course + report.report_purchasing_cost)* ({:RATE} / COALESCE(rates.rate ,1))  ) * 1.0000 / nullif(sum( report.report_sales_quota* ({:RATE} / COALESCE(rates.rate ,1))),0)  ";
                            $time_fields = $this->getTimeFields($time_line, ' (report.report_logistics_head_course + report.report_purchasing_cost)* ({:RATE} / COALESCE(rates.rate ,1))', 'report.report_sales_quota* ({:RATE} / COALESCE(rates.rate ,1))');
                        }
                    } else {
                        $fields['count_total'] = " sum( (report.first_logistics_head_course + report.first_purchasing_cost)* ({:RATE} / COALESCE(rates.rate ,1))) * 1.0000 / nullif(sum( report.report_sales_quota* ({:RATE} / COALESCE(rates.rate ,1)) ),0)  ";
                        $time_fields = $this->getTimeFields($time_line, '( report.first_logistics_head_course + report.first_purchasing_cost)* ({:RATE} / COALESCE(rates.rate ,1))', 'report.report_sales_quota* ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }
            } else if ($time_target == 'operate_fee') {  //运营费用
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "sum(CASE WHEN report.goods_operation_pattern = 1 THEN (0- report.byorder_reserved_field16)  ELSE report.bychannel_operating_fee END) ";
                    $time_fields = $this->getTimeFields($time_line, 'CASE WHEN report.goods_operation_pattern = 1 THEN (0 - report.byorder_reserved_field16) ELSE report.bychannel_operating_fee END');
                } else {
                    $fields['count_total'] = "sum(CASE WHEN report.goods_operation_pattern = 1 THEN (0 -  report.byorder_reserved_field16 )* ({:RATE} / COALESCE(rates.rate ,1)) ELSE report.bychannel_operating_fee * ({:RATE} / COALESCE(rates.rate ,1)) END) ";
                    $time_fields = $this->getTimeFields($time_line, ' CASE WHEN report.goods_operation_pattern = 1 THEN (0 -  report.byorder_reserved_field16 )* ({:RATE} / COALESCE(rates.rate ,1)) ELSE report.bychannel_operating_fee * ({:RATE} / COALESCE(rates.rate ,1)) END ');
                }
            } else if ($time_target == 'operate_fee_rate') {  //运营费用占比
                $rate_fields = $datas['currency_code'] == 'ORIGIN' ? " * 1.0000" : " * ({:RATE} / COALESCE(rates.rate ,1))";
                if ($datas['sale_datas_origin'] == '1') {
                    $fields['count_total'] = "SUM( CASE WHEN report.goods_operation_pattern = 1 THEN (0 - report.byorder_reserved_field16 ) {$rate_fields} ElSE (report.bychannel_operating_fee {$rate_fields})  END)  * 1.0000 / nullif(SUM(report.byorder_sales_quota {$rate_fields}),0)";
                    $time_fields = $this->getTimeFields($time_line, "(CASE WHEN report.goods_operation_pattern = 1 THEN (0-report.byorder_reserved_field16) {$rate_fields} ELSE report.bychannel_operating_fee {$rate_fields} END) * 1.0000" , 'report.byorder_sales_quota' . $rate_fields);
                } else {
                    $fields['count_total'] = "SUM( CASE WHEN report.goods_operation_pattern = 1 THEN (0 - report.byorder_reserved_field16 ) {$rate_fields} ElSE (report.bychannel_operating_fee {$rate_fields}) END)  * 1.0000 / nullif(SUM(report.report_sales_quota {$rate_fields}),0)";
                    $time_fields = $this->getTimeFields($time_line, "(CASE WHEN report.goods_operation_pattern = 1 THEN (0-report.byorder_reserved_field16) {$rate_fields} ELSE report.bychannel_operating_fee {$rate_fields} END) * 1.0000", 'report.report_sales_quota' . $rate_fields );
                }
            } else if ($time_target == 'other_vat_fee') {//VAT
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "SUM(0-report.byorder_reserved_field17)";
                        $time_fields = $this->getTimeFields($time_line, '0-report.byorder_reserved_field17');
                    } else {
                        $fields['count_total'] = "SUM((0-report.byorder_reserved_field17) * ({:RATE} / COALESCE(rates.rate ,1)))";
                        $time_fields = $this->getTimeFields($time_line, '(0-report.byorder_reserved_field17) * ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                } else {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        $fields['count_total'] = "SUM(0-report.report_reserved_field17)";
                        $time_fields = $this->getTimeFields($time_line, '0-report.report_reserved_field17');
                    } else {
                        $fields['count_total'] = "SUM((0-report.report_reserved_field17) * ({:RATE} / COALESCE(rates.rate ,1)))";
                        $time_fields = $this->getTimeFields($time_line, '(0-report.report_reserved_field17 )* ({:RATE} / COALESCE(rates.rate ,1))');
                    }
                }

            } else if ($time_target == 'other_other_fee') { //其他
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.bychannel_loan_payment +  report.bychannel_review_enrollment_fee)";
                    $time_fields = $this->getTimeFields($time_line, 'report.bychannel_loan_payment + report.bychannel_review_enrollment_fee');
                } else {
                    $fields['count_total'] = "SUM(report.bychannel_loan_payment * ({:RATE} / COALESCE(rates.rate ,1)) +  report.bychannel_review_enrollment_fee * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    $time_fields = $this->getTimeFields($time_line, 'report.bychannel_loan_payment * ({:RATE} / COALESCE(rates.rate ,1)) +  report.bychannel_review_enrollment_fee * ({:RATE} / COALESCE(rates.rate ,1))');
                }
            } else if ($time_target == 'other_review_enrollment_fee') { //早期评论者计划
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.bychannel_review_enrollment_fee)";
                    $time_fields = $this->getTimeFields($time_line, 'report.bychannel_review_enrollment_fee');
                } else {
                    $fields['count_total'] = "SUM(report.bychannel_review_enrollment_fee * ({:RATE} / COALESCE(rates.rate ,1))  )";
                    $time_fields = $this->getTimeFields($time_line, 'report.bychannel_review_enrollment_fee * ({:RATE} / COALESCE(rates.rate ,1))');
                }
            } else if ($time_target == 'cost_profit_profit') {  //毛利润
                $repair_data = $this->tax_field.$this->operate_profit;
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['sale_datas_origin'] == '2') {
                        $repair_data .= " + report.report_sales_quota - report.byorder_sales_quota  ";
                    }
                    if ($datas['refund_datas_origin'] == '2') {
                        $repair_data .= " + report.byorder_refund - report.report_refund ";
                    }
                } else {
                    if ($datas['sale_datas_origin'] == '1') {
                        $repair_data .= " + report.byorder_sales_quota - report.report_sales_quota  ";
                    }
                    if ($datas['refund_datas_origin'] == '1') {
                        $repair_data .= " + report.report_refund - report.byorder_refund ";
                    }
                }
                $estimated_monthly_storage_fee_field = "";
                if ($datas['is_month_table'] == 1){
                    $estimated_monthly_storage_fee_field = " - report.report_estimated_monthly_storage_fee + report.monthly_sku_estimated_monthly_storage_fee";
                }
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        if ($datas['cost_count_type'] == '1') {
                            $fields['count_total'] = 'SUM(CASE WHEN report.goods_operation_pattern = 2 THEN (COALESCE(report.byorder_channel_profit,0) + COALESCE(report.bychannel_channel_profit,0) + COALESCE(report.byorder_purchasing_cost,0) + COALESCE(report.byorder_logistics_head_course,0)) ELSE (report.byorder_goods_profit+ report.byorder_purchasing_cost + report.byorder_logistics_head_course  END ) + SUM(0 ' . $repair_data . ')';
                            $time_fields = $this->getTimeFields($time_line, ' (CASE WHEN report.goods_operation_pattern = 2 THEN (report.byorder_channel_profit + report.bychannel_channel_profit + report.byorder_purchasing_cost + report.byorder_logistics_head_course) ELSE (report.byorder_goods_profit+ report.byorder_purchasing_cost + report.byorder_logistics_head_course  END ) ' . $repair_data);
                        } else {
                            $fields['count_total'] = 'SUM(  CASE WHEN report.goods_operation_pattern = 2 THEN (COALESCE(report.first_purchasing_cost,0) + COALESCE(report.first_logistics_head_course,0)  +COALESCE(report.byorder_channel_profit,0) + COALESCE(report.bychannel_channel_profit,0)) ELSE (report.first_purchasing_cost + report.first_logistics_head_course  + report.byorder_goods_profit) END  ) + SUM(0 ' . $repair_data . ')';
                            $time_fields = $this->getTimeFields($time_line, ' (  CASE WHEN report.goods_operation_pattern = 2 THEN (report.first_purchasing_cost + report.first_logistics_head_course  +report.byorder_channel_profit + report.bychannel_channel_profit) ELSE (report.first_purchasing_cost + report.first_logistics_head_course  + report.byorder_goods_profit) END  )' . $repair_data);
                        }
                    } else {
                        if ($datas['cost_count_type'] == '1') {
                            $purchasing_logistics = "COALESCE(report.byorder_purchasing_cost,0) * ({:RATE} / COALESCE(rates.rate ,1)) + report.byorder_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))";
                        } else {
                            $purchasing_logistics = "COALESCE(report.first_purchasing_cost,0) * ({:RATE} / COALESCE(rates.rate ,1)) + report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))";
                        }
                        $fields_tmp = "CASE WHEN report.goods_operation_pattern = 2 THEN (COALESCE(report.byorder_channel_profit,0) * ({:RATE} / COALESCE(rates.rate ,1)) + COALESCE(report.bychannel_channel_profit,0) * ({:RATE} / COALESCE(rates.rate ,1)) + $purchasing_logistics ) ELSE (report.byorder_goods_profit * ({:RATE} / COALESCE(rates.rate ,1)) + $purchasing_logistics ) END + (0 " . $repair_data . ") * ({:RATE} / COALESCE(rates.rate ,1))";

                        $fields['count_total'] = "SUM( $fields_tmp )";
                        $time_fields = $this->getTimeFields($time_line, "( $fields_tmp )");

                    }
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['currency_code'] == 'ORIGIN') {
                        if ($datas['cost_count_type'] == '1') {
                            $purchasing_logistics = "report.report_purchasing_cost  + report.report_logistics_head_course";
                        } else {
                            $purchasing_logistics = "report.first_purchasing_cost  + report.first_logistics_head_course";
                        }
                        $fields_tmp = "CASE WHEN report.goods_operation_pattern = 2 THEN (report.report_channel_profit + report.bychannel_channel_profit + $purchasing_logistics) ELSE ((report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost) + $purchasing_logistics {$estimated_monthly_storage_fee_field} ) END {$repair_data}";

                    } else {
                        if ($datas['cost_count_type'] == '1') {
                            $purchasing_logistics = "report.report_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.report_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))";
                        } else {
                            $purchasing_logistics = "report.first_purchasing_cost * ({:RATE} / COALESCE(rates.rate ,1)) + report.first_logistics_head_course * ({:RATE} / COALESCE(rates.rate ,1))";

                        }
                        $fields_tmp = "CASE WHEN report.goods_operation_pattern = 2 THEN (report.report_channel_profit * ({:RATE} / COALESCE(rates.rate ,1)) + report.bychannel_channel_profit * ({:RATE} / COALESCE(rates.rate ,1))  + $purchasing_logistics) ELSE ( ((report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost){$estimated_monthly_storage_fee_field}) * ({:RATE} / COALESCE(rates.rate ,1)) + $purchasing_logistics) END + ( 0 {$repair_data}) * ({:RATE} / COALESCE(rates.rate ,1)) ";

                    }
                    $fields['count_total'] = "SUM( $fields_tmp )";
                    $time_fields = $this->getTimeFields($time_line, "( $fields_tmp )");
                }

            } else if ($time_target == 'cost_profit_profit_rate') {  //毛利率
                $repair_data = $this->tax_field.$this->operate_profit;
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['sale_datas_origin'] == '2') {
                        $repair_data .= " + report.report_sales_quota - report.byorder_sales_quota  ";
                    }
                    if ($datas['refund_datas_origin'] == '2') {
                        $repair_data .= " + report.byorder_refund - report.report_refund ";
                    }
                } else {
                    if ($datas['sale_datas_origin'] == '1') {
                        $repair_data .= " + report.byorder_sales_quota - report.report_sales_quota  ";
                    }
                    if ($datas['refund_datas_origin'] == '1') {
                        $repair_data .= " + report.report_refund - report.byorder_refund ";
                    }
                }
                $estimated_monthly_storage_fee_field = "";
                if ($datas['is_month_table'] == 1){
                    $estimated_monthly_storage_fee_field = " - report.report_estimated_monthly_storage_fee + report.monthly_sku_estimated_monthly_storage_fee";
                }
                if ($datas['sale_datas_origin'] == 1) {
                    $fields_denominator = '(report.byorder_sales_quota* ({:RATE} / COALESCE(rates.rate ,1)))';
                } else {
                    $fields_denominator = '(report.report_sales_quota* ({:RATE} / COALESCE(rates.rate ,1)))';
                }
                if ($datas['finance_datas_origin'] == '1') {
                    if ($datas['cost_count_type'] == '1') {
                        $purchasing_logistics = "report.byorder_purchasing_cost + report.byorder_logistics_head_course ";
                    } else {
                        $purchasing_logistics = "report.first_purchasing_cost  + report.first_logistics_head_course ";
                    }
                    $fields_tmp = "(CASE WHEN report.goods_operation_pattern = 2 THEN (COALESCE(report.byorder_channel_profit,0) + COALESCE(report.bychannel_channel_profit,0) + {$purchasing_logistics}) ELSE (report.byorder_goods_profit+ {$purchasing_logistics})  END $repair_data) * ({:RATE} / COALESCE(rates.rate ,1)) ";
                    $fields['count_total'] = "(SUM($fields_tmp) * 1.0000 / nullif(sum($fields_denominator),0))";
                    $time_fields = $this->getTimeFields($time_line, $fields_tmp, $fields_denominator);
                } elseif ($datas['finance_datas_origin'] == '2') {
                    if ($datas['cost_count_type'] == '1') {
                        $purchasing_logistics = "report.report_purchasing_cost + report.report_logistics_head_course ";
                    } else {
                        $purchasing_logistics = "report.first_purchasing_cost  + report.first_logistics_head_course ";
                    }
                    $fields_tmp = "(CASE WHEN report.goods_operation_pattern = 2 THEN (COALESCE(report.report_channel_profit,0) + COALESCE(report.bychannel_channel_profit,0) + {$purchasing_logistics}) ELSE ((report.report_goods_profit-report.report_cpc_cost-report.report_cpc_sd_cost+report.byorder_cpc_cost+report.byorder_cpc_sd_cost)+ {$purchasing_logistics} {$estimated_monthly_storage_fee_field})  END $repair_data) * ({:RATE} / COALESCE(rates.rate ,1)) ";
                    $fields['count_total'] = "(SUM($fields_tmp) * 1.0000 / nullif(sum($fields_denominator),0))";
                    $time_fields = $this->getTimeFields($time_line, $fields_tmp, $fields_denominator);
                }

            }else if ($time_target == 'sales_evaluation_nums') {  //测评销量
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorderitem_evaluation_nums' : 'reportitem_evaluation_nums';
                $fields['count_total'] = "SUM( report.{$tmp_field} )";
                $time_fields = $this->getTimeFields($time_line, $tmp_field);
            }else if ($time_target == 'fba_sales_refund') {  //FBA退款金额
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorderitem_reserved_field12' : 'reportitem_reserved_field12';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.{$tmp_field})";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field}");
                } else {
                    $fields['count_total'] = "SUM(report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)))";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1))");
                }
            }else if ($time_target == 'fbm_sales_refund') {  //FBM退款金额
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorderitem_reserved_field13' : 'reportitem_reserved_field13';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.{$tmp_field})";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field}");
                } else {
                    $fields['count_total'] = "SUM(report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1)))";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field} * ({:RATE} / COALESCE(rates.rate ,1))");
                }
            }else if ($time_target == 'amazon_fba_lost_num') {  //仓库丢失赔偿数量
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_lost_num' : 'report_lost_num';
                $fields['count_total'] = "SUM( report.{$tmp_field} )";
                $time_fields = $this->getTimeFields($time_line, $tmp_field);
            }else if ($time_target == 'amazon_fba_damage_num') {  //仓库损坏赔偿数量
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_damage_num' : 'report_damage_num';
                $fields['count_total'] = "SUM( report.{$tmp_field} )";
                $time_fields = $this->getTimeFields($time_line, $tmp_field);
            }elseif ($time_target == 'repayment_transfer_fail') {  //转账失败
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'SUM(report.bychannel_reserved_field47)';
                    $time_fields = $this->getTimeFields($time_line, 'report.bychannel_reserved_field47');
                } else {
                    $fields['count_total'] = 'SUM(report.bychannel_reserved_field47  * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    $time_fields = $this->getTimeFields($time_line, 'report.bychannel_reserved_field47  * ({:RATE} / COALESCE(rates.rate ,1))');
                }
            }elseif ($time_target == 'repayment_transfer_success') {  //转账成功
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'SUM(report.bychannel_reserved_field46)';
                    $time_fields = $this->getTimeFields($time_line, 'report.bychannel_reserved_field46');
                } else {
                    $fields['count_total'] = 'SUM(report.bychannel_reserved_field46  * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    $time_fields = $this->getTimeFields($time_line, 'report.bychannel_reserved_field46  * ({:RATE} / COALESCE(rates.rate ,1))');
                }
            }elseif ($time_target == 'repayment_count_settled') {  //已结总计
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'SUM(report.bychannel_reserved_field48)';
                    $time_fields = $this->getTimeFields($time_line, 'report.bychannel_reserved_field48');
                } else {
                    $fields['count_total'] = 'SUM(report.bychannel_reserved_field48  * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    $time_fields = $this->getTimeFields($time_line, 'report.bychannel_reserved_field48  * ({:RATE} / COALESCE(rates.rate ,1))');
                }
            }elseif($time_target == 'cpc_sd_cost'){
                //SD花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'SUM(report.byorder_cpc_sd_cost)';
                    $time_fields = $this->getTimeFields($time_line, 'report.byorder_cpc_sd_cost');
                } else {
                    $fields['count_total'] = 'SUM(report.byorder_cpc_sd_cost  * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    $time_fields = $this->getTimeFields($time_line, 'report.byorder_cpc_sd_cost  * ({:RATE} / COALESCE(rates.rate ,1))');
                }
            }elseif($time_target == 'cpc_sp_cost'){
                //SP花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'SUM(report.byorder_cpc_cost)';
                    $time_fields = $this->getTimeFields($time_line, 'report.byorder_cpc_cost');
                } else {
                    $fields['count_total'] = 'SUM(report.byorder_cpc_cost  * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    $time_fields = $this->getTimeFields($time_line, 'report.byorder_cpc_cost  * ({:RATE} / COALESCE(rates.rate ,1))');
                }
            }elseif ($time_target == 'cpc_sb_cost') {  //sb花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'SUM(0 - report.bychannel_cpc_sb_cost)';
                    $time_fields = $this->getTimeFields($time_line, '(0 - report.bychannel_cpc_sb_cost)');
                } else {
                    $fields['count_total'] = 'SUM((0 - report.bychannel_cpc_sb_cost)  * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    $time_fields = $this->getTimeFields($time_line, '(0 - report.bychannel_cpc_sb_cost)  * ({:RATE} / COALESCE(rates.rate ,1))');
                }
            }elseif ($time_target == 'cpc_sbv_cost') {  //sbv花费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'SUM(0 - report.bychannel_cpc_sbv_cost)';
                    $time_fields = $this->getTimeFields($time_line, '(0 - report.bychannel_cpc_sbv_cost)');
                } else {
                    $fields['count_total'] = 'SUM((0 - report.bychannel_cpc_sbv_cost)  * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    $time_fields = $this->getTimeFields($time_line, '(0 - report.bychannel_cpc_sbv_cost)  * ({:RATE} / COALESCE(rates.rate ,1))');
                }
            }elseif ($time_target == 'amazon_fba_overage_fee') {  //库存仓储超量费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'SUM(report.bychannel_fba_overage_fee)';
                    $time_fields = $this->getTimeFields($time_line, 'report.bychannel_fba_overage_fee');
                } else {
                    $fields['count_total'] = 'SUM(report.bychannel_fba_overage_fee  * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    $time_fields = $this->getTimeFields($time_line, 'report.bychannel_fba_overage_fee  * ({:RATE} / COALESCE(rates.rate ,1))');
                }
            }elseif ($time_target == 'amazon_fba_disposal_fee') {  //FBA弃置费
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = 'SUM(report.bychannel_fba_disposal_fee)';
                    $time_fields = $this->getTimeFields($time_line, 'report.bychannel_fba_disposal_fee');
                } else {
                    $fields['count_total'] = 'SUM(report.bychannel_fba_disposal_fee  * ({:RATE} / COALESCE(rates.rate ,1)) )';
                    $time_fields = $this->getTimeFields($time_line, 'report.bychannel_fba_disposal_fee  * ({:RATE} / COALESCE(rates.rate ,1))');
                }
            }elseif ($time_target == 'amazon_market_vat_principal') {  //MarketplaceFacilitatorVAT-Principal
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_cpc_sb_sales_quota' : 'report_cpc_sb_sales_quota';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.{$tmp_field})";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field}");
                } else {
                    $fields['count_total'] = "SUM(report.{$tmp_field}  * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field}  * ({:RATE} / COALESCE(rates.rate ,1))");
                }
            }elseif ($time_target == 'amazon_market_vat_shipping') {  //MarketplaceFacilitatorVAT-Shipping
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_cpc_sb_cost' : 'report_cpc_sb_cost';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.{$tmp_field})";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field}");
                } else {
                    $fields['count_total'] = "SUM(report.{$tmp_field}  * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field}  * ({:RATE} / COALESCE(rates.rate ,1))");
                }
            }elseif ($time_target == 'amazon_market_vat_principal_refund') {  //MarketplaceFacilitatorVAT-Principal-refund
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_refund_rate' : 'report_refund_rate';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.{$tmp_field})";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field}");
                } else {
                    $fields['count_total'] = "SUM(report.{$tmp_field}  * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field}  * ({:RATE} / COALESCE(rates.rate ,1))");
                }
            }elseif ($time_target == 'amazon_market_vat_shipping_refund') {  //MarketplaceFacilitatorVAT-Shipping-refund
                $tmp_field = $datas['finance_datas_origin'] == '1' ? 'byorder_profit_margin' : 'report_profit_margin';
                if ($datas['currency_code'] == 'ORIGIN') {
                    $fields['count_total'] = "SUM(report.{$tmp_field})";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field}");
                } else {
                    $fields['count_total'] = "SUM(report.{$tmp_field}  * ({:RATE} / COALESCE(rates.rate ,1)) )";
                    $time_fields = $this->getTimeFields($time_line, "report.{$tmp_field}  * ({:RATE} / COALESCE(rates.rate ,1))");
                }
            } elseif ($custom_target && $custom_target['target_type'] == 1) {
                $tempField = "report.monthly_sku_" . $custom_target['month_goods_field'];
                //新增指标
                if ($datas['currency_code'] != 'ORIGIN' && $custom_target['format_type'] == 4) {
                    $fields['count_total'] = "sum({$tempField} / COALESCE(rates.rate, 1) * {:RATE})";
                    $time_fields = $this->getTimeFields($time_line, "{$tempField} * ({:RATE} / COALESCE(rates.rate ,1))");
                } else {
                    $fields['count_total'] = "SUM({$tempField})";
                    $time_fields = $this->getTimeFields($time_line, $tempField);
                }

            } elseif (in_array($time_target, $keys)) {
                $tempField = "report.monthly_sku_" . $new_target_keys[$time_target]['month_goods_field'];
                //新增指标
                if ($datas['currency_code'] != 'ORIGIN' && $new_target_keys[$time_target]['format_type'] == 4) {
                    $fields['count_total'] = "sum({$tempField} / COALESCE(rates.rate, 1) * {:RATE})";
                    $time_fields = $this->getTimeFields($time_line, "{$tempField} * ({:RATE} / COALESCE(rates.rate ,1))");
                } else {
                    $fields['count_total'] = "SUM({$tempField})";
                    $time_fields = $this->getTimeFields($time_line, $tempField);
                }
            } else {
                $datas['time_target'] = $time_target;
                $fields_tmp = $this->getTimeField($datas, $time_line, 3);
                $fields['count_total'] = $fields_tmp['count_total'];
                $time_fields = $fields_tmp['time_fields'];

            }

            $fields[$time_target] = $fields['count_total'];
            $time_fields_arr[$time_target] = $time_fields;
        }
        if($custom_target && $custom_target['target_type'] == 2){
            $this->dealTimeTargets($fields,$custom_target,$time_line,$time_fields_arr,$target_key);
        }else {
            if (!empty($time_fields) && is_array($time_fields)) {
                foreach ($time_fields as $kt => $time_field) {
                    $fields[$kt] = $time_field;
                }
            }
        }
        //$fields = array_merge($fields, $time_fields);
        return ["fields" =>$fields,"operation_table_field" => $operation_table_field];
//        return $fields;
    }

    private function getCustomTargetFields(&$fields,$custom_targets_list,$targets = array(),$targets_temp = array(), $datas = [],&$fba_target_key = array(),&$operation_table_field = array(),$is_count = 0,$isMysql = false, &$erp_target_key = []){
        $fba_field_exits = [];
        $operational_char_arr = array(".","+", "-", "*", "/", "", "(", ")");
        if($custom_targets_list){
            if($datas['stock_datas_origin'] == 1){
                $fbaFieldsArr = !empty($datas['list_type']) && $datas['list_type'] == 1 ? config('common.goods_fba_fields_arr') : config('common.channel_fba_fields_arr');
                $erpIskuFieldsArr = config('common.erp_isku_fields_arr');
                $erpReportFieldsArr = config('common.erp_report_fields_arr');
            }
            foreach ($custom_targets_list as $item){
                if ($item['target_type'] == 1)
                {
                    //指标
                    if (in_array($item['count_dimension'], [1, 2]))
                    {
                        if ($datas['currency_code'] != 'ORIGIN' && $item['format_type'] == 4){
                            $fields[$item['target_key']] = 'SUM(report.monthly_sku_'.$item['month_goods_field'].' / COALESCE(rates.rate, 1) * {:RATE})';
                        }else{
                            $fields[$item['target_key']] = 'SUM(report.monthly_sku_'.$item['month_goods_field'].')';
                        }
                        $operation_table_field['goods_key'][] = 'monthly_sku_'.$item['month_goods_field'];
                    }
                    elseif($item['count_dimension'] == 3)
                    {
                        if ($datas['currency_code'] != 'ORIGIN' && $item['format_type'] == 4){
                            $fields[$item['target_key']] = 'SUM(monthly_profit.'.$item['month_channel_field'].' / COALESCE(rates.rate, 1) * {:RATE})';
                        }else{
                            $fields[$item['target_key']] = 'SUM(monthly_profit.'.$item['month_channel_field'].')';
                        }
                    }
                }
            }
            foreach ($custom_targets_list as $item){
                if ($item['target_type'] == 2)
                {
                    $formula_json_arr = $item['formula_json'] ? json_decode($item['formula_json'],true) : [];
                    $formula_fields_arr = $item['formula_fields'] ? explode(",",$item['formula_fields']) : [];
                    //自定义算法
                    $count = 0;
                    if(in_array($item['target_key'],$targets)){
                        $str = $item['formula'] ;
                        $str = str_replace('/(', ' * 1.0000 /(', $str);//指标数据数据类型为整数
                        foreach ($formula_json_arr as $k => $f_key) {
                            if(!in_array($f_key,$operational_char_arr)) {
                                if (!is_numeric($f_key)) {
                                    $str = str_replace('/{' . $f_key . '}', ' * 1.0000 /NULLIF({' . $f_key . '},0)', $str);//分母为0的处理
                                }
                            }
                        }
                        foreach ($formula_fields_arr as $field) {
                            if($datas['stock_datas_origin'] == 1){ //新FBA 数据源-presto
                                if(!empty($fbaFieldsArr[$field])){
                                    $count++;
                                }
                                if (isset($erpIskuFieldsArr[$field]) || isset($erpReportFieldsArr[$field])){
                                    $erp_target_key[] = $item['target_key'];
                                }
                            }else{
                                if(in_array($field,$this->fba_fields_arr)){ //FBA数据源是Mysql
                                    $count++;
                                }
                            }
                            if(!empty($fields[$field])){
                                $str = str_replace('{'.$field.'}' , "{$fields[$field]} * 1.0000" , $str);
                            }else{
                                $str = 'NULL';
                            }
                        }
                        if($count){
                            $fba_field_exits = array_merge($fba_field_exits,$formula_fields_arr);
                            $fba_target_key[] = $item['target_key'];
                            $str = $is_count ? "1" : "'{$item['formula']}'";

                        }
                        if($datas['stock_datas_origin'] != 1 || empty($count)){
                            $fields[$item['target_key']] = $isMysql ? $str : "try(" . $str . ")";
                        }
                    }
                }
            }
        }

        $fba_field_exits = $fba_field_exits ? array_unique($fba_field_exits) : [];
        $erp_target_key = array_unique($erp_target_key);

        //unset没选的字段，有erp指标时不去掉
        if (!($this->haveErpIskuFields || $this->haveErpReportFields)){
            $where_detail = is_array($datas['where_detail']) ? $datas['where_detail'] : json_decode($datas['where_detail'], true);
            if(!(!empty($where_detail['target']) && $datas['is_count'] == 1)){
                if($targets){
                    foreach ($targets as $k => $v){
                        if(!in_array($v,$targets_temp) && !in_array($v,$fba_field_exits)){
                            unset($fields[$v]);
                        }
                    }
                }
            }
        }
    }

    private function addNewTargets($datas_ark_custom_target_md,$user_id,$custom_targets_list = array()){
        //自定义公式里包含新增指标
        $formula_fields = "";
        if($custom_targets_list){
            $target_template = 0;
            foreach ($custom_targets_list as $item){
                if($item['format_type'] == 3){
                    $this->rate_formula[$item['target_key']] = [
                        'formula' => $item['formula'],
                        'formula_json' => $item['formula_json'],
                        'formula_fields' => !empty($item['formula_fields']) ? explode(',',$item['formula_fields']) : [],
                    ];
                }
                if($item['formula_fields']){
                    $formula_fields .= $item['formula_fields'] . ",";
                }
                $target_template = $item['target_template'];
            }
            $formula_fields = trim($formula_fields,",");
            $formula_target = "'" . implode("','",array_values(array_unique(explode(",",$formula_fields)))) . "'";
            $formula_targets_list = $datas_ark_custom_target_md->getList("user_id = {$user_id} AND target_type = 1 AND count_dimension IN (1,2,3) AND target_key IN ({$formula_target}) AND target_template = {$target_template}");
            $custom_targets_list = array_merge($custom_targets_list,$formula_targets_list);
        }
        return $custom_targets_list;
    }

    private function addCustomTargets($targets = array(),$custom_targets_list = array()){
        if($custom_targets_list){
            foreach ($custom_targets_list as $item){
                if ($item['target_type'] == 2){
                    $custom_targets = explode(',', $item['formula_fields']);
                    $targets = array_merge($targets,$custom_targets);
                }elseif ($item['target_type'] == 1){
                    if ($item['count_dimension'] == 3){
                        $this->countDimensionChannel = true;
                        $this->is_channge_mysql = true;
                    }
                }
            }
        }
        $targets = array_values(array_unique($targets));
        return $targets;
    }

    /**
     * 获取自定义公式和新增指标列表
     * @param $datas
     * @param $list_type 1商品维度 2店铺维度 3运营人员维度
     */
    protected function getCustomTargetList($datas, $list_type = 1){
        $customTargetModel = new DatasArkCustomTargetMySQLModel([], $this->dbhost, $this->codeno);
        $targetTemplate = $datas['is_new_index'] == 1 ? 1 : 0;

        if ($list_type == 1){
            $countDimension = "count_dimension IN (1,2)";
        }elseif ($list_type == 2){
            $countDimension = "count_dimension IN (1,3)";
        }else{
            $countDimension = "count_dimension = 1";
        }

        if ($datas['show_type'] == 2){
            $targetKeys = "'" . implode("','", explode(",", trim($datas['target']))) . "'";

            $originTargetsList = $customTargetModel->getList("user_id = {$datas['user_id']} AND target_type in(1, 2) AND {$countDimension} AND target_key IN ({$targetKeys}) AND target_template = {$targetTemplate}");
            //自定义公式里包含新增指标
            $this->customTargetsList = $this->addNewTargets($customTargetModel, $datas['user_id'], $originTargetsList);
        }else{
            $customTarget = $customTargetModel->get_one("user_id = {$datas['user_id']} AND target_type IN(1, 2) AND {$countDimension} AND target_key = '{$datas['time_target']}' AND target_template = {$targetTemplate}");
            $this->timeCustomTarget = $customTarget;
            if ($customTarget && $customTarget['target_type'] == 1 && $customTarget['count_dimension'] == 3){
                $this->countDimensionChannel = true;
            }
        }
    }

    /**
     * 获取最终的指标 targets
     * @param $datas
     * @param int $list_type 1商品维度 2店铺维度 3运营人员维度
     */
    protected function handleTargets($datas, $list_type = 1){
        $this->getCustomTargetList($datas, $list_type);

        if ($datas['show_type'] == 2){

            $targets = explode(',', $datas['target']);
            $targetsLast = $this->addCustomTargets($targets, $this->customTargetsList);

        }else{
            if($this->timeCustomTarget && $this->timeCustomTarget['target_type'] == 2){
                $targetsLast = explode(",", $this->timeCustomTarget['formula_fields']);
            }else{
                $targetsLast = [$datas['time_target']];
            }
        }

        if ($targetsLast){
            $iskuFieldsArr = array_keys(config('common.erp_isku_fields_arr'));
            $reportFieldsArr = array_keys(config('common.erp_report_fields_arr'));
            $fbaFieldsArr = $list_type == 1 ? array_keys(config('common.goods_fba_fields_arr')) : array_keys(config('common.channel_fba_fields_arr'));
            $rateKeys = array_keys($this->rate_formula);
            $rateFields = [];
            foreach ($targetsLast as $target){
                if (in_array($target, $iskuFieldsArr) && $datas['stock_datas_origin'] == 1){
                    $this->haveErpIskuFields = true;
                }
                if (in_array($target, $reportFieldsArr) && $datas['stock_datas_origin'] == 1){
                    $this->haveErpReportFields = true;
                }
                if (in_array($target, $fbaFieldsArr) && $datas['stock_datas_origin'] == 1){
                    $this->haveFbaFields = true;
                }
            }
            if ($this->haveErpIskuFields || $this->haveErpReportFields){
                foreach ($targetsLast as $target){
                    if (in_array($target, $rateKeys)){
                        $rateFields = array_merge($rateFields, $this->rate_formula[$target]['formula_fields']);
                    }
                }
                $targetsLast = array_unique(array_merge($targetsLast, $rateFields));
            }
            $this->lastTargets = $targetsLast;
        }
    }

    private function dealTimeTargets(&$fields,$custom_target,$time_line = array(),$time_fields_arr = array(),$target_key = "",$isMysql = false){
        $str = $custom_target['formula'] ;
        $str = str_replace('/(', ' * 1.0000 /(', $str);//指标数据数据类型为整数
        $time_targets = $custom_target['formula_json'] ? json_decode($custom_target['formula_json'],true) : [] ;
        $formula_fields_arr = $custom_target['formula_fields'] ? explode(",",$custom_target['formula_fields']) : [];
        $operational_char_arr = array(".","+", "-", "*", "/", "", "(", ")");
        foreach ($time_targets as $k => $f_key) {
            if(!in_array($f_key,$operational_char_arr)){
                if(!is_numeric($f_key)){
                    $str = str_replace('/{' . $f_key . '}', ' * 1.0000 /NULLIF({' . $f_key . '},0)', $str);//分母为0的处理
                }
            }
        }
        foreach ($formula_fields_arr as $field) {
            if(!empty($fields[$field])){
                $str = str_replace('{'.$field.'}' , $fields[$field] , $str);
            }else{
                $str = 'NULL';
            }
        }
        $fields['count_total'] =  $isMysql ? $str : "try(" . $str . ")";
        $fields[$target_key] =  $isMysql ? $str : "try(" . $str . ")";

        $time_list = array_column($time_line, "key");
        foreach ($time_list as $date) {
            $str = $custom_target['formula'] ;
            foreach ($time_targets as $k => $f_key) {
                if(!in_array($f_key,$operational_char_arr)){
                    if(!is_numeric($f_key)){
                        $str = str_replace('/{' . $f_key . '}', ' * 1.0000 /NULLIF({' . $f_key . '},0)', $str);//分母为0的处理
                    }
                }
            }
            foreach ($formula_fields_arr as $field) {
                if(!empty($time_fields_arr[$field][$date])){
                    $str = str_replace('{'.$field.'}' , $time_fields_arr[$field][$date] , $str);
                }else{
                    $str = 'NULL';
                }
            }
            $fields[strval($date)] = $isMysql ? $str : "try(" . $str . ")";
        }
        //unset没选的字段
        if($time_targets){
            foreach ($time_targets as $target){
                unset($fields[$target]);
            }
        }
    }

    public function getYnWhere($max_ym = '' , $min_ym = ''){
        $ym_array = $this->calculateYn($max_ym, $min_ym);
        if(empty($ym_array)){
            return ' 1=1 ' ;
        }else{
            $ym_str = "'".implode("','" , $ym_array)."'" ;
            if(count($ym_array) == 1){
                $ym_where = "report.ym = " . $ym_str ;
            }else{
                $ym_where =  "report.ym IN (" . $ym_str . " )" ;
            }
            return $ym_where ;
        }

    }

    public function calculateYn($max_ym, $min_ym){
        $ym_array = array() ;
        if(!empty($max_ym) && !empty($min_ym)){
            while($max_ym != $min_ym){
                $year = intval(substr($min_ym ,0 ,4)) ;
                $month = intval(substr($min_ym ,4 ,2));
                $ym_array[] = $year.$month ;
                if($month == 12){
                    $year = $year + 1 ;
                    $month = '01' ;
                }else{
                    $month = $month + 1 ;
                    if($month <10){
                        $month = '0'.$month ;
                    }else{
                        $month = "{$month}" ;
                    }
                }
                $min_ym = $year.$month ;
            }
            $year = intval(substr($max_ym ,0 ,4)) ;
            $month = intval(substr($max_ym ,4 ,2));
            $ym_array[] = $year.$month ;
        }
        return $ym_array;
    }

    public function count_custom_formula($formula = '' , $data = array()){
        try{
            $str = $formula ;
            foreach ($data as $key => $value) {
                $str = str_replace('{'.$key.'}' , " " . $value . " ", $str);
            }
            $str = preg_replace('/{[a-z,A-Z,0-9,-,_]*}/',0,$str);
            $rt = eval("return $str;");
            if(is_nan($rt) || $rt === INF){
                $rt = null;
            }
        }catch (\Throwable $e){
            $rt = null;
        }
        return $rt ;

    }

    private function queryList($fields,$datas,$exchangeCode,$day_param,$field_data,$table,$where,$group,$isJoin = false,$isMysql=false,$compare_data = [],$fba_data = []){
        $fields_tmp = [];
        $rate_formula_key = array_keys($this->rate_formula);
        $operational_char_arr = array(".","+", "-", "*", "/", "", "(", ")");
        foreach ($fields as $key => $value){
            $key_value = $key;
            if($key == "group"){
                $key = $isMysql ? '`group`' : '"group"';
                $key_value = $isMysql ? '`group`' : $key_value;
            }
            if(in_array($key,$rate_formula_key)){
                $str = $this->rate_formula[$key]['formula'] ;
                $formula_json_arr = json_decode($this->rate_formula[$key]['formula_json'],true) ;
                $str = str_replace('/(', ' * 1.0000 /(', $str);//指标数据数据类型为整数
                foreach ($formula_json_arr as $k => $f_key) {
                    if(!in_array($f_key,$operational_char_arr)) {
                        if (!is_numeric($f_key)) {
                            if($datas['count_dimension'] == 'operators'){
                                $str = str_replace('{cpc_cost}','SUM(report_tmp.cpc_ad_fee) ', $str);//分母为0的处理
                            }
                            $str = str_replace('/{total_views_number}', ' * 1.0000 /NULLIF(' . $this->total_views_numbers['total_views_number'] . ',0)', $str);//分母为0的处理
                            $str = str_replace('/{total_user_sessions}', ' * 1.0000 /NULLIF(' . $this->total_user_sessions['total_user_sessions'] . ',0)', $str);//分母为0的处理
                            $str = str_replace('/{' . $f_key . '}', ' * 1.0000 /NULLIF(SUM(report_tmp.' . $f_key . '),0)', $str);//分母为0的处理
                            $str = str_replace('{' . $f_key . '}', 'SUM(report_tmp.' . $f_key . ') ', $str);//分母为0的处理
                        }
                    }
                }
                $fields_tmp[] = $isMysql ? $str . ' AS "' . $key_value . '"' : "try(" . $str . ")" . ' AS "' . $key_value . '"';
            }else{
                if(stripos($value,"min(") !== false){
                    $fields_tmp[] = "min(report_tmp.{$key}) " . ' AS "' . $key_value . '"';
                }elseif (stripos($value,"max(") !== false || stripos($value,"array_join(") !== false){
                    $fields_tmp[] = "max(report_tmp.{$key}) " . ' AS "' . $key_value . '"';
                }elseif (stripos($value,"count(") !== false){
                    $fields_tmp[] = "max(report_tmp.{$key}) " . ' AS "' . $key_value . '"';
                }elseif($value == 'NULL'){
                    $fields_tmp[] = "NULL" . ' AS "' . $key_value . '"';
                }else{
                    $fields_tmp[] = "SUM(report_tmp.{$key}) " . ' AS "' . $key_value . '"';
                }
            }
        }
        $field_data_tmp = str_replace("{:RATE}", $exchangeCode, implode(',', $fields_tmp));
        $field_data_tmp = str_replace("{:DAY}", $day_param, $field_data_tmp);

        if(!empty($compare_data) || !empty($fba_data)){
            if(!empty($compare_data)){
                $newTables = array() ;
                $newTables[] = "origin_table AS (  SELECT {$field_data_tmp} FROM (SELECT {$field_data} FROM {$table} WHERE {$where} GROUP BY {$group}) AS report_tmp ) " ;
                $rt_field = 'origin_table.* ' ;
                foreach($compare_data as $c1=>$cdata1){
                    $k1 = $c1+1 ;
                    $rt_field.= " , compare_table{$k1}.* " ;
                }
                $rt_sql = "SELECT {$rt_field} FROM origin_table " ;
                $rt_where = '' ;
                foreach($compare_data as $c=>$cdata){
                    $k = $c+1 ;
                    $newTables[] = " compare_table{$k} AS ( SELECT {$cdata['field_data']}   FROM  {$table} WHERE {$cdata['compare_where']} {$group} ) "  ;
                    $rt_sql.=  ( empty($cdata['join_type']) ? 'LEFT JOIN ' : $cdata['join_type']  ) . " compare_table{$k} ON {$cdata['on']} " ;
                    if(!empty($cdata['where'])){
                        $rt_where .= empty($rt_where) ? $cdata['where'] : (' AND ' . $cdata['where'] ) ;
                    }
                }
                if(!empty($rt_where)){
                    $rt_sql .= " WHERE " . $rt_where ;
                }
                $sql = 'WITH 
                ' . implode(',
                ' , $newTables) . "
                " .$rt_sql ;
            }else{
                $newTables = array() ;
                $newTables[] = "new_origin_table AS (  SELECT {$field_data_tmp} FROM (SELECT {$field_data} FROM {$table} WHERE {$where} GROUP BY {$group}) AS report_tmp ) " ;

                if(empty($fba_data['fba_fields'])){
                    $rt_field = 'new_origin_table.*,fba_table.*' ;
                }else{
                    $rt_field = 'new_origin_table.*,'. $fba_data['fba_fields'];
                }
                if(!empty($fba_data['other_field'])){
                    $rt_field.=" , " . $fba_data['other_field'] ;
                }
                $rt_sql = "SELECT {$rt_field} FROM new_origin_table " ;
                $rt_join = !empty($fba_data['join']) ? $fba_data['join'] : "" ;
                $rt_where = !empty($fba_data['where']) ? $fba_data['where'] : "" ;
                $count_table_group = empty($fba_data['group']) ? '' : " GROUP BY {$fba_data['group']}";

                if(!empty($fba_data['child_table'])){
                    foreach($fba_data['child_table'] as $c=>$cdata){
                        if(!empty($fba_data['is_count']) && $c == '0'){
                            if($fba_data['dimension'] == 'channel'){
                                $newTables[] = "{$cdata['table_name']}  AS (select fabTmp.* from (SELECT report.channel_id  FROM {$table} WHERE {$where} group by {$group} ) AS FBAOriginTabel LEFT JOIN ({$cdata['table_sql']} ) AS fabTmp ON fabTmp.channel_id = FBAOriginTabel.channel_id AND fabTmp.channel_id is NOT NULL )  " ;
                            }elseif($fba_data['dimension'] == 'sku'){
                                $newTables[] = " {$cdata['table_name']} AS ( {$cdata['table_sql']} ) "  ;
                                $newTables[] = "count_table AS (SELECT max(report.user_id) AS user_id,max(amazon_goods.goods_sku) AS sku,max(report.channel_id) AS channel_id,max(report.amazon_goods_id) AS goods_id FROM {$table} WHERE {$where} {$count_table_group})";
                            }else{
                                $newTables[] = " {$cdata['table_name']} AS ( {$cdata['table_sql']} ) "  ;
                            }
                        }else{
                            $newTables[] = " {$cdata['table_name']} AS ( {$cdata['table_sql']} ) "  ;
                        }
                    }
                }
                if(!empty($rt_join)){
                    $rt_sql .= " LEFT JOIN fba_table ON " . $rt_join ;
                }
                if(!empty($rt_where)){
                    $rt_sql .= " WHERE " . $rt_where ;
                }
                $sql = 'WITH 
                ' . implode(',
                ' , $newTables) . "
                " .$rt_sql ;
            }

        }else{
            $sql = "SELECT {$field_data_tmp} FROM (SELECT {$field_data} FROM {$table} WHERE {$where} GROUP BY {$group}) AS report_tmp";
        }

        //商品维度
        if($isJoin){
            foreach ($this->goodsCols as $key => $value){
                if (!is_array($value)) {
                    $sql = str_replace('report.' . $key, 'amazon_goods.' . $value, $sql);
                    $sql = str_replace('report."' . $key.'"', 'amazon_goods.' . $value, $sql);

                } else {
                    if (strpos($table, '_day_report_') && !strpos($table,'week_report' ) ) {
                        $sql = str_replace('report.' . $key, 'amazon_goods.' . $value['day'], $sql);
                    } elseif (strpos($table,'week_report' )) {
                        $sql = str_replace('report.' . $key, 'amazon_goods.' . $value['week'], $sql);
                    } elseif (strpos($table,'_month_report_')) {
                        $sql = str_replace('report.' . $key, 'amazon_goods.' . $value['month'], $sql);
                    }
                }
            }
            if (strpos($table,'week_report' )){
                $sql = str_replace('week_report' , 'report' , $sql);

            }
        }

        $lists = $this->query($sql, [], null, 300, $isMysql,$this->isUseTmpTable,$this->isReadTmpTable);
        return $lists;
    }

    public function getUnGoodsChannelMothGoalData($lists = [], $datas = [], $channel_arr = [],$currencyInfo = [], $exchangeCode = '1'){
        if (empty($lists)){
            return $lists;
        }

        if (empty($channel_arr)){
            foreach ($lists as $val){
                if ($val['channel_id']){
                    $channel_arr[] = $val['channel_id'];
                }
            }
        }

        $userInfo = getUserInfo();
        $templateType = $userInfo['template_type']; //0旧版 1新版
        $goalList = [];
        if(!empty($channel_arr)){
            $nowYear = date("Y");
            $beforeYear = $nowYear - 1;
            $afterYear = $nowYear + 1;

            $channelTargetsModel = new ChannelTargetsMySQLModel([], $this->dbhost, $this->codeno);;

            if ($templateType){
                $where = "channel_id IN(".implode(',', $channel_arr).") AND user_id = {$datas['user_id']} AND year IN({$nowYear},{$beforeYear},{$afterYear}) AND type = 2" ;
            }else{
                $where = "channel_id IN(".implode(',', $channel_arr).") AND user_id = {$datas['user_id']} AND year IN({$nowYear},{$beforeYear},{$afterYear}) AND type = 1" ;
            }
            $goalList = $channelTargetsModel->select($where);
        }

        $mapGoal = [];
        $mapRate = [];
        if ($goalList){
            $siteId = [];

            if ($templateType){
                foreach ($goalList as $val){
                    $siteId[] = $val['site_id'];
                    if (!empty($val['new_target'])){
                        $tempNewTarget = json_decode($val['new_target'], true);
                        foreach ($tempNewTarget['target'] as $v){
                            $mapGoal[$val['channel_id']][$val['year']]["month{$v['date']}"] = $v['sale_money'];
                        }
                    }
                }
            }else{
                foreach ($goalList as $val){
                    $mapGoal[$val['channel_id']][$val['year']] = $val;
                    $siteId[] = $val['site_id'];
                }
            }

            if ($datas['currency_code'] != 'ORIGIN') {
                $rateModel = new SiteRateMySQLModel([], $this->dbhost, $this->codeno);;
                if ($currencyInfo['currency_type'] == '1' || empty($currencyInfo)) {
                    $rateList = $rateModel->select("site_id IN(".implode(',', array_unique($siteId)).") AND user_id = 0");
                } else {
                    $rateList = $rateModel->select("site_id IN(".implode(',', array_unique($siteId)).") AND user_id = {$datas['user_id']}");
                }

                foreach ($rateList as $val){
                    $mapRate[$val['site_id']] = $val['rate'];
                }
            }
        }

        if ($datas['count_periods'] == 3)
        {
            //按月
            foreach ($lists as $key => $val){
                $temTime = strtotime($val['time']);
                $tempYear = date("Y", $temTime);
                $tempMonth = date("n", $temTime);
                $tempRate = isset($mapRate[$val['site_id']]) ? $mapRate[$val['site_id']] : 1;

                if ($datas['currency_code'] != 'ORIGIN') {
                    $val['sale_channel_month_goal'] = isset($mapGoal[$val['channel_id']][$tempYear]) ? round($mapGoal[$val['channel_id']][$tempYear]["month{$tempMonth}"] / $tempRate * $exchangeCode, 2) : 0;
                }else{
                    $val['sale_channel_month_goal'] = isset($mapGoal[$val['channel_id']][$tempYear]) ? $mapGoal[$val['channel_id']][$tempYear]["month{$tempMonth}"] : 0;
                }
                $lists[$key] = $val;
            }
        }
        elseif ($datas['count_periods'] == 4)
        {
            //按季
            foreach ($lists as $key => $val){
                $explodeTime = explode('-', $val['time']) ;
                $tempYear = $explodeTime[0];
                $tempQua = $explodeTime[1];
                $tempRate = isset($mapRate[$val['site_id']]) ? $mapRate[$val['site_id']] : 1;

                if (isset($mapGoal[$val['channel_id']][$tempYear])){
                    $tempGaol = $mapGoal[$val['channel_id']][$tempYear];
                    if ($tempQua == 1){
                        if ($datas['currency_code'] != 'ORIGIN') {
                            $val['sale_channel_month_goal'] = round(($tempGaol['month1'] + $tempGaol['month2'] + $tempGaol['month3']) / $tempRate * $exchangeCode, 2);
                        }else{
                            $val['sale_channel_month_goal'] = $tempGaol['month1'] + $tempGaol['month2'] + $tempGaol['month3'];
                        }
                    }elseif ($tempQua == 2){
                        if ($datas['currency_code'] != 'ORIGIN') {
                            $val['sale_channel_month_goal'] = round(($tempGaol['month4'] + $tempGaol['month5'] + $tempGaol['month6']) / $tempRate * $exchangeCode, 2);
                        }else{
                            $val['sale_channel_month_goal'] = $tempGaol['month4'] + $tempGaol['month5'] + $tempGaol['month6'];
                        }
                    }elseif ($tempQua == 3){
                        if ($datas['currency_code'] != 'ORIGIN') {
                            $val['sale_channel_month_goal'] = round(($tempGaol['month7'] + $tempGaol['month8'] + $tempGaol['month9']) / $tempRate * $exchangeCode, 2);
                        }else{
                            $val['sale_channel_month_goal'] = $tempGaol['month7'] + $tempGaol['month8'] + $tempGaol['month9'];
                        }
                    }else{
                        if ($datas['currency_code'] != 'ORIGIN') {
                            $val['sale_channel_month_goal'] = round(($tempGaol['month10'] + $tempGaol['month11'] + $tempGaol['month12']) / $tempRate * $exchangeCode, 2);
                        }else{
                            $val['sale_channel_month_goal'] = $tempGaol['month10'] + $tempGaol['month11'] + $tempGaol['month12'];
                        }
                    }
                }else{
                    $val['sale_channel_month_goal'] = 0;
                }
                $lists[$key] = $val;
            }
        }
        elseif ($datas['count_periods'] == 5)
        {
            //按年
            foreach ($lists as $key => $val)
            {
                if (isset($mapGoal[$val['channel_id']][$val['time']])){
                    $tempGaol = $mapGoal[$val['channel_id']][$val['time']];
                    $tempSum = $tempGaol['month1'] + $tempGaol['month2'] + $tempGaol['month3'] + $tempGaol['month4'] + $tempGaol['month5'] + $tempGaol['month6'] + $tempGaol['month7'] + $tempGaol['month8'] + $tempGaol['month9'] + $tempGaol['month10'] + $tempGaol['month11'] + $tempGaol['month12'];
                    $tempRate = isset($mapRate[$val['site_id']]) ? $mapRate[$val['site_id']] : 1;

                    if ($datas['currency_code'] != 'ORIGIN') {
                        $val['sale_channel_month_goal'] = round($tempSum / $tempRate * $exchangeCode, 2);
                    }else{
                        $val['sale_channel_month_goal'] = $tempSum;
                    }
                }else{
                    $val['sale_channel_month_goal'] = 0;
                }
                $lists[$key] = $val;
            }
        }
        return $lists;
    }



    /**
     * 获取运营人员table
     * @author json.qiu 2021/05/31
     *
     * @param $datas
     * @param $ym_where  //ym条件
     * @param string $table_type //店铺类型，day,week,month
     * @return string  返回table
     */
    public function operationTable($datas,$ym_where,$table_type = "day",$operation_table_field = array()){
        if ($table_type == 'month'){
            $this->channel_user_id_mod = $this->dws_user_id_mod;
        }else{
            $this->channel_user_id_mod = intval($datas['user_id'] % 20);
        }
        if ($datas['is_new_index']){
            return $this->operationNewIndexTable($datas,$ym_where,$table_type,$operation_table_field);
        }
        $create_time_tmp = str_replace("site_id",'dw_report.byorder_site_id',$datas['origin_time']);
        $where_dw_report_amazon_goods = "dw_report.user_id = {$datas['user_id']} AND dw_report.user_id_mod = ".$this->dws_user_id_mod
            ." AND dw_report.channel_id IN (".$datas['operation_channel_ids'].") "
            ." AND amazon_goods.goods_user_id = {$datas['user_id']} AND amazon_goods.goods_user_id_mod = ".($datas['user_id'] % 20)." AND  amazon_goods.goods_operation_user_admin_id > 0  "." AND amazon_goods.goods_channel_id IN (".$datas['operation_channel_ids'].") ";
        $where_ym = " AND ".str_replace("report.",'dw_report.',$ym_where);
        $where_dw_report_month_amazon_goods = $where_dw_report_amazon_goods;
        $where_dw_report_amazon_goods .= " ".str_replace("create_time",'dw_report.create_time',$create_time_tmp);


        $where_channel = "dw_report.user_id = {$datas['user_id']} AND channel.operation_user_admin_id > 0 AND dw_report.user_id_mod = ".$this->channel_user_id_mod." AND dw_report.channel_id IN (".$datas['operation_channel_ids'].") ".str_replace("create_time",'dw_report.create_time',$datas['origin_time'])." AND ".str_replace("report.",'dw_report.',$ym_where);
        $goods_month_table = '';
        if ($table_type == 'week'){
            $goods_table = "{$this->table_dws_goods_day_report} AS dw_report
			Right JOIN {$this->table_goods_dim_report} AS amazon_goods ON dw_report.amazon_goods_id = amazon_goods.es_id";
            $channel_field = "max(channel.operation_user_admin_id) as operation_user_admin_id,channel_id,myear,mmonth,mweek,max(mweekyear) as mweekyear,
                        max(mquarter) as mquarter,
                        max(dw_report.site_id) as site_id,
                        max(dw_report.user_id) as user_id,
                        SUM( bychannel_sales_quota ) as bychannel_sales_quota ,
                       
SUM( bychannel_fba_sales_quota ) as bychannel_fba_sales_quota ,
SUM( bychannel_sales_volume ) as bychannel_sales_volume ,
SUM( bychannel_fba_sales_volume ) as bychannel_fba_sales_volume ,
SUM( bychannel_operating_fee ) as bychannel_operating_fee ,
SUM( bychannel_fba_per_unit_fulfillment_fee ) as bychannel_fba_per_unit_fulfillment_fee ,
SUM( bychannel_return_postage_billing_fuel_surcharge ) as bychannel_return_postage_billing_fuel_surcharge ,
SUM( bychannel_postage_billing_tracking ) as bychannel_postage_billing_tracking ,
SUM( bychannel_postage_billing_delivery_area_surcharge ) as bychannel_postage_billing_delivery_area_surcharge ,
SUM( bychannel_postage_billing_vat ) as bychannel_postage_billing_vat ,
SUM( bychannel_postage_billing_signature_confirmation ) as bychannel_postage_billing_signature_confirmation ,
SUM( bychannel_return_postage_billing_oversize_surcharge ) as bychannel_return_postage_billing_oversize_surcharge ,
SUM( bychannel_postage_billing_postage_adjustment ) as bychannel_postage_billing_postage_adjustment ,
SUM( bychannel_postage_billing_insurance ) as bychannel_postage_billing_insurance ,
SUM( bychannel_postage_billing_import_duty ) as bychannel_postage_billing_import_duty ,
SUM( bychannel_postage_billing_fuel_surcharge ) as bychannel_postage_billing_fuel_surcharge ,
SUM( bychannel_product_ads_payment_eventlist_charge ) as bychannel_product_ads_payment_eventlist_charge ,
SUM( bychannel_product_ads_payment_eventlist_refund ) as bychannel_product_ads_payment_eventlist_refund ,
SUM( bychannel_fba_storage_fee ) as bychannel_fba_storage_fee ,
SUM( bychannel_review_enrollment_fee ) as bychannel_review_enrollment_fee ,
SUM( bychannel_loan_payment ) as bychannel_loan_payment ,
SUM( bychannel_debt_payment ) as bychannel_debt_payment ,
SUM( bychannel_coupon_redemption_fee ) as bychannel_coupon_redemption_fee ,
SUM( bychannel_run_lightning_deal_fee ) as bychannel_run_lightning_deal_fee ,
SUM( bychannel_fba_inbound_convenience_fee ) as bychannel_fba_inbound_convenience_fee ,
SUM( bychannel_labeling_fee ) as bychannel_labeling_fee ,
SUM( bychannel_polybagging_fee ) as bychannel_polybagging_fee ,
SUM( bychannel_fba_inbound_shipment_carton_level_info_fee ) as bychannel_fba_inbound_shipment_carton_level_info_fee ,
SUM( bychannel_fba_inbound_transportation_program_fee ) as bychannel_fba_inbound_transportation_program_fee ,
SUM( bychannel_fba_overage_fee ) as bychannel_fba_overage_fee ,
SUM( bychannel_fba_inbound_transportation_fee ) as bychannel_fba_inbound_transportation_fee ,
SUM( bychannel_fba_inbound_defect_fee ) as bychannel_fba_inbound_defect_fee ,
SUM( bychannel_subscription ) as bychannel_subscription ,
SUM( bychannel_charge_back_recovery ) as bychannel_charge_back_recovery ,
SUM( bychannel_cs_error_non_itemized ) as bychannel_cs_error_non_itemized ,
SUM( bychannel_return_postage_billing_postage ) as bychannel_return_postage_billing_postage ,
SUM( bychannel_re_evaluation ) as bychannel_re_evaluation ,
SUM( bychannel_subscription_fee_correction ) as bychannel_subscription_fee_correction ,
SUM( bychannel_incorrect_fees_non_itemized ) as bychannel_incorrect_fees_non_itemized ,
SUM( bychannel_buyer_recharge ) as bychannel_buyer_recharge ,
SUM( bychannel_multichannel_order_late ) as bychannel_multichannel_order_late ,
SUM( bychannel_non_subscription_fee_adj ) as bychannel_non_subscription_fee_adj ,
SUM( bychannel_fba_disposal_fee ) as bychannel_fba_disposal_fee ,
SUM( bychannel_fba_removal_fee ) as bychannel_fba_removal_fee ,
SUM( bychannel_fba_long_term_storage_fee ) as bychannel_fba_long_term_storage_fee ,
SUM( bychannel_fba_international_inbound_freight_fee ) as bychannel_fba_international_inbound_freight_fee ,
SUM( bychannel_fba_international_inbound_freight_tax_and_duty ) as bychannel_fba_international_inbound_freight_tax_and_duty ,
SUM( bychannel_postage_billing_transaction ) as bychannel_postage_billing_transaction ,
SUM( bychannel_postage_billing_delivery_confirmation ) as bychannel_postage_billing_delivery_confirmation ,
SUM( bychannel_postage_billing_postage ) as bychannel_postage_billing_postage ,
SUM( bychannel_reserved_field1 ) as bychannel_reserved_field1 ,
SUM( bychannel_reserved_field2 ) as bychannel_reserved_field2 ,
SUM( bychannel_reserved_field3 ) as bychannel_reserved_field3 ,
SUM( bychannel_reserved_field4 ) as bychannel_reserved_field4 ,
SUM( bychannel_reserved_field5 ) as bychannel_reserved_field5 ,
SUM( bychannel_reserved_field6 ) as bychannel_reserved_field6 ,
SUM( bychannel_reserved_field7 ) as bychannel_reserved_field7 ,
SUM( bychannel_reserved_field8 ) as bychannel_reserved_field8 ,
SUM( bychannel_reserved_field9 ) as bychannel_reserved_field9 ,
SUM( bychannel_reserved_field10 ) as bychannel_reserved_field10 ,
SUM( bychannel_reserved_field11 ) as bychannel_reserved_field11 ,
SUM( bychannel_reserved_field12 ) as bychannel_reserved_field12 ,
SUM( bychannel_reserved_field13 ) as bychannel_reserved_field13 ,
SUM( bychannel_reserved_field14 ) as bychannel_reserved_field14 ,
SUM( bychannel_reserved_field15 ) as bychannel_reserved_field15 ,
SUM( bychannel_reserved_field16 ) as bychannel_reserved_field16 ,
SUM( bychannel_reserved_field17 ) as bychannel_reserved_field17 ,
SUM( bychannel_reserved_field18 ) as bychannel_reserved_field18 ,
SUM( bychannel_reserved_field19 ) as bychannel_reserved_field19 ,
SUM( bychannel_reserved_field20 ) as bychannel_reserved_field20 ,
SUM( bychannel_reserved_field44 ) as bychannel_reserved_field44 ,
SUM( bychannel_reserved_field43 ) as bychannel_reserved_field43 ,
SUM( bychannel_reserved_field46 ) as bychannel_reserved_field46 ,
SUM( bychannel_reserved_field47 ) as bychannel_reserved_field47 ,
SUM( bychannel_reserved_field48 ) as bychannel_reserved_field48 ,
SUM( bychannel_misc_adjustment ) as bychannel_misc_adjustment ,
SUM( bychannel_cpc_sb_sales_volume ) as bychannel_cpc_sb_sales_volume ,
SUM( bychannel_cpc_sb_sales_quota ) as bychannel_cpc_sb_sales_quota ,
SUM( bychannel_cpc_sb_cost ) as bychannel_cpc_sb_cost ,
SUM( bychannel_reserved_field45 ) as bychannel_reserved_field45 ,
SUM( bychannel_modified_time ) as bychannel_modified_time ,
SUM( bychannel_platform_type ) as bychannel_platform_type ,
SUM( bychannel_mfnpostageFee ) as bychannel_mfnpostageFee ,
SUM( bychannel_coupon_payment_eventList_tax ) as bychannel_coupon_payment_eventList_tax ,
SUM( bychannel_channel_amazon_order_fee ) as bychannel_channel_amazon_order_fee ,
SUM( bychannel_channel_amazon_refund_fee ) as bychannel_channel_amazon_refund_fee ,
SUM( bychannel_channel_amazon_storage_fee ) as bychannel_channel_amazon_storage_fee ,
SUM( bychannel_channel_amazon_other_fee ) as bychannel_channel_amazon_other_fee ,
SUM( bychannel_channel_profit ) as bychannel_channel_profit ,
SUM( bychannel_channel_goods_adjustment_fee ) as bychannel_channel_goods_adjustment_fee ,
max( bychannel_create_time ) as bychannel_create_time 
            ";
            $channel_table = "(select {$channel_field} from {$this->table_channel} as  channel JOIN {$this->table_channel_day_report} as dw_report on channel.id  = dw_report.channel_id WHERE {$where_channel} group by  channel_id,myear,mmonth,mweek) AS bychannel ON goods.channel_id = bychannel.channel_id AND goods.myear = bychannel.myear AND goods.mmonth = bychannel.mmonth AND goods.mweek = bychannel.mweek
	    AND goods.goods_operation_pattern != 1";
            $goods_group = "amazon_goods.goods_operation_user_admin_id,amazon_goods.goods_channel_id,dw_report.myear,dw_report.mmonth,dw_report.mweek";
            $goods_other_field = "dw_report.mweek as mweek,max(dw_report.mweekyear) as mweekyear,";
            $report_other_field = "COALESCE(goods.mweek ,bychannel.mweek) AS mweek,COALESCE(goods.mweekyear ,bychannel.mweekyear) AS mweekyear,concat(cast(COALESCE(goods.goods_operation_user_admin_id ,bychannel.operation_user_admin_id) as varchar),'_',cast(COALESCE(goods.mweekyear ,bychannel.mweekyear) as varchar),'_',lpad(cast(COALESCE(goods.mweek ,bychannel.mweek) as varchar),2,'0')) as goods_operation_user_admin_id_group,";

        }
        elseif ($table_type == 'month'){
            $goods_table = "{$this->table_dws_goods_month_report} AS dw_report
			Right JOIN {$this->table_goods_dim_report} AS amazon_goods ON dw_report.amazon_goods_id = amazon_goods.es_id";
            $channel_table = "(select channel.operation_user_admin_id as operation_user_admin_id,dw_report.* from {$this->table_channel} as  channel JOIN {$this->table_channel_month_report} as dw_report on channel.id  = dw_report.channel_id WHERE {$where_channel} ) AS bychannel ON goods.channel_id = bychannel.channel_id AND goods.myear = bychannel.myear AND goods.mmonth = bychannel.mmonth 
	    AND goods.goods_operation_pattern != 1";
            $goods_group = "amazon_goods.goods_operation_user_admin_id,amazon_goods.goods_channel_id,dw_report.myear,dw_report.mmonth";
            $goods_other_field = "min(dw_report.mquarter) as mquarter,sum(first_purchasing_cost ) as first_purchasing_cost,
			sum(first_logistics_head_course ) as first_logistics_head_course,
			sum(fba_first_logistics_head_course) as fba_first_logistics_head_course,
			sum(fbm_first_logistics_head_course ) as fbm_first_logistics_head_course,
			sum(monthly_sku_reserved_field37 ) as monthly_sku_reserved_field37,
			sum(monthly_sku_reserved_field38 ) as monthly_sku_reserved_field38,
			sum(monthly_sku_reserved_field39 ) as monthly_sku_reserved_field39,
			sum(monthly_sku_reserved_field40 ) as monthly_sku_reserved_field40,
			sum(monthly_sku_reserved_field41 ) as monthly_sku_reserved_field41,
			sum(monthly_sku_reserved_field42 ) as monthly_sku_reserved_field42,
			sum(monthly_sku_reserved_field43 ) as monthly_sku_reserved_field43,
			sum(monthly_sku_reserved_field44 ) as monthly_sku_reserved_field44,
			sum(monthly_sku_reserved_field45 ) as monthly_sku_reserved_field45,
			sum(monthly_sku_reserved_field46 ) as monthly_sku_reserved_field46,
			sum(monthly_sku_reserved_field47 ) as monthly_sku_reserved_field47,
			sum(monthly_sku_reserved_field48 ) as monthly_sku_reserved_field48,
			sum(monthly_sku_reserved_field49 ) as monthly_sku_reserved_field49,
			sum(monthly_sku_estimated_monthly_storage_fee ) as monthly_sku_estimated_monthly_storage_fee,";
            $report_other_field = "
            COALESCE(goods.mquarter ,bychannel.mquarter) as mquarter,
            COALESCE(goods.first_purchasing_cost ,bychannel.first_purchasing_cost) as first_purchasing_cost,
            COALESCE(goods.first_logistics_head_course ,bychannel.first_logistics_head_course) as first_logistics_head_course,
            COALESCE(goods.fba_first_logistics_head_course ,bychannel.fba_first_logistics_head_course) as fba_first_logistics_head_course,
            COALESCE(goods.fbm_first_logistics_head_course ,bychannel.fbm_first_logistics_head_course) as fbm_first_logistics_head_course,
            COALESCE(goods.monthly_sku_reserved_field37 ,bychannel.monthly_sku_reserved_field37) as monthly_sku_reserved_field37,
            COALESCE(goods.monthly_sku_reserved_field38 ,bychannel.monthly_sku_reserved_field38) as monthly_sku_reserved_field38,
            COALESCE(goods.monthly_sku_reserved_field39 ,bychannel.monthly_sku_reserved_field39) as monthly_sku_reserved_field39,
            COALESCE(goods.monthly_sku_reserved_field40 ,bychannel.monthly_sku_reserved_field40) as monthly_sku_reserved_field40,
            COALESCE(goods.monthly_sku_reserved_field41 ,bychannel.monthly_sku_reserved_field41) as monthly_sku_reserved_field41,
            COALESCE(goods.monthly_sku_reserved_field42 ,bychannel.monthly_sku_reserved_field42) as monthly_sku_reserved_field42,
            COALESCE(goods.monthly_sku_reserved_field43 ,bychannel.monthly_sku_reserved_field43) as monthly_sku_reserved_field43,
            COALESCE(goods.monthly_sku_reserved_field44 ,bychannel.monthly_sku_reserved_field44) as monthly_sku_reserved_field44,
            COALESCE(goods.monthly_sku_reserved_field45 ,bychannel.monthly_sku_reserved_field45) as monthly_sku_reserved_field45,
            COALESCE(goods.monthly_sku_reserved_field46 ,bychannel.monthly_sku_reserved_field46) as monthly_sku_reserved_field46,
            COALESCE(goods.monthly_sku_reserved_field47 ,bychannel.monthly_sku_reserved_field47) as monthly_sku_reserved_field47,
            COALESCE(goods.monthly_sku_reserved_field48 ,bychannel.monthly_sku_reserved_field48) as monthly_sku_reserved_field48,
            COALESCE(goods.monthly_sku_reserved_field49 ,bychannel.monthly_sku_reserved_field49) as monthly_sku_reserved_field49,
            COALESCE(goods.monthly_sku_estimated_monthly_storage_fee ,0) as monthly_sku_estimated_monthly_storage_fee,
            concat(cast(COALESCE(goods.goods_operation_user_admin_id ,bychannel.operation_user_admin_id) as varchar),'_',cast(COALESCE(goods.myear ,bychannel.myear) as  varchar),'_',lpad(cast(COALESCE(goods.mmonth ,bychannel.mmonth) as varchar),2,'0')) as goods_operation_user_admin_id_group,";

            $goods_month_table = "";
        }
        else{
//            $goods_table = "dws.dws_dataark_f_dw_goods_day_report_{$this->dbhost} AS dw_report
//			Right JOIN dim.dim_dataark_f_dw_goods_dim_report_{$this->dbhost} AS amazon_goods ON dw_report.amazon_goods_id = amazon_goods.es_id";
            $goods_table = "{$this->table_dws_goods_day_report} AS dw_report
			Right JOIN {$this->table_goods_dim_report} AS amazon_goods ON dw_report.amazon_goods_id = amazon_goods.es_id";
            $channel_table = "(select channel.operation_user_admin_id as operation_user_admin_id,dw_report.* from {$this->table_channel} as  channel  JOIN {$this->table_channel_day_report} as dw_report on channel.id  = dw_report.channel_id WHERE {$where_channel} ) AS bychannel ON goods.channel_id = bychannel.channel_id AND goods.myear = bychannel.myear AND goods.mmonth = bychannel.mmonth AND goods.mday = bychannel.mday
	    AND goods.goods_operation_pattern != 1";
            $goods_group = "amazon_goods.goods_operation_user_admin_id,amazon_goods.goods_channel_id,dw_report.myear,dw_report.mmonth,dw_report.mday";
            $goods_other_field = "dw_report.mday as mday,";
            $report_other_field = "COALESCE(goods.mday ,bychannel.mday) AS mday,concat(cast(COALESCE(goods.goods_operation_user_admin_id ,bychannel.operation_user_admin_id) as  varchar),'_',cast(COALESCE(goods.myear ,bychannel.myear) as varchar),'_',lpad(cast(COALESCE(goods.mmonth ,bychannel.mmonth) as varchar),2,'0'),'_',lpad(cast(COALESCE(goods.mday ,bychannel.mday) as varchar),2,'0')) as goods_operation_user_admin_id_group,";

        }

        $where_dw_report_amazon_goods .= $where_ym." AND dw_report.available = 1 ";

        $table = " (
select
COALESCE(goods.byorder_user_sessions,0) AS byorder_user_sessions ,
COALESCE(goods.byorder_quantity_of_goods_ordered,0) AS byorder_quantity_of_goods_ordered ,
COALESCE(goods.byorder_number_of_visits,0) AS byorder_number_of_visits ,
COALESCE(goods.byorder_buy_button_winning_rate,0) AS byorder_buy_button_winning_rate ,
COALESCE(goods.byorder_sales_volume,0) AS byorder_sales_volume ,
COALESCE(goods.byorder_group_id,0) AS byorder_group_id ,
COALESCE(goods.byorder_sales_quota,0) AS byorder_sales_quota ,
COALESCE(goods.byorder_refund_num,0) AS byorder_refund_num ,
COALESCE(goods.byorder_refund,0) AS byorder_refund ,
COALESCE(goods.byorder_promote_discount,0) AS byorder_promote_discount ,
COALESCE(goods.byorder_refund_promote_discount,0) AS byorder_refund_promote_discount ,
COALESCE(goods.byorder_purchasing_cost,0) AS byorder_purchasing_cost ,
COALESCE(goods.byorder_logistics_head_course,0) AS byorder_logistics_head_course ,
COALESCE(goods.byorder_goods_profit,0) AS byorder_goods_profit ,
COALESCE(goods.byorder_goods_amazon_fee,0) AS byorder_goods_amazon_fee ,
COALESCE(goods.byorder_platform_sales_commission,0) AS byorder_platform_sales_commission ,
COALESCE(goods.byorder_fba_generation_delivery_cost,0) AS byorder_fba_generation_delivery_cost ,
COALESCE(goods.byorder_fbaperorderfulfillmentfee,0) AS byorder_fbaperorderfulfillmentfee ,
COALESCE(goods.byorder_fbaweightbasedfee,0) AS byorder_fbaweightbasedfee ,
COALESCE(goods.byorder_profit,0) AS byorder_profit ,
COALESCE(goods.byorder_order_variableclosingfee,0) AS byorder_order_variableclosingfee ,
COALESCE(goods.byorder_fixedclosingfee,0) AS byorder_fixedclosingfee ,
COALESCE(goods.byorder_refund_variableclosingfee,0) AS byorder_refund_variableclosingfee ,
COALESCE(goods.byorder_goods_amazon_other_fee,0) AS byorder_goods_amazon_other_fee ,
COALESCE(goods.byorder_returnshipping,0) AS byorder_returnshipping ,
COALESCE(goods.byorder_return_and_return_sales_commission,0) AS byorder_return_and_return_sales_commission ,
COALESCE(goods.byorder_fba_refund_treatment_fee,0) AS byorder_fba_refund_treatment_fee ,
COALESCE(goods.byorder_fbacustomerreturnperorderfee,0) AS byorder_fbacustomerreturnperorderfee ,
COALESCE(goods.byorder_fbacustomerreturnweightbasedfee,0) AS byorder_fbacustomerreturnweightbasedfee ,
COALESCE(goods.byorder_estimated_monthly_storage_fee,0) AS byorder_estimated_monthly_storage_fee ,
COALESCE(goods.byorder_long_term_storage_fee,0) AS byorder_long_term_storage_fee ,
COALESCE(goods.byorder_reserved_field16,0) AS byorder_reserved_field16 ,
COALESCE(goods.byorder_reserved_field10,0) AS byorder_reserved_field10 ,
COALESCE(goods.byorder_cpc_cost,0) AS byorder_cpc_cost ,
COALESCE(goods.byorder_cpc_sd_cost,0) AS byorder_cpc_sd_cost ,
COALESCE(goods.byorder_reserved_field1,0) AS byorder_reserved_field1 ,
COALESCE(goods.byorder_reserved_field2,0) AS byorder_reserved_field2 ,
COALESCE(goods.byorder_cpc_sd_clicks,0) AS byorder_cpc_sd_clicks ,
COALESCE(goods.byorder_cpc_sp_clicks,0) AS byorder_cpc_sp_clicks ,
COALESCE(goods.byorder_sp_attributedconversions7d,0) AS byorder_sp_attributedconversions7d ,
COALESCE(goods.byorder_sd_attributedconversions7d,0) AS byorder_sd_attributedconversions7d ,
COALESCE(goods.byorder_sp_attributedsales7d,0) AS byorder_sp_attributedsales7d ,
COALESCE(goods.byorder_sd_attributedsales7d,0) AS byorder_sd_attributedsales7d ,
COALESCE(goods.byorder_sd_attributedconversions7dsamesku,0) AS byorder_sd_attributedconversions7dsamesku ,
COALESCE(goods.byorder_sp_attributedconversions7dsamesku,0) AS byorder_sp_attributedconversions7dsamesku ,
COALESCE(goods.byorder_sd_attributedsales7dsamesku,0) AS byorder_sd_attributedsales7dsamesku ,
COALESCE(goods.byorder_sp_attributedsales7dsamesku,0) AS byorder_sp_attributedsales7dsamesku ,
COALESCE(goods.byorder_buy_button_winning_num,0) AS byorder_buy_button_winning_num ,
COALESCE(goods.byorder_return_and_return_commission,0) AS byorder_return_and_return_commission ,
COALESCE(goods.byorder_reserved_field17,0) AS byorder_reserved_field17 ,
COALESCE(goods.byorder_order_quantity,0) AS byorder_order_quantity ,
COALESCE(goods.byorder_reserved_field21,0) AS byorder_reserved_field21 ,
COALESCE(goods.byorder_fba_sales_volume,0) AS byorder_fba_sales_volume ,
COALESCE(goods.byorder_fbm_sales_volume,0) AS byorder_fbm_sales_volume ,
COALESCE(goods.byorder_fba_refund_num,0) AS byorder_fba_refund_num ,
COALESCE(goods.byorder_fbm_refund_num,0) AS byorder_fbm_refund_num ,
COALESCE(goods.byorder_fba_logistics_head_course,0) AS byorder_fba_logistics_head_course ,
COALESCE(goods.byorder_fba_sales_quota,0) AS byorder_fba_sales_quota ,
COALESCE(goods.byorder_fbm_sales_quota,0) AS byorder_fbm_sales_quota ,
COALESCE(goods.byorder_fba_refund,0) AS byorder_fba_refund ,
COALESCE(goods.byorder_fbm_refund,0) AS byorder_fbm_refund ,
COALESCE(goods.byorder_tax,0) AS byorder_tax ,
COALESCE(goods.byorder_ware_house_lost,0) AS byorder_ware_house_lost ,
COALESCE(goods.byorder_ware_house_damage,0) AS byorder_ware_house_damage ,
COALESCE(goods.byorder_shipping_charge,0) AS byorder_shipping_charge ,
COALESCE(goods.byorder_customer_damage,0) AS byorder_customer_damage ,
COALESCE(goods.byorder_removal_order_lost,0) AS byorder_removal_order_lost ,
COALESCE(goods.byorder_incorrect_fees_items,0) AS byorder_incorrect_fees_items ,
COALESCE(goods.byorder_missing_from_inbound,0) AS byorder_missing_from_inbound ,
COALESCE(goods.byorder_multichannel_order_lost,0) AS byorder_multichannel_order_lost ,
COALESCE(goods.byorder_removal_fee,0) AS byorder_removal_fee ,
COALESCE(goods.byorder_gift_wrap,0) AS byorder_gift_wrap ,
COALESCE(goods.report_sales_volume,0) AS report_sales_volume ,
COALESCE(goods.report_group_id,0) AS report_group_id ,
COALESCE(goods.report_sales_quota,0) AS report_sales_quota ,
COALESCE(goods.report_refund_num,0) AS report_refund_num ,
COALESCE(goods.report_refund,0) AS report_refund ,
COALESCE(goods.report_promote_discount,0) AS report_promote_discount ,
COALESCE(goods.report_refund_promote_discount,0) AS report_refund_promote_discount ,
COALESCE(goods.report_purchasing_cost,0) AS report_purchasing_cost ,
COALESCE(goods.report_logistics_head_course,0) AS report_logistics_head_course ,
COALESCE(goods.report_goods_profit,0) AS report_goods_profit ,
COALESCE(goods.report_goods_amazon_fee,0) AS report_goods_amazon_fee ,
COALESCE(goods.report_platform_sales_commission,0) AS report_platform_sales_commission ,
COALESCE(goods.report_fba_generation_delivery_cost,0) AS report_fba_generation_delivery_cost ,
COALESCE(goods.report_fbaperorderfulfillmentfee,0) AS report_fbaperorderfulfillmentfee ,
COALESCE(goods.report_fbaweightbasedfee,0) AS report_fbaweightbasedfee ,
COALESCE(goods.report_profit,0) AS report_profit ,
COALESCE(goods.report_order_variableclosingfee,0) AS report_order_variableclosingfee ,
COALESCE(goods.report_fixedclosingfee,0) AS report_fixedclosingfee ,
COALESCE(goods.report_refund_variableclosingfee,0) AS report_refund_variableclosingfee ,
COALESCE(goods.report_goods_amazon_other_fee,0) AS report_goods_amazon_other_fee ,
COALESCE(goods.report_returnshipping,0) AS report_returnshipping ,
COALESCE(goods.report_return_and_return_sales_commission,0) AS report_return_and_return_sales_commission ,
COALESCE(goods.report_fba_refund_treatment_fee,0) AS report_fba_refund_treatment_fee ,
COALESCE(goods.report_fbacustomerreturnperorderfee,0) AS report_fbacustomerreturnperorderfee ,
COALESCE(goods.report_fbacustomerreturnweightbasedfee,0) AS report_fbacustomerreturnweightbasedfee ,
COALESCE(goods.report_estimated_monthly_storage_fee,0) AS report_estimated_monthly_storage_fee ,
COALESCE(goods.report_long_term_storage_fee,0) AS report_long_term_storage_fee ,
COALESCE(goods.report_reserved_field16,0) AS report_reserved_field16 ,
COALESCE(goods.report_reserved_field10,0) AS report_reserved_field10 ,
COALESCE(goods.report_cpc_cost,0) AS report_cpc_cost ,
COALESCE(goods.report_cpc_sd_cost,0) AS report_cpc_sd_cost ,
COALESCE(goods.report_reserved_field1,0) AS report_reserved_field1 ,
COALESCE(goods.report_reserved_field2,0) AS report_reserved_field2 ,
COALESCE(goods.report_cpc_sd_clicks,0) AS report_cpc_sd_clicks ,
COALESCE(goods.report_cpc_sp_clicks,0) AS report_cpc_sp_clicks ,
COALESCE(goods.report_sp_attributedconversions7d,0) AS report_sp_attributedconversions7d ,
COALESCE(goods.report_sd_attributedconversions7d,0) AS report_sd_attributedconversions7d ,
COALESCE(goods.report_sp_attributedsales7d,0) AS report_sp_attributedsales7d ,
COALESCE(goods.report_sd_attributedsales7d,0) AS report_sd_attributedsales7d ,
COALESCE(goods.report_sd_attributedconversions7dsamesku,0) AS report_sd_attributedconversions7dsamesku ,
COALESCE(goods.report_sp_attributedconversions7dsamesku,0) AS report_sp_attributedconversions7dsamesku ,
COALESCE(goods.report_sd_attributedsales7dsamesku,0) AS report_sd_attributedsales7dsamesku ,
COALESCE(goods.report_sp_attributedsales7dsamesku,0) AS report_sp_attributedsales7dsamesku ,
COALESCE(goods.report_return_and_return_commission,0) AS report_return_and_return_commission ,
COALESCE(goods.report_reserved_field17,0) AS report_reserved_field17 ,
COALESCE(goods.report_order_quantity,0) AS report_order_quantity ,
COALESCE(goods.report_reserved_field21,0) AS report_reserved_field21 ,
COALESCE(goods.report_fba_sales_volume,0) AS report_fba_sales_volume ,
COALESCE(goods.report_fbm_sales_volume,0) AS report_fbm_sales_volume ,
COALESCE(goods.report_fba_refund_num,0) AS report_fba_refund_num ,
COALESCE(goods.report_fbm_refund_num,0) AS report_fbm_refund_num ,
COALESCE(goods.report_fba_logistics_head_course,0) AS report_fba_logistics_head_course ,
COALESCE(goods.report_fba_sales_quota,0) AS report_fba_sales_quota ,
COALESCE(goods.report_fbm_sales_quota,0) AS report_fbm_sales_quota ,
COALESCE(goods.report_fba_refund,0) AS report_fba_refund ,
COALESCE(goods.report_fbm_refund,0) AS report_fbm_refund ,
COALESCE(goods.report_tax,0) AS report_tax ,
COALESCE(goods.report_ware_house_lost,0) AS report_ware_house_lost ,
COALESCE(goods.report_ware_house_damage,0) AS report_ware_house_damage ,
COALESCE(goods.report_shipping_charge,0) AS report_shipping_charge ,
COALESCE(goods.report_customer_damage,0) AS report_customer_damage ,
COALESCE(goods.report_removal_order_lost,0) AS report_removal_order_lost ,
COALESCE(goods.report_incorrect_fees_items,0) AS report_incorrect_fees_items ,
COALESCE(goods.report_missing_from_inbound,0) AS report_missing_from_inbound ,
COALESCE(goods.report_multichannel_order_lost,0) AS report_multichannel_order_lost ,
COALESCE(goods.report_removal_fee,0) AS report_removal_fee ,
COALESCE(goods.byorder_fbm_logistics_head_course,0) AS byorder_fbm_logistics_head_course ,
COALESCE(goods.report_fbm_logistics_head_course,0) AS report_fbm_logistics_head_course ,
COALESCE(goods.report_gift_wrap,0) AS report_gift_wrap ,".
//--bychannnel
//"COALESCE(goods.report_channel_profit,0) as report_channel_profit,
//COALESCE(goods.byorder_channel_profit,0) as byorder_channel_profit,
            "COALESCE(goods.byorder_channel_amazon_order_fee,0) as byorder_channel_amazon_order_fee,
COALESCE(goods.report_channel_amazon_order_fee,0) as report_channel_amazon_order_fee,
COALESCE(goods.byorder_channel_amazon_refund_fee,0) as byorder_channel_amazon_refund_fee,
COALESCE(goods.report_channel_amazon_refund_fee,0) as report_channel_amazon_refund_fee,
COALESCE(goods.byorder_channel_amazon_storage_fee,0) as byorder_channel_amazon_storage_fee,
COALESCE(goods.report_channel_amazon_storage_fee,0) as report_channel_amazon_storage_fee,
COALESCE(goods.byorder_channel_amazon_other_fee,0) as byorder_channel_amazon_other_fee,
COALESCE(goods.report_channel_amazon_other_fee,0) as report_channel_amazon_other_fee,
COALESCE(goods.byorder_channel_goods_adjustment_fee,0) as byorder_channel_goods_adjustment_fee,
COALESCE(goods.report_channel_goods_adjustment_fee,0) as report_channel_goods_adjustment_fee,
COALESCE(goods.report_channel_profit,0) as report_channel_profit,
COALESCE(goods.byorder_channel_profit,0) as byorder_channel_profit,
COALESCE(goods.byorderitem_evaluation_nums,0) as byorderitem_evaluation_nums,
COALESCE(goods.reportitem_evaluation_nums,0) as reportitem_evaluation_nums,
COALESCE(goods.byorderitem_reserved_field12,0) as byorderitem_reserved_field12,
COALESCE(goods.reportitem_reserved_field12,0) as reportitem_reserved_field12,
COALESCE(goods.byorderitem_reserved_field13,0) as byorderitem_reserved_field13,
COALESCE(goods.reportitem_reserved_field13,0) as reportitem_reserved_field13,
COALESCE(goods.byorder_lost_num,0) as byorder_lost_num,
COALESCE(goods.report_lost_num,0) as report_lost_num,
COALESCE(goods.byorder_damage_num,0) as byorder_damage_num,
COALESCE(goods.report_damage_num,0) as report_damage_num,
COALESCE(goods.byorder_cpc_sb_sales_quota,0) as byorder_cpc_sb_sales_quota,
COALESCE(goods.report_cpc_sb_sales_quota,0) as report_cpc_sb_sales_quota,
COALESCE(goods.byorder_cpc_sb_cost,0) as byorder_cpc_sb_cost,
COALESCE(goods.report_cpc_sb_cost,0) as report_cpc_sb_cost,
COALESCE(goods.byorder_refund_rate,0) as byorder_refund_rate,
COALESCE(goods.report_refund_rate,0) as report_refund_rate,
COALESCE(goods.byorder_profit_margin,0) as byorder_profit_margin,
COALESCE(goods.report_profit_margin,0) as report_profit_margin,

COALESCE(bychannel.bychannel_sales_quota,0) as bychannel_sales_quota,
COALESCE(bychannel.bychannel_fba_sales_quota,0) as bychannel_fba_sales_quota,
COALESCE(bychannel.bychannel_sales_volume,0) as bychannel_sales_volume,
COALESCE(bychannel.bychannel_fba_sales_volume,0) as bychannel_fba_sales_volume,
COALESCE(bychannel.bychannel_operating_fee,0) as bychannel_operating_fee,
COALESCE(bychannel.bychannel_fba_per_unit_fulfillment_fee,0) as bychannel_fba_per_unit_fulfillment_fee,
COALESCE(bychannel.bychannel_return_postage_billing_fuel_surcharge,0) as bychannel_return_postage_billing_fuel_surcharge,
COALESCE(bychannel.bychannel_postage_billing_tracking,0) as bychannel_postage_billing_tracking,
COALESCE(bychannel.bychannel_postage_billing_delivery_area_surcharge,0) as bychannel_postage_billing_delivery_area_surcharge,
COALESCE(bychannel.bychannel_postage_billing_vat,0) as bychannel_postage_billing_vat,
COALESCE(bychannel.bychannel_postage_billing_signature_confirmation,0) as bychannel_postage_billing_signature_confirmation,
COALESCE(bychannel.bychannel_return_postage_billing_oversize_surcharge,0) as bychannel_return_postage_billing_oversize_surcharge,
COALESCE(bychannel.bychannel_postage_billing_postage_adjustment,0) as bychannel_postage_billing_postage_adjustment,
COALESCE(bychannel.bychannel_postage_billing_insurance,0) as bychannel_postage_billing_insurance,
COALESCE(bychannel.bychannel_postage_billing_import_duty,0) as bychannel_postage_billing_import_duty,
COALESCE(bychannel.bychannel_postage_billing_fuel_surcharge,0) as bychannel_postage_billing_fuel_surcharge,
COALESCE(bychannel.bychannel_product_ads_payment_eventlist_charge,0) as bychannel_product_ads_payment_eventlist_charge,
COALESCE(bychannel.bychannel_product_ads_payment_eventlist_refund,0) as bychannel_product_ads_payment_eventlist_refund,
COALESCE(bychannel.bychannel_fba_storage_fee,0) as bychannel_fba_storage_fee,
COALESCE(bychannel.bychannel_review_enrollment_fee,0) as bychannel_review_enrollment_fee,
COALESCE(bychannel.bychannel_loan_payment,0) as bychannel_loan_payment,
COALESCE(bychannel.bychannel_debt_payment,0) as bychannel_debt_payment,
COALESCE(bychannel.bychannel_coupon_redemption_fee,0) as bychannel_coupon_redemption_fee,
COALESCE(bychannel.bychannel_run_lightning_deal_fee,0) as bychannel_run_lightning_deal_fee,
COALESCE(bychannel.bychannel_fba_inbound_convenience_fee,0) as bychannel_fba_inbound_convenience_fee,
COALESCE(bychannel.bychannel_labeling_fee,0) as bychannel_labeling_fee,
COALESCE(bychannel.bychannel_polybagging_fee,0) as bychannel_polybagging_fee,
COALESCE(bychannel.bychannel_fba_inbound_shipment_carton_level_info_fee,0) as bychannel_fba_inbound_shipment_carton_level_info_fee,
COALESCE(bychannel.bychannel_fba_inbound_transportation_program_fee,0) as bychannel_fba_inbound_transportation_program_fee,
COALESCE(bychannel.bychannel_fba_overage_fee,0) as bychannel_fba_overage_fee,
COALESCE(bychannel.bychannel_fba_inbound_transportation_fee,0) as bychannel_fba_inbound_transportation_fee,
COALESCE(bychannel.bychannel_fba_inbound_defect_fee,0) as bychannel_fba_inbound_defect_fee,
COALESCE(bychannel.bychannel_subscription,0) as bychannel_subscription,
COALESCE(bychannel.bychannel_charge_back_recovery,0) as bychannel_charge_back_recovery,
COALESCE(bychannel.bychannel_cs_error_non_itemized,0) as bychannel_cs_error_non_itemized,
COALESCE(bychannel.bychannel_return_postage_billing_postage,0) as bychannel_return_postage_billing_postage,
COALESCE(bychannel.bychannel_re_evaluation,0) as bychannel_re_evaluation,
COALESCE(bychannel.bychannel_subscription_fee_correction,0) as bychannel_subscription_fee_correction,
COALESCE(bychannel.bychannel_incorrect_fees_non_itemized,0) as bychannel_incorrect_fees_non_itemized,
COALESCE(bychannel.bychannel_buyer_recharge,0) as bychannel_buyer_recharge,
COALESCE(bychannel.bychannel_multichannel_order_late,0) as bychannel_multichannel_order_late,
COALESCE(bychannel.bychannel_non_subscription_fee_adj,0) as bychannel_non_subscription_fee_adj,
COALESCE(bychannel.bychannel_fba_disposal_fee,0) as bychannel_fba_disposal_fee,
COALESCE(bychannel.bychannel_fba_removal_fee,0) as bychannel_fba_removal_fee,
COALESCE(bychannel.bychannel_fba_long_term_storage_fee,0) as bychannel_fba_long_term_storage_fee,
COALESCE(bychannel.bychannel_fba_international_inbound_freight_fee,0) as bychannel_fba_international_inbound_freight_fee,
COALESCE(bychannel.bychannel_fba_international_inbound_freight_tax_and_duty,0) as bychannel_fba_international_inbound_freight_tax_and_duty,
COALESCE(bychannel.bychannel_postage_billing_transaction,0) as bychannel_postage_billing_transaction,
COALESCE(bychannel.bychannel_postage_billing_delivery_confirmation,0) as bychannel_postage_billing_delivery_confirmation,
COALESCE(bychannel.bychannel_postage_billing_postage,0) as bychannel_postage_billing_postage,
COALESCE(bychannel.bychannel_reserved_field1,0) as bychannel_reserved_field1,
COALESCE(bychannel.bychannel_reserved_field2,0) as bychannel_reserved_field2,
COALESCE(bychannel.bychannel_reserved_field3,0) as bychannel_reserved_field3,
COALESCE(bychannel.bychannel_reserved_field4,0) as bychannel_reserved_field4,
COALESCE(bychannel.bychannel_reserved_field5,0) as bychannel_reserved_field5,
COALESCE(bychannel.bychannel_reserved_field6,0) as bychannel_reserved_field6,
COALESCE(bychannel.bychannel_reserved_field7,0) as bychannel_reserved_field7,
COALESCE(bychannel.bychannel_reserved_field8,0) as bychannel_reserved_field8,
COALESCE(bychannel.bychannel_reserved_field9,0) as bychannel_reserved_field9,
COALESCE(bychannel.bychannel_reserved_field10,0) as bychannel_reserved_field10,
COALESCE(bychannel.bychannel_reserved_field11,0) as bychannel_reserved_field11,
COALESCE(bychannel.bychannel_reserved_field12,0) as bychannel_reserved_field12,
COALESCE(bychannel.bychannel_reserved_field13,0) as bychannel_reserved_field13,
COALESCE(bychannel.bychannel_reserved_field14,0) as bychannel_reserved_field14,
COALESCE(bychannel.bychannel_reserved_field15,0) as bychannel_reserved_field15,
COALESCE(bychannel.bychannel_reserved_field16,0) as bychannel_reserved_field16,
COALESCE(bychannel.bychannel_reserved_field17,0) as bychannel_reserved_field17,
COALESCE(bychannel.bychannel_reserved_field18,0) as bychannel_reserved_field18,
COALESCE(bychannel.bychannel_reserved_field19,0) as bychannel_reserved_field19,
COALESCE(bychannel.bychannel_reserved_field20,0) as bychannel_reserved_field20,
COALESCE(bychannel.bychannel_reserved_field44,0) as bychannel_reserved_field44,
COALESCE(bychannel.bychannel_reserved_field43,0) as bychannel_reserved_field43,
COALESCE(bychannel.bychannel_misc_adjustment,0) as bychannel_misc_adjustment,
COALESCE(bychannel.bychannel_cpc_sb_sales_volume,0) as bychannel_cpc_sb_sales_volume,
COALESCE(bychannel.bychannel_cpc_sb_sales_quota,0) as bychannel_cpc_sb_sales_quota,
COALESCE(bychannel.bychannel_cpc_sb_cost,0) as bychannel_cpc_sb_cost,
COALESCE(bychannel.bychannel_reserved_field45,0) as bychannel_cpc_sbv_cost,
COALESCE(bychannel.bychannel_create_time,0) as bychannel_create_time,
COALESCE(bychannel.bychannel_modified_time,0) as bychannel_modified_time,
COALESCE(bychannel.bychannel_platform_type,0) as bychannel_platform_type,
COALESCE(bychannel.bychannel_mfnpostageFee,0) as bychannel_mfnpostageFee,
COALESCE(bychannel.bychannel_coupon_payment_eventList_tax,0) as bychannel_coupon_payment_eventList_tax,
COALESCE(bychannel.bychannel_channel_amazon_order_fee,0) as bychannel_channel_amazon_order_fee,
COALESCE(bychannel.bychannel_channel_amazon_refund_fee,0) as bychannel_channel_amazon_refund_fee,
COALESCE(bychannel.bychannel_channel_amazon_storage_fee,0) as bychannel_channel_amazon_storage_fee,
COALESCE(bychannel.bychannel_channel_amazon_other_fee,0) as bychannel_channel_amazon_other_fee,
COALESCE(bychannel.bychannel_channel_profit,0) as bychannel_channel_profit,
COALESCE(bychannel.bychannel_channel_goods_adjustment_fee,0) as bychannel_channel_goods_adjustment_fee,
COALESCE(bychannel.bychannel_reserved_field1,0) as channel_fbm_safe_t_claim_demage,
COALESCE(bychannel.bychannel_reserved_field47,0) as bychannel_reserved_field47,
COALESCE(bychannel.bychannel_reserved_field46,0) as bychannel_reserved_field46,
COALESCE(bychannel.bychannel_reserved_field48,0) as bychannel_reserved_field48,
COALESCE(goods.channel_id ,bychannel.channel_id) AS channel_id ,
COALESCE(goods.site_id ,bychannel.site_id) AS site_id ,
COALESCE(goods.user_id ,bychannel.user_id) AS user_id ,
COALESCE(goods.myear ,bychannel.myear) AS myear ,
COALESCE(goods.mmonth ,bychannel.mmonth) AS mmonth ,
COALESCE(goods.goods_operation_user_admin_id ,bychannel.operation_user_admin_id) AS goods_operation_user_admin_id ,
COALESCE(goods.create_time ,bychannel.bychannel_create_time) AS create_time ,
{$report_other_field}
COALESCE(goods.goods_operation_pattern ,2) AS goods_operation_pattern 
 from
        (SELECT
			SUM( dw_report.byorder_user_sessions ) AS byorder_user_sessions,
			SUM( dw_report.byorder_channel_amazon_order_fee ) AS byorder_channel_amazon_order_fee,
			SUM( dw_report.report_channel_amazon_order_fee ) AS report_channel_amazon_order_fee,
			SUM( dw_report.byorder_channel_amazon_refund_fee ) AS byorder_channel_amazon_refund_fee,
			SUM( dw_report.report_channel_amazon_refund_fee ) AS report_channel_amazon_refund_fee,
			SUM( dw_report.byorder_channel_amazon_storage_fee ) AS byorder_channel_amazon_storage_fee,
			SUM( dw_report.report_channel_amazon_storage_fee ) AS report_channel_amazon_storage_fee,
			SUM( dw_report.byorder_channel_amazon_other_fee ) AS byorder_channel_amazon_other_fee,
			SUM( dw_report.report_channel_amazon_other_fee ) AS report_channel_amazon_other_fee,
			SUM( dw_report.byorder_channel_goods_adjustment_fee ) AS byorder_channel_goods_adjustment_fee,
			SUM( dw_report.report_channel_goods_adjustment_fee ) AS report_channel_goods_adjustment_fee,
			SUM( dw_report.byorder_channel_profit ) AS byorder_channel_profit,
			SUM( dw_report.report_channel_profit ) AS report_channel_profit,
			SUM( dw_report.byorder_quantity_of_goods_ordered ) AS byorder_quantity_of_goods_ordered,
			SUM( dw_report.byorder_number_of_visits ) AS byorder_number_of_visits,
			SUM( dw_report.byorder_buy_button_winning_rate ) AS byorder_buy_button_winning_rate,
			SUM( dw_report.byorder_sales_volume ) AS byorder_sales_volume,
			SUM( dw_report.byorder_group_id ) AS byorder_group_id,
			SUM( dw_report.byorder_sales_quota ) AS byorder_sales_quota,
			SUM( dw_report.byorder_refund_num ) AS byorder_refund_num,
			SUM( dw_report.byorder_refund ) AS byorder_refund,
			SUM( dw_report.byorder_promote_discount ) AS byorder_promote_discount,
			SUM( dw_report.byorder_refund_promote_discount ) AS byorder_refund_promote_discount,
			SUM( dw_report.byorder_purchasing_cost ) AS byorder_purchasing_cost,
			SUM( dw_report.byorder_logistics_head_course ) AS byorder_logistics_head_course,
			SUM( dw_report.byorder_goods_profit ) AS byorder_goods_profit,
			SUM( dw_report.byorder_goods_amazon_fee ) AS byorder_goods_amazon_fee,
			SUM( dw_report.byorder_platform_sales_commission ) AS byorder_platform_sales_commission,
			SUM( dw_report.byorder_fba_generation_delivery_cost ) AS byorder_fba_generation_delivery_cost,
			SUM( dw_report.byorder_fbaperorderfulfillmentfee ) AS byorder_fbaperorderfulfillmentfee,
			SUM( dw_report.byorder_fbaweightbasedfee ) AS byorder_fbaweightbasedfee,
			SUM( dw_report.byorder_profit ) AS byorder_profit,
			SUM( dw_report.byorder_order_variableclosingfee ) AS byorder_order_variableclosingfee,
			SUM( dw_report.byorder_fixedclosingfee ) AS byorder_fixedclosingfee,
			SUM( dw_report.byorder_refund_variableclosingfee ) AS byorder_refund_variableclosingfee,
			SUM( dw_report.byorder_goods_amazon_other_fee ) AS byorder_goods_amazon_other_fee,
			SUM( dw_report.byorder_returnshipping ) AS byorder_returnshipping,
			SUM( dw_report.byorder_return_and_return_sales_commission ) AS byorder_return_and_return_sales_commission,
			SUM( dw_report.byorder_fba_refund_treatment_fee ) AS byorder_fba_refund_treatment_fee,
			SUM( dw_report.byorder_fbacustomerreturnperorderfee ) AS byorder_fbacustomerreturnperorderfee,
			SUM( dw_report.byorder_fbacustomerreturnweightbasedfee ) AS byorder_fbacustomerreturnweightbasedfee,
			SUM( dw_report.byorder_estimated_monthly_storage_fee ) AS byorder_estimated_monthly_storage_fee,
			SUM( dw_report.byorder_long_term_storage_fee ) AS byorder_long_term_storage_fee,
			SUM( dw_report.byorder_reserved_field16 ) AS byorder_reserved_field16,
			SUM( dw_report.byorder_reserved_field10 ) AS byorder_reserved_field10,
			SUM( dw_report.byorder_cpc_cost ) AS byorder_cpc_cost,
			SUM( dw_report.byorder_cpc_sd_cost ) AS byorder_cpc_sd_cost,
			SUM( dw_report.byorder_reserved_field1 ) AS byorder_reserved_field1,
			SUM( dw_report.byorder_reserved_field2 ) AS byorder_reserved_field2,
			SUM( dw_report.byorder_cpc_sd_clicks ) AS byorder_cpc_sd_clicks,
			SUM( dw_report.byorder_cpc_sp_clicks ) AS byorder_cpc_sp_clicks,
			SUM( dw_report.byorder_sp_attributedconversions7d ) AS byorder_sp_attributedconversions7d,
			SUM( dw_report.byorder_sd_attributedconversions7d ) AS byorder_sd_attributedconversions7d,
			SUM( dw_report.byorder_sp_attributedsales7d ) AS byorder_sp_attributedsales7d,
			SUM( dw_report.byorder_sd_attributedsales7d ) AS byorder_sd_attributedsales7d,
			SUM( dw_report.byorder_sd_attributedconversions7dsamesku ) AS byorder_sd_attributedconversions7dsamesku,
			SUM( dw_report.byorder_sp_attributedconversions7dsamesku ) AS byorder_sp_attributedconversions7dsamesku,
			SUM( dw_report.byorder_sd_attributedsales7dsamesku ) AS byorder_sd_attributedsales7dsamesku,
			SUM( dw_report.byorder_sp_attributedsales7dsamesku ) AS byorder_sp_attributedsales7dsamesku,
			SUM( dw_report.byorder_number_of_visits * dw_report.byorder_buy_button_winning_rate/100 ) AS byorder_buy_button_winning_num,
			SUM( dw_report.byorder_return_and_return_commission ) AS byorder_return_and_return_commission,
			SUM( dw_report.byorder_reserved_field17 ) AS byorder_reserved_field17,
			SUM( dw_report.byorder_order_quantity ) AS byorder_order_quantity,
			SUM( dw_report.byorder_reserved_field21 ) AS byorder_reserved_field21,
			SUM( dw_report.byorder_fba_sales_volume ) AS byorder_fba_sales_volume,
			SUM( dw_report.byorder_fbm_sales_volume ) AS byorder_fbm_sales_volume,
			SUM( dw_report.byorder_fba_refund_num ) AS byorder_fba_refund_num,
			SUM( dw_report.byorder_fbm_refund_num ) AS byorder_fbm_refund_num,
			SUM( dw_report.byorder_fba_logistics_head_course ) AS byorder_fba_logistics_head_course,
			SUM(  dw_report.byorder_fba_sales_quota) AS byorder_fba_sales_quota,
			SUM( dw_report.byorder_fbm_sales_quota) AS byorder_fbm_sales_quota,
			SUM( dw_report.byorder_fba_refund ) AS byorder_fba_refund,
			SUM( dw_report.byorder_fbm_refund) AS byorder_fbm_refund,
			SUM( dw_report.byorder_tax ) AS byorder_tax,
			SUM( dw_report.byorder_ware_house_lost ) AS byorder_ware_house_lost,
			SUM( dw_report.byorder_ware_house_damage ) AS byorder_ware_house_damage,
			SUM( dw_report.byorder_shipping_charge ) AS byorder_shipping_charge,
			SUM( dw_report.byorder_customer_damage ) AS byorder_customer_damage,
			SUM( dw_report.byorder_removal_order_lost ) AS byorder_removal_order_lost,
			SUM( dw_report.byorder_incorrect_fees_items ) AS byorder_incorrect_fees_items,
			SUM( dw_report.byorder_missing_from_inbound ) AS byorder_missing_from_inbound,
			SUM( dw_report.byorder_multichannel_order_lost ) AS byorder_multichannel_order_lost,
			SUM( dw_report.byorder_removal_fee ) AS byorder_removal_fee,
			SUM( dw_report.byorder_gift_wrap ) AS byorder_gift_wrap,
			SUM( dw_report.report_sales_volume ) AS report_sales_volume,
			SUM( dw_report.report_group_id ) AS report_group_id,
			SUM( dw_report.report_sales_quota ) AS report_sales_quota,
			SUM( dw_report.report_refund_num ) AS report_refund_num,
			SUM( dw_report.report_refund ) AS report_refund,
			SUM( dw_report.report_promote_discount ) AS report_promote_discount,
			SUM( dw_report.report_refund_promote_discount ) AS report_refund_promote_discount,
			SUM( dw_report.report_purchasing_cost ) AS report_purchasing_cost,
			SUM( dw_report.report_logistics_head_course ) AS report_logistics_head_course,
			SUM( dw_report.report_goods_profit ) AS report_goods_profit,
			SUM( dw_report.report_goods_amazon_fee ) AS report_goods_amazon_fee,
			SUM( dw_report.report_platform_sales_commission ) AS report_platform_sales_commission,
			SUM( dw_report.report_fba_generation_delivery_cost ) AS report_fba_generation_delivery_cost,
			SUM( dw_report.report_fbaperorderfulfillmentfee ) AS report_fbaperorderfulfillmentfee,
			SUM( dw_report.report_fbaweightbasedfee ) AS report_fbaweightbasedfee,
			SUM( dw_report.report_profit ) AS report_profit,
			SUM( dw_report.report_order_variableclosingfee ) AS report_order_variableclosingfee,
			SUM( dw_report.report_fixedclosingfee ) AS report_fixedclosingfee,
			SUM( dw_report.report_refund_variableclosingfee ) AS report_refund_variableclosingfee,
			SUM( dw_report.report_goods_amazon_other_fee ) AS report_goods_amazon_other_fee,
			SUM( dw_report.report_returnshipping ) AS report_returnshipping,
			SUM( dw_report.report_return_and_return_sales_commission ) AS report_return_and_return_sales_commission,
			SUM( dw_report.report_fba_refund_treatment_fee ) AS report_fba_refund_treatment_fee,
			SUM( dw_report.report_fbacustomerreturnperorderfee ) AS report_fbacustomerreturnperorderfee,
			SUM( dw_report.report_fbacustomerreturnweightbasedfee ) AS report_fbacustomerreturnweightbasedfee,
			SUM( dw_report.report_estimated_monthly_storage_fee ) AS report_estimated_monthly_storage_fee,
			SUM( dw_report.report_long_term_storage_fee ) AS report_long_term_storage_fee,
			SUM( dw_report.report_reserved_field16 ) AS report_reserved_field16,
			SUM( dw_report.report_reserved_field10 ) AS report_reserved_field10,
			SUM( dw_report.report_cpc_cost ) AS report_cpc_cost,
			SUM( dw_report.report_cpc_sd_cost ) AS report_cpc_sd_cost,
			SUM( dw_report.report_reserved_field1 ) AS report_reserved_field1,
			SUM( dw_report.report_reserved_field2 ) AS report_reserved_field2,
			SUM( dw_report.report_cpc_sd_clicks ) AS report_cpc_sd_clicks,
			SUM( dw_report.report_cpc_sp_clicks ) AS report_cpc_sp_clicks,
			SUM( dw_report.report_sp_attributedconversions7d ) AS report_sp_attributedconversions7d,
			SUM( dw_report.report_sd_attributedconversions7d ) AS report_sd_attributedconversions7d,
			SUM( dw_report.report_sp_attributedsales7d ) AS report_sp_attributedsales7d,
			SUM( dw_report.report_sd_attributedsales7d ) AS report_sd_attributedsales7d,
			SUM( dw_report.report_sd_attributedconversions7dsamesku ) AS report_sd_attributedconversions7dsamesku,
			SUM( dw_report.report_sp_attributedconversions7dsamesku ) AS report_sp_attributedconversions7dsamesku,
			SUM( dw_report.report_sd_attributedsales7dsamesku ) AS report_sd_attributedsales7dsamesku,
			SUM( dw_report.report_sp_attributedsales7dsamesku ) AS report_sp_attributedsales7dsamesku,
			SUM( dw_report.report_return_and_return_commission ) AS report_return_and_return_commission,
			SUM( dw_report.report_reserved_field17 ) AS report_reserved_field17,
			SUM( dw_report.report_order_quantity ) AS report_order_quantity,
			SUM( dw_report.report_reserved_field21 ) AS report_reserved_field21,
			SUM( dw_report.report_fba_sales_volume ) AS report_fba_sales_volume,
			SUM( dw_report.report_fbm_sales_volume) AS report_fbm_sales_volume,
			SUM( dw_report.report_fba_refund_num ) AS report_fba_refund_num,
			SUM( dw_report.report_fbm_refund_num ) AS report_fbm_refund_num,
			SUM( dw_report.report_fba_logistics_head_course ) AS report_fba_logistics_head_course,
			SUM( dw_report.report_fba_sales_quota) AS report_fba_sales_quota,
			SUM( dw_report.report_fbm_sales_quota) AS report_fbm_sales_quota,
			SUM( dw_report.report_fba_refund) AS report_fba_refund,
			SUM( dw_report.report_fbm_refund ) AS report_fbm_refund,
			SUM( dw_report.report_tax ) AS report_tax,
			SUM( dw_report.report_ware_house_lost ) AS report_ware_house_lost,
			SUM( dw_report.report_ware_house_damage ) AS report_ware_house_damage,
			SUM( dw_report.report_shipping_charge ) AS report_shipping_charge,
			SUM( dw_report.report_customer_damage ) AS report_customer_damage,
			SUM( dw_report.report_removal_order_lost ) AS report_removal_order_lost,
			SUM( dw_report.report_incorrect_fees_items ) AS report_incorrect_fees_items,
			SUM( dw_report.report_missing_from_inbound ) AS report_missing_from_inbound,
			SUM( dw_report.report_multichannel_order_lost ) AS report_multichannel_order_lost,
			SUM( dw_report.report_removal_fee ) AS report_removal_fee,
			SUM( dw_report.report_gift_wrap ) AS report_gift_wrap,
			SUM( dw_report.byorder_fbm_logistics_head_course) AS byorder_fbm_logistics_head_course,
			SUM( dw_report.report_fbm_logistics_head_course) AS report_fbm_logistics_head_course,
			SUM( dw_report.byorderitem_evaluation_nums) AS byorderitem_evaluation_nums,
			SUM( dw_report.reportitem_evaluation_nums) AS reportitem_evaluation_nums,
			SUM( dw_report.byorderitem_reserved_field12) AS byorderitem_reserved_field12,
			SUM( dw_report.reportitem_reserved_field12) AS reportitem_reserved_field12,
			SUM( dw_report.byorderitem_reserved_field13) AS byorderitem_reserved_field13,
			SUM( dw_report.reportitem_reserved_field13) AS reportitem_reserved_field13,
			SUM( dw_report.byorder_lost_num) AS byorder_lost_num,
			SUM( dw_report.report_lost_num) AS report_lost_num,
			SUM( dw_report.byorder_damage_num) AS byorder_damage_num,
			SUM( dw_report.report_damage_num) AS report_damage_num,
			SUM( dw_report.byorder_cpc_sb_sales_quota) AS byorder_cpc_sb_sales_quota,
			SUM( dw_report.report_cpc_sb_sales_quota) AS report_cpc_sb_sales_quota,
			SUM( dw_report.byorder_cpc_sb_cost) AS byorder_cpc_sb_cost,
			SUM( dw_report.report_cpc_sb_cost) AS report_cpc_sb_cost,
			SUM( dw_report.byorder_refund_rate) AS byorder_refund_rate,
			SUM( dw_report.report_refund_rate) AS report_refund_rate,
			SUM( dw_report.byorder_profit_margin) AS byorder_profit_margin,
			SUM( dw_report.report_profit_margin) AS report_profit_margin,			
			amazon_goods.goods_channel_id AS channel_id ,
			max(dw_report.myear) as myear ,
			max(dw_report.mmonth) as mmonth,
			{$goods_other_field}
			amazon_goods.goods_operation_user_admin_id,
			max(dw_report.create_time) as create_time,
			max(dw_report.user_id) as user_id,
			max(dw_report.site_id) as site_id,
			max(amazon_goods.channel_goods_operation_pattern) as goods_operation_pattern
		FROM
			{$goods_table}
			WHERE
		{$where_dw_report_amazon_goods}
		GROUP BY
			{$goods_group}
			) AS goods {$goods_month_table}
			full JOIN
		    {$channel_table}

) AS report ";

        return $table;

    }



    /**
     * 获取运营人员table
     * @author json.qiu 2021/05/31
     *
     * @param $datas
     * @param $ym_where  //ym条件
     * @param string $table_type //店铺类型，day,week,month
     * @param array $operation_table_field //运营关联字段
     * @return string  返回table
     */
    public function operationNewIndexTable($datas,$ym_where,$table_type = "day",$operation_table_field = array()){

        $create_time_tmp = str_replace("site_id",'dw_report.byorder_site_id',$datas['origin_time']);
        $where_dw_report_amazon_goods = "dw_report.user_id = {$datas['user_id']} AND dw_report.user_id_mod = ".$this->dws_user_id_mod
            ." AND dw_report.channel_id IN (".$datas['operation_channel_ids'].") "
            ." AND amazon_goods.goods_user_id = {$datas['user_id']} AND amazon_goods.goods_user_id_mod = ".($datas['user_id'] % 20)." AND  amazon_goods.goods_operation_user_admin_id > 0  "." AND amazon_goods.goods_channel_id IN (".$datas['operation_channel_ids'].") ";
        $where_ym = " AND ".str_replace("report.",'dw_report.',$ym_where);
        $where_dw_report_amazon_goods .= " ".str_replace("create_time",'dw_report.create_time',$create_time_tmp);


        $channel_field = "(channel.operation_user_admin_id) as operation_user_admin_id,channel_id,myear,mmonth,mquarter,(dw_report.site_id) as site_id,(dw_report.user_id) as user_id,bychannel_create_time";


        $where_channel = "dw_report.user_id = {$datas['user_id']} AND channel.operation_user_admin_id > 0 AND dw_report.user_id_mod = ".$this->channel_user_id_mod." AND dw_report.channel_id IN (".$datas['operation_channel_ids'].") ".str_replace("create_time",'dw_report.create_time',$datas['origin_time'])." AND ".str_replace("report.",'dw_report.',$ym_where);
        $channel_table = "{$this->table_channel} as  channel  JOIN {$this->table_channel_day_report} as dw_report on channel.id  = dw_report.channel_id WHERE {$where_channel} ) AS bychannel ON goods.channel_id = bychannel.channel_id AND goods.myear = bychannel.myear AND goods.mmonth = bychannel.mmonth AND goods.mday = bychannel.mday AND goods.goods_operation_pattern != 1";
        $goods_group = "amazon_goods.goods_operation_user_admin_id,dw_report.channel_id,dw_report.myear,dw_report.mmonth,dw_report.mday";
        if ($table_type == 'week'){
            $channel_field.= ",mday,mweek, mweekyear";
            $goods_table = "{$this->table_dws_goods_day_report} AS dw_report
			Right JOIN {$this->table_goods_dim_report} AS amazon_goods ON dw_report.amazon_goods_id = amazon_goods.es_id";
            $goods_other_field = "max(dw_report.mday) as mday,max(dw_report.mweek) as mweek,max(dw_report.mweekyear) as mweekyear,";
            $report_other_field = "COALESCE(goods.mweek ,bychannel.mweek) AS mweek,COALESCE(goods.mweekyear ,bychannel.mweekyear) AS mweekyear,concat(cast(COALESCE(goods.goods_operation_user_admin_id ,bychannel.operation_user_admin_id) as varchar),'_',cast(COALESCE(goods.mweekyear ,bychannel.mweekyear) as varchar),'_',lpad(cast(COALESCE(goods.mweek ,bychannel.mweek) as varchar),2,'0')) as goods_operation_user_admin_id_group,";

        }
        elseif ($table_type == 'month'){
            $goods_table = "{$this->table_dws_goods_month_report} AS dw_report
			Right JOIN {$this->table_goods_dim_report} AS amazon_goods ON dw_report.amazon_goods_id = amazon_goods.es_id";
            $channel_table = "{$this->table_channel} as  channel  JOIN {$this->table_channel_month_report} as dw_report on channel.id  = dw_report.channel_id WHERE {$where_channel} ) AS bychannel ON goods.channel_id = bychannel.channel_id AND goods.myear = bychannel.myear AND goods.mmonth = bychannel.mmonth  AND goods.goods_operation_pattern != 1";
            $goods_other_field = "min(dw_report.mquarter) as mquarter,";
            $report_other_field = "COALESCE(goods.mquarter ,bychannel.mquarter) as mquarter,concat(cast(COALESCE(goods.goods_operation_user_admin_id ,bychannel.operation_user_admin_id) as varchar),'_',cast(COALESCE(goods.myear ,bychannel.myear) as  varchar),'_',lpad(cast(COALESCE(goods.mmonth ,bychannel.mmonth) as varchar),2,'0')) as goods_operation_user_admin_id_group,";
            $goods_group = "amazon_goods.goods_operation_user_admin_id,dw_report.channel_id,dw_report.myear,dw_report.mmonth";
        }
        else{
            $channel_field.= ",mday,mweek, mweekyear";
            $goods_table = "{$this->table_dws_goods_day_report} AS dw_report
			Right JOIN {$this->table_goods_dim_report} AS amazon_goods ON dw_report.amazon_goods_id = amazon_goods.es_id";



            $goods_other_field = "dw_report.mday as mday,";
            $report_other_field = "COALESCE(goods.mday ,bychannel.mday) AS mday,concat(cast(COALESCE(goods.goods_operation_user_admin_id ,bychannel.operation_user_admin_id) as  varchar),'_',cast(COALESCE(goods.myear ,bychannel.myear) as varchar),'_',lpad(cast(COALESCE(goods.mmonth ,bychannel.mmonth) as varchar),2,'0'),'_',lpad(cast(COALESCE(goods.mday ,bychannel.mday) as varchar),2,'0')) as goods_operation_user_admin_id_group,";

        }
        if (!empty($operation_table_field['channel_key'])){
            $operation_table_field['channel_key'] = array_unique($operation_table_field['channel_key']);
            foreach ($operation_table_field['channel_key'] as $channel_value){
                $report_other_field .= "COALESCE(bychannel.{$channel_value},0) as {$channel_value},";
                $channel_field .= ",(dw_report.{$channel_value}) as {$channel_value}";
            }
        }
        if (!empty($operation_table_field['goods_key'])){
            $operation_table_field['goods_key'] = array_unique($operation_table_field['goods_key']);
            foreach ($operation_table_field['goods_key'] as $goods_value){
                $report_other_field .= "COALESCE(goods.{$goods_value},0) as {$goods_value},";
                $goods_other_field .= "SUM(dw_report.{$goods_value}) as {$goods_value},";
            }
        }

        $where_dw_report_amazon_goods .= $where_ym." AND dw_report.available = 1 ";

        $table = " (SELECT ".
                        "COALESCE(goods.channel_id ,bychannel.channel_id) AS channel_id ,".
                        "COALESCE(goods.site_id ,bychannel.site_id) AS site_id ,".
                        "COALESCE(goods.user_id ,bychannel.user_id) AS user_id ,".
                        "COALESCE(goods.myear ,bychannel.myear) AS myear ,".
                        "COALESCE(goods.mmonth ,bychannel.mmonth) AS mmonth ,".
                        "COALESCE(goods.goods_operation_user_admin_id ,bychannel.operation_user_admin_id) AS goods_operation_user_admin_id ,".
                        "COALESCE(goods.create_time ,bychannel.bychannel_create_time) AS create_time ,".
                        "{$report_other_field}".
                        " COALESCE(goods.goods_operation_pattern ,2) AS goods_operation_pattern ".
                    "FROM ".
                        "(SELECT ".
                            "dw_report.channel_id AS channel_id ,".
                            "max(dw_report.user_id) as user_id,".
                            "max(dw_report.site_id) as site_id,".
                            "max(dw_report.myear) as myear ,".
                            "max(dw_report.mmonth) as mmonth,".
                            "{$goods_other_field}".
                            "amazon_goods.goods_operation_user_admin_id,".
                            "max(dw_report.create_time) as create_time,".
                            "max(amazon_goods.channel_goods_operation_pattern) as goods_operation_pattern".
                        " FROM ".
                        " {$goods_table} ".
                        " WHERE".
                        " {$where_dw_report_amazon_goods}".
                        "GROUP BY ".
                        "{$goods_group}".
                        ") AS goods ".
                        " full JOIN ".
                        " (SELECT ".
                            "{$channel_field} ".
                        " FROM {$channel_table} ".
                    ") AS report ";
        return $table;

    }
    /**
     * 是否读月报的数据
     * @param $datas
     * @return bool
     */
    public function is_month_table($datas){
        if (isset($datas['is_force_day_table']) && $datas['is_force_day_table'] == 1 && $datas['cost_count_type'] != 2){
            return false;
        }
        if($datas['count_periods'] == 3 || $datas['count_periods'] == 4 || $datas['count_periods'] == 5 ){
            return true;
        }else if($datas['cost_count_type'] == 2){//先进先出只能读取月报
            return true;
        }

        return false;
    }

    public function getSearchValWhere($where,$searchKey,$searchVal,$matchType){
        if(!empty($searchKey) && !empty($searchVal)){
            //匹配方式 ：eq -> 全匹配  like-模糊匹配
            if($searchKey == 'parent_asin'){
                if($matchType == 'eq'){
                    $where .= " AND report.goods_parent_asin = '" . $searchVal . "'" ;
                }else{
                    $where .= " AND report.goods_parent_asin like '%" . $searchVal . "%'" ;
                }
            }else if($searchKey == 'asin'){
                if($matchType == 'eq'){
                    $where .= " AND report.goods_asin = '" . $searchVal . "'" ;
                }else {
                    $where .= " AND report.goods_asin like '%" . $searchVal . "%'";
                }
            }else if($searchKey == 'sku'){
                if($matchType == 'eq'){
                    $where .= " AND report.goods_sku = '" . $searchVal . "'" ;
                }else {
                    $where .= " AND report.goods_sku like '%" . $searchVal . "%'";
                }
            }else if($searchKey == 'isku'){
                if($matchType == 'eq'){
                    $where .= " AND report.isku = '" . $searchVal . "'" ;
                }else {
                    $where .= " AND report.isku like '%" . $searchVal . "%'";
                }
            }else if($searchKey == 'site_group'){
                $where .= " AND report.area_id = " . intval($searchVal);
            }else if($searchKey == 'channel_id'){
                $where .= " AND report.channel_id = " . intval($searchVal);
            }else if($searchKey == 'site_id'){
                $where .= " AND report.site_id = " . intval($searchVal) ;
            }else if($searchKey == 'class1'){
                if($matchType == 'eq'){
                    $where .= " AND report.goods_product_category_name_1 = '" . $searchVal . "'" ;
                }else{
                    if (strpos($searchVal,'&') !== false){
                        $str_arr = explode("&",$searchVal);
                        foreach ($str_arr as $v){
                            $where .= " AND report.goods_product_category_name_1 like '%" . $v . "%'" ;
                        }
                    }else{
                        $where .= " AND report.goods_product_category_name_1 like '%" . $searchVal . "%'" ;

                    }
                }
            }else if($searchKey == 'group'){
                if($matchType == 'eq'){
                    $where .= " AND report.goods_group_name = '".$searchVal."' " ;
                }else{
                    $where .= " AND report.goods_group_name like '%".$searchVal."%' " ;
                }

            }else if($searchKey == 'tags'){
                if($matchType == 'eq'){
                    $where .= " AND gtags.tag_name = '".$searchVal."' " ;
                }else {
                    $where .= " AND gtags.tag_name like '%" . $searchVal . "%'";
                }
            }else if($searchKey == 'operators'){
                if($matchType == 'eq'){
                    $where .= " AND report.operation_user_admin_name = '" . $searchVal . "'" ;
                }else{
                    $where .= " AND report.operation_user_admin_name like '%" . $searchVal . "%'" ;
                }
            }else if($searchKey == 'title')
            {
                if($matchType == 'eq'){
                    $where .= " AND report.goods_title = '" . $searchVal . "'" ;
                }else {
                    $where .= " AND LOWER(report.goods_title) like '%" . strtolower($searchVal) . "%'";
                }
            }

        }
        return $where;
    }

    public function getGoodsViewsVisitRate($lists, $fields, $datas,$isMysql = false,$table = ''){
        if ((empty($fields['goods_views_rate']) && empty($fields['goods_buyer_visit_rate']))){
            return array();
        }

        $table = !empty($table)?$table: "{$this->table_dws_goods_day_report} AS report";
        $ym_where = $this->getYnWhere($datas['max_ym'],$datas['min_ym']);
        $where  = $ym_where . " AND  report.user_id_mod = " . $this->dws_user_id_mod ." AND " . $datas['user_sessions_where'].str_replace('create_time',"report.create_time",$datas['origin_time']);

        $total_user_sessions_views = array();

        if ($datas['count_periods'] == 0 && $datas['is_count'] == 0){//统计周期 无
//            if (!empty($fields['goods_views_rate']) || !empty($fields['goods_buyer_visit_rate'])){
//
//            }
            if($datas['is_distinct_channel'] == 1 && ($datas['count_dimension'] == 'sku' or $datas['count_dimension'] == 'asin' or $datas['count_dimension'] == 'parent_asin')){
                $total_user_sessions_views = $this->select($where, 'report.channel_id, SUM(report.byorder_user_sessions) as total_user_sessions,SUM(report.byorder_number_of_visits) as total_views_number', $table,'','',"report.channel_id",false,null,300,$isMysql);
                if (!empty($total_user_sessions_views)){
                    $total_user_sessions_views = array_column($total_user_sessions_views,null,'channel_id');
                }
            }else{
                $total_user_sessions_views = $this->get_one($where, 'SUM(report.byorder_user_sessions) as total_user_sessions,SUM(report.byorder_number_of_visits) as total_views_number', $table,'','',false,null,300,$isMysql);

            }

            return $total_user_sessions_views;
        }

        if ($datas['is_count'] == 1){
            return $total_user_sessions_views;
        }




        $rateFields = "report.channel_id, SUM(report.byorder_number_of_visits) as total_views_number, SUM(report.byorder_user_sessions) as total_user_sessions, report.myear, report.mmonth";
        $rateGroup = "report.channel_id, report.myear, report.mmonth";
        if ($datas['count_periods'] == 1)
        {
            if($datas['is_distinct_channel'] == 1 && ($datas['count_dimension'] == 'sku' or $datas['count_dimension'] == 'asin' or $datas['count_dimension'] == 'parent_asin')) {
                $rateFields = "report.channel_id, SUM(report.byorder_number_of_visits) as total_views_number, SUM(report.byorder_user_sessions) as total_user_sessions, report.myear, report.mmonth, report.mday";
                $rateGroup = "report.channel_id, report.myear, report.mmonth, report.mday";
            }else{
                $rateFields = "SUM(report.byorder_number_of_visits) as total_views_number, SUM(report.byorder_user_sessions) as total_user_sessions, report.myear, report.mmonth, report.mday";
                $rateGroup = "report.myear, report.mmonth, report.mday";
            }
        }elseif ($datas['count_periods'] == 2){
            if($datas['is_distinct_channel'] == 1 && ($datas['count_dimension'] == 'sku' or $datas['count_dimension'] == 'asin' or $datas['count_dimension'] == 'parent_asin')) {
                $rateFields = "report.channel_id, SUM(report.byorder_number_of_visits) as total_views_number, SUM(report.byorder_user_sessions) as total_user_sessions, report.myear, report.mweek";
                $rateGroup = "report.channel_id, report.myear, report.mweek";
            }else{
                $rateFields = "SUM(report.byorder_number_of_visits) as total_views_number, SUM(report.byorder_user_sessions) as total_user_sessions, report.myear, report.mweek";
                $rateGroup = "report.myear, report.mweek";
            }
        }elseif ($datas['count_periods'] == 3) {
            //月
            if ($datas['is_distinct_channel'] == 1 && ($datas['count_dimension'] == 'sku' or $datas['count_dimension'] == 'asin' or $datas['count_dimension'] == 'parent_asin')) {
                $rateFields = "report.channel_id, SUM(report.byorder_number_of_visits) as total_views_number, SUM(report.byorder_user_sessions) as total_user_sessions, report.myear, report.mmonth";
                $rateGroup = "report.channel_id, report.myear, report.mmonth";
            }else {
                $rateFields = "SUM(report.byorder_number_of_visits) as total_views_number, SUM(report.byorder_user_sessions) as total_user_sessions, report.myear, report.mmonth";
                $rateGroup = "report.myear, report.mmonth";
            }
        }elseif ($datas['count_periods'] == 4) {
            //季
            if ($datas['is_distinct_channel'] == 1 && ($datas['count_dimension'] == 'sku' or $datas['count_dimension'] == 'asin' or $datas['count_dimension'] == 'parent_asin')) {
                $rateFields = "report.channel_id, SUM(report.byorder_number_of_visits) as total_views_number, SUM(report.byorder_user_sessions) as total_user_sessions, report.myear, report.mquarter";
                $rateGroup = "report.channel_id, report.myear, report.mquarter";
            }else {
                $rateFields = "SUM(report.byorder_number_of_visits) as total_views_number, SUM(report.byorder_user_sessions) as total_user_sessions, report.myear, report.mquarter";
                $rateGroup = "report.myear, report.mquarter";
            }
        }elseif ($datas['count_periods'] == 5) {
            //年
            if ($datas['is_distinct_channel'] == 1 && ($datas['count_dimension'] == 'sku' or $datas['count_dimension'] == 'asin' or $datas['count_dimension'] == 'parent_asin')) {
                $rateFields = "report.channel_id, SUM(report.byorder_number_of_visits) as total_views_number, SUM(report.byorder_user_sessions) as total_user_sessions, report.myear";
                $rateGroup = "report.channel_id, report.myear";
            }else {
                $rateFields = "SUM(report.byorder_number_of_visits) as total_views_number, SUM(report.byorder_user_sessions) as total_user_sessions, report.myear";
                $rateGroup = "report.myear";
            }
        }
        //缓存
        $cache_key = md5($where.$datas['count_periods'].$datas['count_dimension'].$datas['is_distinct_channel']);
        $redis = new Redis();
        $total_numbers = $redis->get($cache_key);
        if(empty($total_numbers)){
            $total_numbers = $this->select($where, $rateFields, $table, '', '', $rateGroup);
            $redis->set($cache_key, $total_numbers, 300);
        }
        if (!empty($total_numbers)) {
            $map = [];
            if($datas['is_distinct_channel'] == 1 && ($datas['count_dimension'] == 'sku' or $datas['count_dimension'] == 'asin' or $datas['count_dimension'] == 'parent_asin')) {
                foreach ($total_numbers as $val) {
                    switch ($datas['count_periods']){
                        case 1:
                            $k = "{$val['myear']}-{$val['mmonth']}-{$val['mday']}";
                            break;
                        case 2:
                            $k = "{$val['myear']}-{$val['mweek']}";
                            break;
                        case 3:
                            $k = "{$val['myear']}-{$val['mmonth']}";
                            break;
                        case 4:
                            $k = "{$val['myear']}-{$val['mquarter']}";
                            break;
                        case 5:
                            $k = "{$val['myear']}";
                            break;
                        default:
                            $k = "{$val['myear']}-{$val['mmonth']}-{$val['mday']}";
                            break;
                    }
                    $map[$val['channel_id']][$k] = [
                        'total_views_number' => $val['total_views_number'],
                        'total_user_sessions' => $val['total_user_sessions']
                    ];
                }

                return $map;
                foreach ($lists as $key => $val){
                    if (!empty($fields['goods_views_rate'])){
                        if (!empty($map[$val['channel_id']][$val['time']]['total_views_number'])){
                            $val['goods_views_rate'] = $val['goods_views_number'] / $map[$val['channel_id']][$val['time']]['total_views_number'];
                        }else{
                            $val['goods_views_rate'] = 0;
                        }
                    }

                    if (!empty($fields['goods_buyer_visit_rate'])){
                        if (!empty($map[$val['channel_id']][$val['time']]['total_user_sessions'])){
                            $val['goods_buyer_visit_rate'] = $val['goods_visitors'] / $map[$val['channel_id']][$val['time']]['total_user_sessions'];
                        }else{
                            $val['goods_buyer_visit_rate'] = 0;
                        }
                    }
                    $lists[$key] = $val;
                }
            }else{
                foreach ($total_numbers as $val) {
                    switch ($datas['count_periods']){
                        case 1:
                            $k = "{$val['myear']}-{$val['mmonth']}-{$val['mday']}";
                            break;
                        case 2:
                            $k = "{$val['myear']}-{$val['mweek']}";
                            break;
                        case 3:
                            $k = "{$val['myear']}-{$val['mmonth']}";
                            break;
                        case 4:
                            $k = "{$val['myear']}-{$val['mquarter']}";
                            break;
                        case 5:
                            $k = "{$val['myear']}";
                            break;
                        default:
                            $k = "{$val['myear']}-{$val['mmonth']}-{$val['mday']}";
                            break;
                    }
                    $map[$k] = [
                        'total_views_number' => $val['total_views_number'],
                        'total_user_sessions' => $val['total_user_sessions']
                    ];
                }
                return $map;
                foreach ($lists as $key => $val){
                    if (!empty($fields['goods_views_rate'])){
                        if (!empty($map[$val['time']]['total_views_number'])){
                            $val['goods_views_rate'] = $val['goods_views_number'] / $map[$val['time']]['total_views_number'];
                        }else{
                            $val['goods_views_rate'] = 0;
                        }
                    }

                    if (!empty($fields['goods_buyer_visit_rate'])){
                        if (!empty($map[$val['time']]['total_user_sessions'])){
                            $val['goods_buyer_visit_rate'] = $val['goods_visitors'] / $map[$val['time']]['total_user_sessions'];
                        }else{
                            $val['goods_buyer_visit_rate'] = 0;
                        }
                    }
                    $lists[$key] = $val;
                }
            }
        }else{
            foreach ($lists as $key => $val){
                if (!empty($fields['goods_views_rate'])){
                    $val['goods_views_rate'] = 0;
                }
                if (!empty($fields['goods_buyer_visit_rate'])){
                    $val['goods_buyer_visit_rate'] = 0;
                }
                $lists[$key] = $val;
            }
        }

        return $lists;
    }

    /**
     * 获取中位数
     * @param string $targets
     * @param string $origin_sql
     * @param bool $isMysql
     * @return array
     */
    public function getMedianValue($datas = array(),$origin_sql = "",$isCache = null,$cacheTTL = 300,$isMysql = false){
        $lists = array();
        $targets = !empty($datas['median_target']) ? $datas['median_target'] : '';
        if(!empty($targets) && !empty($origin_sql)){
            $targets = explode(',', $targets);
            $sql = "with origin_table as ({$origin_sql}),";
            $n = 1;
            foreach ($targets as $target){
                $sql .= "table{$n} as (select {$target},row_number() over(order by {$target}) num,count(*) over() cnt from origin_table),
                    total_table{$n} as (select avg({$target}) as {$target} from table{$n} where if(cnt%2=0,num in (cnt/2,cnt/2+1),num=(cnt+1)/2)),";
                $n++;
            }
            $sql = rtrim($sql,",");
            $fields_tmp = "";
            $tables_tmp = "";
            for($i = 1;$i < $n;$i++){
                $fields_tmp .= "total_table{$i}.*,";
                $tables_tmp .= "total_table{$i},";
            }
            $fields_tmp = rtrim($fields_tmp,",");
            $tables_tmp = rtrim($tables_tmp,",");
            $sql .= "select {$fields_tmp} from {$tables_tmp}";
            $lists = $this->query($sql, [], $isCache, $cacheTTL, $isMysql,$this->isUseTmpTable,$this->isReadTmpTable);
            $logger = ApplicationContext::getContainer()->get(LoggerFactory::class)->get('dataark', 'debug');
            $logger->info('getListByGoods Total Request', [$this->getLastSql()]);
        }
        return $lists;
    }

    /**
     * 处理返回结果
     * @param $lists
     * @param $datas
     * @return mixed
     */
    private function handleReturnGoodsList($lists ,$datas,$fields,$total_user_sessions_views){
        if (empty($lists)){
            return array();
        }

        foreach ($lists as $key => $list){
            if (  $datas['show_type'] == 2 && $datas['sort_target'] != 'goods_views_rate' && $datas['sort_target'] != 'goods_buyer_visit_rate' && $datas['force_sort'] != 'goods_views_rate' && $datas['force_sort'] != 'goods_buyer_visit_rate' && !$datas['is_use_goods_view_sort'] && $datas['is_median'] != 1){

                if (!empty($fields['goods_buyer_visit_rate'])){
                    $lists[$key]['goods_buyer_visit_rate'] = 0;
                }
                if (!empty($fields['goods_views_rate'])){
                    $lists[$key]['goods_views_rate'] = 0;
                }
            }

            if (!empty($total_user_sessions_views)){
                if ($datas['count_periods'] == 0){
                    if ($datas['is_distinct_channel'] == 1 && ($datas['count_dimension'] == 'sku' or $datas['count_dimension'] == 'asin' or $datas['count_dimension'] == 'parent_asin')){
                        if (!empty($fields['goods_buyer_visit_rate']) && isset($total_user_sessions_views[$list['channel_id']]) && $total_user_sessions_views[$list['channel_id']]['total_user_sessions'] > 0){
                            $lists[$key]['goods_buyer_visit_rate'] = round($lists[$key]['goods_visitors']/$total_user_sessions_views[$list['channel_id']]['total_user_sessions'],4);
                        }

                        if (!empty($fields['goods_views_rate']) && isset($total_user_sessions_views[$list['channel_id']]) && $total_user_sessions_views[$list['channel_id']]['total_views_number'] > 0){
                            $lists[$key]['goods_views_rate'] = round($lists[$key]['goods_views_number']/$total_user_sessions_views[$list['channel_id']]['total_views_number'],4);
                        }
                    }else{
                        if (!empty($fields['goods_buyer_visit_rate']) && isset($total_user_sessions_views['total_user_sessions']) && $total_user_sessions_views['total_user_sessions'] > 0){
                            $lists[$key]['goods_buyer_visit_rate'] = round($lists[$key]['goods_visitors']/$total_user_sessions_views['total_user_sessions'],4);
                        }

                        if (!empty($fields['goods_views_rate']) && isset($total_user_sessions_views['total_views_number']) && $total_user_sessions_views['total_views_number'] > 0){
                            $lists[$key]['goods_views_rate'] = round($lists[$key]['goods_views_number']/$total_user_sessions_views['total_views_number'],4);
                        }
                    }
                }else{

                    if ($datas['is_distinct_channel'] == 1 && ($datas['count_dimension'] == 'sku' or $datas['count_dimension'] == 'asin' or $datas['count_dimension'] == 'parent_asin')){
                        if (!empty($fields['goods_views_rate'])){
                            if (!empty($total_user_sessions_views[$list['channel_id']][$list['time']]['total_views_number'])){
                                $lists[$key]['goods_views_rate'] = $list['goods_views_number'] / $total_user_sessions_views[$list['channel_id']][$list['time']]['total_views_number'];
                            }else{
                                $lists[$key]['goods_views_rate'] = 0;
                            }
                        }

                        if (!empty($fields['goods_buyer_visit_rate'])){
                            if (!empty($total_user_sessions_views[$list['channel_id']][$list['time']]['total_user_sessions'])){
                                $lists[$key]['goods_buyer_visit_rate'] = $list['goods_visitors'] / $total_user_sessions_views[$list['channel_id']][$list['time']]['total_user_sessions'];
                            }else{
                                $lists[$key]['goods_buyer_visit_rate'] = 0;
                            }
                        }
                    }else{
                        if (!empty($fields['goods_views_rate'])){
                            if (!empty($total_user_sessions_views[$list['time']]['total_views_number'])){
                                $lists[$key]['goods_views_rate'] = $list['goods_views_number'] / $total_user_sessions_views[$list['time']]['total_views_number'];
                            }else{
                                $lists[$key]['goods_views_rate'] = 0;
                            }
                        }

                        if (!empty($fields['goods_buyer_visit_rate'])){
                            if (!empty($total_user_sessions_views[$list['time']]['total_user_sessions'])){
                                $lists[$key]['goods_buyer_visit_rate'] = $list['goods_visitors'] / $total_user_sessions_views[$list['time']]['total_user_sessions'];
                            }else{
                                $lists[$key]['goods_buyer_visit_rate'] = 0;
                            }
                        }

                    }

                }

            }



        }

        return $lists;
    }

    /**
     * 新指标读取数据库
     * @param array $params
     * @param array $fields
     * @param array $targets
     * @param int $field_type 类型，1是商品级，2是店铺级，3是运营人员级别
     * @param bool $isMysql
     * @return array
     */
    private function handleNewIndexField($params = array(),$fields = array(),$targets= array(),$field_type = 1,$isMysql = false){


        if ($params['currency_code'] == 'ORIGIN') {
            $rate = "";
        } else {
            $rate = " * ({:RATE} / COALESCE(rates.rate ,1))";
        }
        $field_type_arr  = array(
            1 => 'goods_sql_key',
            2 => 'channel_sql_key',
            3 => 'operators_sql_key',
        );
        $operation_table_field = array(
            "goods_key"     => array(),
            "channel_key"   => array(),
        );
        if (!isset($field_type_arr[$field_type])){
            return ["fields" => array(),"operation_table_field" => $operation_table_field];
        }
        $field_type_key = $field_type_arr[$field_type];

        $field = $this->getFieldFromSql($params ,$isMysql);
        foreach ($field as $key => $value){//处理查询某个字段需要额外查询的字段
            if (in_array($key,$targets) ){
                if (!empty($value['search_quote_goods_id_arr']) && $field_type == 1){
                    $targets = array_merge($targets,$value['search_quote_goods_id_arr']);
                }

                if (!empty($value['search_quote_channels_id_arr']) && $field_type == 2){
                    $targets = array_merge($targets,$value['search_quote_channels_id_arr']);
                }

                if (!empty($value['search_quote_operate_id_arr']) && $field_type == 3){
                    $targets = array_merge($targets,$value['search_quote_operate_id_arr']);
                }
            }
        }

        //erp库存指标
        $erp_isku_fields_arr = config('common.erp_isku_fields_arr');
        $erp_report_fields_arr = config('common.erp_report_fields_arr');
        $erp_isku_function = $params['is_count'] == 1 ? 'SUM' : 'max';
        $erp_report_function = $params['is_count'] == 1 ? 'SUM' : 'max';
        //FBA库存指标
        $fba_fields_common_arr = $field_type == 1 ? array_keys(config('common.goods_fba_fields_arr')) : array_keys(config('common.channel_fba_fields_arr'));

        //把占比指标转为原指标
        $array_intersect = array_intersect($targets,array_column($this->finance_index_percentage_arr,'return_field_key'));
        if (!empty($array_intersect)){
            $add_targets                = explode(',',str_replace("_rate","",implode(",",$array_intersect)));
            $add_targets[]              = "sale_sales_quota";//由于要分母是销量和销售额，因此查询这两个字段
            $add_targets[]              = "sale_sales_volume";
            $this->add_percentage_arr   = $array_intersect;
            $targets                    = array_diff($targets,$array_intersect);
            $targets                    = array_merge($targets,$add_targets);
        }

        $cost_logistics = $this->handleNexIndexCostLogisticsField($params);
        $targets = array_unique($targets);
        foreach ($field as $key => $value){
            if (!isset($value[$field_type_key])){
                continue;
            }
            if (in_array($key,$targets)){
                //fba指标的跳出去，单独处理
                if($params['is_new_index'] == 1 && $params['stock_datas_origin'] == 1 && in_array($key,$fba_fields_common_arr)){
                    continue;
                }
                $field_rate = $value['format_type'] == 4 ? $rate : "";
                //店铺
                if(in_array($key,['sale_channel_month_goal','gross_profit_channel_month_goal','gross_margin_channel_month_goal'])){
                    $this->countDimensionChannel = true;
                }
                if($value['is_goods_key'] == 1 && $value['goods_key_from'] == 5){
                    if(in_array($key,['goods_min_rank','goods_rank'])){
                        $fields[$key] = "MAX(nullif((".implode("",$value[$field_type_key]['molecule'])."),0))";
                    }else{
                        $fields[$key] = "MAX((".implode("",$value[$field_type_key]['molecule'])."){$field_rate})";
                    }
                }else{
                    if ($value['format_type'] == 3 or $key == 'cpc_avg_click_cost'){//百分比判断是否需要转货币
                        $field_molecule_rate    = $value['is_molecule_money'] == 1 ? $rate : "";
                        $field_denominator_rate = $value['is_denominator_money'] == 1 ? $rate : "";
                        if ($field_type == 3){//运营人员需要兼容case when
                            $fields[$key] = $this->getOperateNewKey($value,$field_type_key,$field_molecule_rate,$field_denominator_rate);
                        }else{
                            if (in_array($key, ["cost_profit_profit","cost_profit_profit_rate","cost_profit_total_pay"])){
                                $molecule = implode("",$value[$field_type_key]['molecule']).$cost_logistics['purchase_logistics_compensate'];
                                $fields[$key] = "(SUM(({$molecule}){$field_molecule_rate}){$cost_logistics['purchase_logistics_origin']})";

                            }else{
                                $molecule = implode("",$value[$field_type_key]['molecule']);
                                $fields[$key] = "SUM(({$molecule}){$field_molecule_rate})";

                            }
                            if (!empty($value[$field_type_key]['denominator'])){
                                $fields[$key] .= "*1.0000/nullif(SUM((".implode("",$value[$field_type_key]['denominator'])."){$field_denominator_rate}),0)";
                            }
                        }

                    }else{
                        if ($field_type == 3){//运营人员需要兼容case when
                            $fields[$key] = $this->getOperateNewKey($value,$field_type_key,$field_rate,$field_rate);
                        }else{
                            if (isset($cost_logistics[$key])){
                                $fields[$key] = $cost_logistics[$key];
                            }elseif (in_array($key, ["cost_profit_profit","cost_profit_profit_rate","cost_profit_total_pay"])){
                                $fields[$key] = "(SUM((".implode("",$value[$field_type_key]['molecule'])."{$cost_logistics['purchase_logistics_compensate']}){$field_rate}){$cost_logistics['purchase_logistics_origin']})";
                            } else{
                                $fields[$key] = "SUM((".implode("",$value[$field_type_key]['molecule'])."){$field_rate})";
                            }

                            if (!empty($value[$field_type_key]['denominator'])){
                                $fields[$key] .= "*1.0000/nullif(SUM((".implode("",$value[$field_type_key]['denominator'])."){$field_rate}),0)";
                            }
                        }

                    }

                }
                if ($field_type == 3){
                    if (!empty($value[$field_type_key]['goods_key'])){
                        $operation_table_field['goods_key'] = array_merge($operation_table_field['goods_key'],$value[$field_type_key]['goods_key']);
                    }
                    if (!empty($value[$field_type_key]['channel_key'])){
                        $operation_table_field['channel_key'] = array_merge($operation_table_field['channel_key'],$value[$field_type_key]['channel_key']);
                    }
                }

                if ($this->haveErpIskuFields){
                    if (isset($erp_isku_fields_arr[$key]) && !($params['count_dimension'] == 'sku' && $params['is_count'] == 1)){
                        $temp_erp_format_type = isset($erp_isku_fields_arr[$key]['format_type']) ?? 0;

                        if ($temp_erp_format_type == 4 && $params['currency_code'] != 'CNY'){
                            $fields[$key] = "{$erp_isku_function}(warehouse_isku.{$key} * {:ERP_RATE})";
                        }else{
                            $fields[$key] = "{$erp_isku_function}(warehouse_isku.{$key})";
                        }
                    }
                }
                if ($this->haveErpReportFields){
                    if (isset($erp_report_fields_arr[$key]) && !($params['count_dimension'] == 'sku' && $params['is_count'] == 1)){
                        $temp_erp_format_type = isset($erp_report_fields_arr[$key]['format_type']) ?? 0;

                        if (in_array($key, ['erp_period_start_goods_cost_begin', 'erp_period_end_goods_cost_end']))
                        {
                            if ($params['currency_code'] != 'CNY'){
                                $fields["min_{$key}"] = "min(warehouse_storage.{$key}_min * {:RATE})";
                                $fields["max_{$key}"] = "max(warehouse_storage.{$key}_max * {:RATE})";
                            }else{
                                $fields["min_{$key}"] = "min(warehouse_storage.{$key}_min)";
                                $fields["max_{$key}"] = "max(warehouse_storage.{$key}_max)";
                            }
                            $fields[$key] = "SUM(warehouse_storage.{$key})";
                        }
                        elseif ($key == 'erp_period_current_stock_rate')
                        {
                            $fields[$key] = "max(warehouse_storage.{$key})";
                        }else{
                            if ($temp_erp_format_type == 4 && $params['currency_code'] != 'CNY'){
                                $fields[$key] = "{$erp_report_function}(warehouse_storage.{$key} * {:RATE})";
                            }else{
                                $fields[$key] = "{$erp_report_function}(warehouse_storage.{$key})";
                            }
                        }
                    }
                }
            }
        }
        return ["fields" =>$fields,"operation_table_field" => $operation_table_field];
    }

    /**
     * @param $value
     * @param $field_type_key
     * @param $field_molecule_rate
     * @param $field_denominator_rate
     * @return string
     */
    private function getOperateNewKey($value,$field_type_key,$field_molecule_rate,$field_denominator_rate){
        $molecule = isset($value[$field_type_key]['molecule']['un_case'])?("(".implode("",$value[$field_type_key]['molecule']['un_case']).")$field_molecule_rate"):'';
        if (isset($value[$field_type_key]['molecule']['case'])) {
            $case = "( CASE WHEN report.goods_operation_pattern = 1 THEN ".implode("",$value[$field_type_key]['molecule']['case'])." ELSE 0 END ){$field_molecule_rate}";
            $molecule .= empty($molecule)?$case:("+{$case}");
        }
        $return_key = "SUM({$molecule})";
        if (!empty($value[$field_type_key]['denominator']['un_case']) or !empty($value[$field_type_key]['denominator']['case'])){
            $denominator = isset($value[$field_type_key]['denominator']['un_case'])?("(".implode("",$value[$field_type_key]['denominator']['un_case'])."){$field_denominator_rate}"):'';
            if (isset($value[$field_type_key]['denominator']['case'])) {
                $case = "( CASE WHEN report.goods_operation_pattern = 1 THEN ".implode("",$value[$field_type_key]['denominator']['case'])." ELSE 0 END ){$field_denominator_rate}";
                $denominator .= empty($denominator)?$case:("+{$case}");
            }
            $return_key .= "*1.0000/nullif(SUM(({$denominator})),0)";
        }
        return $return_key;
    }

    /**
     * @param $value
     * @param $field_type_key
     * @param $field_molecule_rate
     * @param $field_denominator_rate
     * @return array
     */
    private function getOperateNewTimeKey($value,$field_type_key,$field_molecule_rate,$field_denominator_rate){
        $molecule = isset($value[$field_type_key]['molecule']['un_case'])?("(".implode("",$value[$field_type_key]['molecule']['un_case'])."){$field_molecule_rate}"):'';
        if (isset($value[$field_type_key]['molecule']['case'])) {
            $case = "( CASE WHEN report.goods_operation_pattern = 1 THEN ".implode("",$value[$field_type_key]['molecule']['case'])." ELSE 0 END ){$field_molecule_rate}";
            $molecule .= empty($molecule)?$case:("+{$case}");
        }
        $count_total = "SUM({$molecule})";
        $denominator = "";
        if (!empty($value[$field_type_key]['denominator']['un_case']) or !empty($value[$field_type_key]['denominator']['case'])){
            $denominator = isset($value[$field_type_key]['denominator']['un_case'])?("(".implode("",$value[$field_type_key]['denominator']['un_case'])."){$field_denominator_rate}"):'';
            if (isset($value[$field_type_key]['denominator']['case'])) {
                $case = "( CASE WHEN report.goods_operation_pattern = 1 THEN ".implode("",$value[$field_type_key]['denominator']['case'])." ELSE 0 END ){$field_denominator_rate}";
                $denominator .= empty($denominator)?$case:("+{$case}");
            }
            $count_total .= "*1.0000/nullif(SUM(({$denominator}){$field_denominator_rate}),0)";
            $denominator = "({$denominator}){$field_denominator_rate}";
        }
        return array(
            "molecule"      => $molecule,
            "count_total"   => $count_total,
            "denominator"   => $denominator,
        );
    }

    /**
     * 新指标读取数据库
     * @param array $params
     * @param array $fields
     * @param string $targets
     * @param int $field_type 类型，1是商品级，2是店铺级，3是运营人员级别
     * @param bool $isMysql
     * @return array
     */
    private function handleNewIndexTimeField($params = array(),$fields = array(),$targets= '',$field_type = 1,$isMysql = false){


        if ($params['currency_code'] == 'ORIGIN') {
            $rate = "";
        } else {
            $rate = " * ({:RATE} / COALESCE(rates.rate ,1))";
        }
        $field_type_arr  = array(
            1 => 'goods_sql_key',
            2 => 'channel_sql_key',
            3 => 'operators_sql_key',
        );
        if (!isset($field_type_arr[$field_type])){
            return [];
        }
        $operation_table_field = array(
            "goods_key"     => array(),
            "channel_key"   => array(),
        );
        $field_type_key = $field_type_arr[$field_type];

        $field = $this->getFieldFromSql($params ,$isMysql);
        $count_total = $denominator = $molecule = '';
        if (isset($field[$targets])){
            $this->time_periods_field['key'] = $targets;
            $field_rate =  $field[$targets]['format_type'] == 4 ? $rate : "";

            //店铺
            if(in_array($targets,['sale_channel_month_goal','gross_profit_channel_month_goal','gross_margin_channel_month_goal'])){
                $this->countDimensionChannel = true;
            }
            if ($field[$targets]['format_type'] == 3 or $targets == 'cpc_avg_click_cost'){
                $field_molecule_rate    = $field[$targets]['is_molecule_money'] == 1 ? $rate : "";
                $field_denominator_rate = $field[$targets]['is_denominator_money'] == 1 ? $rate : "";
                if ($field_type == 3){
                    $key_arr = $this->getOperateNewTimeKey($field[$targets],$field_type_key,$field_molecule_rate,$field_denominator_rate);
                    $count_total = $key_arr['count_total'];
                    $denominator = $key_arr['denominator'];
                    $molecule    = $key_arr['molecule'];
                }else{
                    $molecule = "(" . implode("", $field[$targets][$field_type_key]['molecule']) . "){$field_molecule_rate}";

                    $count_total = "SUM({$molecule})";
                    if (!empty($field[$targets][$field_type_key]['denominator'])){
                        $count_total .= "*1.0000/nullif(SUM((".implode("",$field[$targets][$field_type_key]['denominator'])."){$field_denominator_rate}),0)";
                        $denominator = "(".implode("",$field[$targets][$field_type_key]['denominator'])."){$field_denominator_rate}";

                    }
                }


            }else{
                if ($field_type == 3){
                    $key_arr = $this->getOperateNewTimeKey($field[$targets],$field_type_key,$field_rate,$field_rate);
                    $count_total = $key_arr['count_total'];
                    $denominator = $key_arr['denominator'];
                    $molecule    = $key_arr['molecule'];
                }else{
                    $molecule = "(" . implode("", $field[$targets][$field_type_key]['molecule']) . "){$field_rate}";
                    $count_total = "SUM({$molecule})";
                    if (!empty($field[$targets][$field_type_key]['denominator'])){
                        $count_total .= "*1.0000/nullif(SUM((".implode("",$field[$targets][$field_type_key]['denominator'])."){$field_rate}),0)";
                        $denominator = "(".implode("",$field[$targets][$field_type_key]['denominator'])."){$field_rate}";
                    }
                }

            }

            if ($field_type == 3){//运营人员需要读取的字段
                if (!empty($field[$targets][$field_type_key]['goods_key'])){
                    $operation_table_field['goods_key'] = array_merge($operation_table_field['goods_key'],$field[$targets][$field_type_key]['goods_key']);
                }
                if (!empty($field[$targets][$field_type_key]['channel_key'])){
                    $operation_table_field['channel_key'] = array_merge($operation_table_field['channel_key'],$field[$targets][$field_type_key]['channel_key']);
                }
            }

        }
        $this->time_periods_field['molecule']       = str_replace($rate,"",$molecule);
        $this->time_periods_field['denominator']    = str_replace($rate,"",$denominator);;
        return ['count_total' => $count_total,'molecule' => $molecule,'denominator' => $denominator,'operation_table_field'=>$operation_table_field];
    }



    private function recursion($array,$quote_finance_index_id){

        if (isset($array[$quote_finance_index_id]['quote'])){

            foreach ($array[$quote_finance_index_id]['quote'] as &$value){
                $quote_common =  $this->recursion($array,$value['quote_finance_index_id']);
                if (!empty($quote_common)){
                    foreach ($quote_common as &$v){//重置是否相加和分母
                        $v['is_add']            = $value['is_add'] == $v['is_add'] ? $v['is_add'] : 0;
                        $v['is_denominator']    = $value['is_denominator'] == $v['is_denominator'] ? $v['is_denominator'] : 0;
                    }
                }
                if (!empty($value['common'])){
                    $value['common'] = array_merge($value['common'],$quote_common);
                }else{
                    $value['common'] = $quote_common;
                }
            }
            unset($array[$quote_finance_index_id]['quote']);

        }

        return ($array[$quote_finance_index_id]['common'])??array();

    }
    /**
     * 从数据库获取指标
     * @param array $params
     * @param bool $isMysql
     * @return array
     */
    private function getFieldFromSql($params = array(),$isMysql = false){
        $mysql_fields   = $this->getFieldFromCache();
        $finance_index  = $mysql_fields['finance_index'];
        $sql_key_arr    = $mysql_fields['sql_key_arr'];
        $sql_key = array();
        $is_need_monthly_storage_fee = $this->getIsNeedMonthlyStorageFee($params);
        $is_month_table = $this->is_month_table($params);
        $repair_data = array();
        if ($params['finance_datas_origin'] == '1') {
            if ($params['refund_datas_origin'] == '2') {
//                $repair_data .= " + report.byorder_refund - report.report_refund ";reportitem_sales_refund
                $repair_data[] = array(
                    "sql_field_key"                 => "byorderitem_sales_refund",
                    "goods_month_sql_field_key"     => "",
                    "fifo_sql_field_key"            => "",
                    "is_add"                        => 0,
                    "fifo_is_add"                   => 1,
                    "is_goods_key"                  => 1,
                    "is_channel_key"                => 1,
                    "is_operate_key"                => 1,
                    "goods_key_from"                => 3,
                    "data_origin"                   => 3,
                    "is_denominator"                => 0,
                    "is_need_monthly_storage_fee"   => 0,
                    "is_remove_tax"                 => 0,
                    "is_month_field"                => 0,
                );
                $repair_data[] = array(
                    "sql_field_key"                 => "reportitem_sales_refund",
                    "goods_month_sql_field_key"     => "",
                    "fifo_sql_field_key"            => "",
                    "is_add"                        => 1,
                    "fifo_is_add"                   => 1,
                    "is_goods_key"                  => 1,
                    "is_channel_key"                => 1,
                    "is_operate_key"                => 1,
                    "goods_key_from"                => 3,
                    "data_origin"                   => 3,
                    "is_denominator"                => 0,
                    "is_need_monthly_storage_fee"   => 0,
                    "is_remove_tax"                 => 0,
                    "is_month_field"                => 0,
                );
            }
        }
        else {
            if ($params['refund_datas_origin'] == '1') {
//                $repair_data .= " + report.report_refund - report.byorder_refund ";
                $repair_data[] = array(
                    "sql_field_key"                 => "reportitem_sales_refund",
                    "goods_month_sql_field_key"     => "",
                    "fifo_sql_field_key"            => "",
                    "is_add"                        => 0,
                    "fifo_is_add"                   => 1,
                    "is_goods_key"                  => 1,
                    "is_channel_key"                => 1,
                    "is_operate_key"                => 1,
                    "goods_key_from"                => 3,
                    "data_origin"                   => 3,
                    "is_denominator"                => 0,
                    "is_need_monthly_storage_fee"   => 0,
                    "is_remove_tax"                 => 0,
                    "is_month_field"                => 0,
                );
                $repair_data[] = array(
                    "sql_field_key"                 => "byorderitem_sales_refund",
                    "goods_month_sql_field_key"     => "",
                    "fifo_sql_field_key"            => "",
                    "is_add"                        => 1,
                    "fifo_is_add"                   => 1,
                    "is_goods_key"                  => 1,
                    "is_channel_key"                => 1,
                    "is_operate_key"                => 1,
                    "goods_key_from"                => 3,
                    "data_origin"                   => 3,
                    "is_denominator"                => 0,
                    "is_need_monthly_storage_fee"   => 0,
                    "is_remove_tax"                 => 0,
                    "is_month_field"                => 0,
                );
            }
        }
        foreach ($sql_key_arr as $value){
            if ($value['quote_finance_index_id']>0){
                $sql_key[$value['finance_index_id']]['quote'][] = $value;
            }else{
                $sql_key[$value['finance_index_id']]['common'][] = $value;
            }
        }

        foreach ($sql_key as $k=> &$value1){
            if (isset($value1['quote']) && !empty($value1['quote'])){
                foreach ($value1['quote'] as $item){

                    $quote_common = $this->recursion($sql_key,$item['quote_finance_index_id']);
                    if (!empty($quote_common)){
                        foreach ($quote_common as  $key => $v){//重置是否相加和分母
                            $quote_common[$key]['is_add']            = $item['is_add'] == $v['is_add'] ? $v['is_add'] : 0;
                            $quote_common[$key]['is_denominator']    = $item['is_denominator'] == $v['is_denominator'] ? $v['is_denominator'] : 1;
                            if ($item['fifo_sql_field_key'] == -1){//-1代表该字段无线使用先进先出
                                $quote_common[$key]['fifo_sql_field_key'] = -1;
                            }
                        }
                    }
                    if (!empty($value1['common'])){
                        $value1['common'] = array_merge($value1['common'],$quote_common);
                    }else{
                        $value1['common'] = $quote_common;
                    }
                }

                unset($value1['quote']);
            }

        }
        if (!empty($repair_data)){
            foreach ($sql_key as $k=> $sql_key_value){
                if (in_array($k,[1,198,86,87,106])){

                    $sql_key[$k]['common'] = array_merge($sql_key_value['common'],$repair_data);

                }
            }
        }
        $field = array();
        foreach ($sql_key as $sql_field_key => $item){

            foreach ($item['common'] as $value){
                $is_add = '+';
                if ($value['is_add'] == 0){
                    $is_add = '-';
                }
                $return_field_key = isset($finance_index[$sql_field_key])?$finance_index[$sql_field_key]['return_field_key']:'';
                if (empty($return_field_key)){
                    continue;
                }
                if (!$is_month_table && $value['is_month_field'] == 1){
                    continue;
                }
                $is_denominator = $value['is_denominator'] == 1?'denominator':'molecule';
//                $field[$return_field_key]['is_money']      = $finance_index[$sql_field_key]['format_type'] == 4?1:0;
                $field[$return_field_key]['is_molecule_money']      = $finance_index[$sql_field_key]['is_molecule_money'];
                $field[$return_field_key]['is_denominator_money']      = $finance_index[$sql_field_key]['is_denominator_money'];
                $field[$return_field_key]['format_type']      = $finance_index[$sql_field_key]['format_type'];
//                $field[$return_field_key]['return_field_key']      = $finance_index[$sql_field_key]['return_field_key'];
                $field[$return_field_key]['is_goods_key'] = $value['is_goods_key'];
                $field[$return_field_key]['goods_key_from'] = $value['goods_key_from'];
                $field[$return_field_key]['search_quote_goods_id_arr'] = array();
                $field[$return_field_key]['search_quote_channels_id_arr'] = array();
                $field[$return_field_key]['search_quote_operate_id_arr'] = array();
                if (!empty($finance_index[$sql_field_key]['search_quote_goods_id'])){
                    foreach (explode(',',$finance_index[$sql_field_key]['search_quote_goods_id']) as $search_quote_id_val){
                        if (isset($finance_index[$search_quote_id_val])){
                            $field[$return_field_key]['search_quote_goods_id_arr'][] = $finance_index[$search_quote_id_val]['return_field_key'];
                        }
                    }
                }
                if (!empty($finance_index[$sql_field_key]['search_quote_channels_id'])){
                    foreach (explode(',',$finance_index[$sql_field_key]['search_quote_channels_id']) as $search_quote_id_val){
                        if (isset($finance_index[$search_quote_id_val])){
                            $field[$return_field_key]['search_quote_channels_id_arr'][] = $finance_index[$search_quote_id_val]['return_field_key'];
                        }
                    }
                }
                if (!empty($finance_index[$sql_field_key]['search_quote_operate_id'])){
                    foreach (explode(',',$finance_index[$sql_field_key]['search_quote_operate_id']) as $search_quote_id_val){
                        if (isset($finance_index[$search_quote_id_val])){
                            $field[$return_field_key]['search_quote_operate_id_arr'][] = $finance_index[$search_quote_id_val]['return_field_key'];
                        }
                    }
                }
                $key = $value['sql_field_key'];
                $is_un_use = $key == -1 ? 1:0;
                if ($value['is_goods_key'] == 1){//商品相关字段
                    $data_origin = "";
                    if ($value['data_origin'] == 1){
                        $data_origin = "sale";
                    }elseif($value['data_origin'] == 2){
                        $data_origin = "refund";
                    }elseif ($value['data_origin'] == 3){
                        $data_origin = "finance";
                    }
//                    $params["{$data_origin}_datas_origin"] = 2;
                    if (isset($params["{$data_origin}_datas_origin"]) && $params["{$data_origin}_datas_origin"] == 1){
                        if ($value['goods_key_from'] == 1){
                            $key = "byorder_".$key;
                        }elseif ($value['goods_key_from'] == 2){
                            $key = "byorderitem_".$key;
                        }
                    }elseif(isset($params["{$data_origin}_datas_origin"]) && $params["{$data_origin}_datas_origin"] == 2){
                        if ($value['goods_key_from'] == 1){
                            $key = "report_".$key;
                        }elseif ($value['goods_key_from'] == 2){
                            $key = "reportitem_".$key;
                        }
                    }

                    //商品
                    if ($value['goods_key_from'] == 5){
                        //商品需读取dim字段
                        $key = "amazon_goods.".$key;
                    }

                }
                if ($value['goods_key_from'] == 4){
                    //月报时需读取得字段
                    $key = "monthly_profit.".$key;
                }
                if ($params['cost_count_type'] == 2){

                    if (!empty($value['fifo_sql_field_key'])){
                        if ($value['fifo_is_add'] == 1){
                            $is_add = '+';
                        }else{
                            $is_add = '-';
                        }
                        if ($value['fifo_sql_field_key'] == -1){//-1表示不需要该字段的先进先出
                            continue;
                        }
                        $key = $value['fifo_sql_field_key'];
                    }

                }else{
                    if ($is_un_use){
                        continue;
                    }
                }
                if ($value["is_need_monthly_storage_fee"] == 1 && $is_need_monthly_storage_fee){
                    if ($key == "report_estimated_monthly_storage_fee"){
                        $key = "monthly_sku_estimated_monthly_storage_fee";
                    }else{
                        $key = " - report_estimated_monthly_storage_fee + monthly_sku_estimated_monthly_storage_fee";
                    }
                }
                $key_tmp = $key;
                if ($value['is_remove_tax']==1){
                    $key .= $this->tax_field;
                }
                if ($value['is_goods_key'] == 1){
                    $field[$return_field_key]['goods_sql_key'][$is_denominator][] = empty($field[$return_field_key]['goods_sql_key'][$is_denominator])?($is_add=='-'?"(0{$is_add}{$key})":$key):($is_add.$key);
                }
                if ($value['is_channel_key'] == 1){
                    $field[$return_field_key]['channel_sql_key'][$is_denominator][] = empty($field[$return_field_key]['channel_sql_key'][$is_denominator])?($is_add=='-'?"(0{$is_add}{$key})":$key):($is_add.$key);
                }
                if ($value['is_operate_key'] == 1){
                    $field[$return_field_key]['operators_sql_key'][$is_denominator][] = empty($field[$return_field_key]['operators_sql_key'][$is_denominator])?($is_add=='-'?"(0{$is_add}{$key})":$key):($is_add.$key);
                    if ($value['is_goods_key'] == 1 && $value['is_channel_key']  == 0){
                        $field[$return_field_key]['operators_sql_key'][$is_denominator]['case'][] = empty($field[$return_field_key]['operators_sql_key'][$is_denominator]['case'])?($is_add=='-'?"(0{$is_add}{$key})":$key):($is_add.$key);
                    }else{
                        $field[$return_field_key]['operators_sql_key'][$is_denominator]['un_case'][] = empty($field[$return_field_key]['operators_sql_key'][$is_denominator]['un_case'])?($is_add=='-'?"(0{$is_add}{$key})":$key):($is_add.$key);
                    }

                    if ($value['is_goods_key'] == 1 && $key!=1){
                        if ($value['is_remove_tax']==1){
                            $field[$return_field_key]['operators_sql_key']['goods_key'][] = $key_tmp;
                            $field[$return_field_key]['operators_sql_key']['goods_key'][] = "report_tax";
                            $field[$return_field_key]['operators_sql_key']['goods_key'][] = "byorder_tax";
                        }else{
                            $field[$return_field_key]['operators_sql_key']['goods_key'][] = $key;
                        }
                    }
                    if ($value['is_channel_key'] == 1 && $value['is_goods_key'] == 0 && $key!=1){
                        $field[$return_field_key]['operators_sql_key']['channel_key'][] = $key;
                    }

                }
            }
        }
        return $field;
    }

    private function getIsNeedMonthlyStorageFee($datas){
        $is_month_table = $this->is_month_table($datas);
        if (!$is_month_table){
            return false;
        }
        if ($datas['finance_datas_origin'] == '2'){
            return true;
        }
        return false;
    }

    /**
     * function compareDataSql 获取行业增长值/率sql
     * @param int $category_level 类目层级 1-一级类目 2-二级类目 3-三级类目
     * @param int $day_type 时间类型 1-昨天 2-近7天 3-近30天 4-近15天
     * @param int $top_num
     * @param int $target_type 查询指标类型 1-销量 2-销售额
     * @param int $data_type 取值类型 1-取平均值 2-取临界节点值 3-取总量
     * @param int $result_type 获取数据类型 1-增量 2-增速
     * @param float $exchangeCode 人民币转站点币汇率
     * @author: LWZ
     */

    public function compareDataSql($category_level = 3 , $day_type = 1 ,  $target_type = 1 ,$top_num = 25  , $data_type = 1 ,$result_type = 1 ,$exchangeCode = 1.0){
        $category_name_target = "";
        if($category_level == '1'){
            $table = $this->table_dws_idm_category01_topn_kpi ;
            $on = "category_table_{$target_type}_1.site_id = category_table_{$target_type}_2.site_id AND category_table_{$target_type}_1.product_category_name_1 = category_table_{$target_type}_2.product_category_name_1" ;
            $result_field = "category_table_{$target_type}_1.site_id, category_table_{$target_type}_1.product_category_name_1 as goods_product_category_name_1" ;
            $category_name_target = ",product_category_name_1";
        }else if($category_level == '2'){
            $table = $this->table_dws_idm_category02_topn_kpi ;
            $on = "category_table_{$target_type}_1.site_id = category_table_{$target_type}_2.site_id AND category_table_{$target_type}_1.product_category_name_1 = category_table_{$target_type}_2.product_category_name_1 AND category_table_{$target_type}_1.product_category_name_2 = category_table_{$target_type}_2.product_category_name_2" ;
            $result_field = "category_table_{$target_type}_1.site_id , category_table_{$target_type}_1.product_category_name_1 as goods_product_category_name_1, category_table_{$target_type}_1.product_category_name_2 as goods_product_category_name_2" ;
            $category_name_target = ",product_category_name_1,product_category_name_2";
        }else if($category_level == '3'){
            $table = $this->table_dws_idm_category03_topn_kpi ;
            $on = "category_table_{$target_type}_1.site_id = category_table_{$target_type}_2.site_id AND category_table_{$target_type}_1.product_category_name_1 = category_table_{$target_type}_2.product_category_name_1 AND category_table_{$target_type}_1.product_category_name_2 = category_table_{$target_type}_2.product_category_name_2 AND category_table_{$target_type}_1.product_category_name_3 = category_table_{$target_type}_2.product_category_name_3" ;
            $result_field = "category_table_{$target_type}_1.site_id , category_table_{$target_type}_1.product_category_name_1 as goods_product_category_name_1, category_table_{$target_type}_1.product_category_name_2 as goods_product_category_name_2, category_table_{$target_type}_1.product_category_name_3 as goods_product_category_name_3" ;
            $category_name_target = ",product_category_name_1,product_category_name_2,product_category_name_3";
        }

        $origin_where =  "dt = '" . date('Y-m-d' , strtotime("-2 day")) ."'" ;
        if($day_type == '1'){
            $compare_where =  "dt = '" . date('Y-m-d' , strtotime("-2 day") - 1 * 24* 3600 ) ."'" ;
            if($data_type == '1'){//取平均值
                $target = '01day_top'.$top_num."_avg" ;
            }elseif($data_type == '2'){  //取临界节点点值
                $target = '01day_critical_top'.$top_num ;
            }else{ //取总值
                $target = '01day_top'.$top_num ;
            }
        }else if($day_type == '2' ){
            $compare_where =  "dt = '" . date('Y-m-d' , strtotime("-2 day") - 7 * 24* 3600 ) ."'" ;
            if($data_type == '1'){//取平均值
                $target = '07day_top'.$top_num."_avg" ;
            }elseif($data_type == '2'){  //取临界节点点值
                $target = '07day_critical_top'.$top_num ;
            }else{ //取总值
                $target = '07day_top'.$top_num ;
            }
        }else if($day_type == '3'){
            $compare_where =  "dt = '" . date('Y-m-d' , strtotime("-2 day") - 30 * 24* 3600 ) ."'" ;
            if($data_type == '1'){//取平均值
                $target = '30day_top'.$top_num."_avg" ;
            }elseif($data_type == '2'){  //取临界节点点值
                $target = '30day_critical_top'.$top_num ;
            }else{  //取总值
                $target = '30day_top'.$top_num ;
            }
        }else if($day_type == '4'){
            $compare_where =  "dt = '" . date('Y-m-d' , strtotime("-2 day") - 30 * 24* 3600 ) ."'" ;
            if($data_type == '1'){//取平均值
                $target = '15day_top'.$top_num."_avg" ;
            }elseif($data_type == '2'){  //取临界节点点值
                $target = '15day_critical_top'.$top_num ;
            }else{  //取总值
                $target = '15day_top'.$top_num ;
            }
        }
        //目前只提供美国站服装、3C、家居三大类目
        $limit_category_where = " AND product_category_name_1 IN ('Clothing, Shoes & Jewelry','Electronics','Home & Kitchen')";

        if($target_type == '1'){
            $target = 'sales_volume_' . $target . ' AS sales_volume';
            if($result_type == '1'){
                $result_field.= " , ( CASE WHEN COALESCE ( category_table_{$target_type}_1.sales_volume, 0 ) = COALESCE ( category_table_{$target_type}_2.sales_volume, 0 ) THEN 0 ELSE ( CASE WHEN COALESCE ( category_table_{$target_type}_1.sales_volume, 0 ) = 0 THEN -category_table_{$target_type}_2.sales_volume ELSE ( CASE WHEN COALESCE ( category_table_{$target_type}_2.sales_volume, 0 ) = 0 THEN category_table_{$target_type}_1.sales_volume ELSE ( category_table_{$target_type}_1.sales_volume - category_table_{$target_type}_2.sales_volume ) END ) END ) END ) AS category_result_data " ;
            }else{
                $result_field.= " , ( CASE WHEN COALESCE ( category_table_{$target_type}_1.sales_volume, 0 ) = COALESCE ( category_table_{$target_type}_2.sales_volume, 0 ) THEN 0 ELSE ( CASE WHEN COALESCE ( category_table_{$target_type}_1.sales_volume, 0 ) = 0 THEN -1 ELSE ( CASE WHEN COALESCE ( category_table_{$target_type}_2.sales_volume, 0 ) = 0 THEN 1 ELSE ( category_table_{$target_type}_1.sales_volume - category_table_{$target_type}_2.sales_volume ) * 1.0000 / nullif(category_table_{$target_type}_2.sales_volume,0) END ) END ) END ) AS category_result_data " ;
            }
        }else if($target_type == '2'){
            $target = 'sales_quota_'.$target.' * {:RATE} * 1.0000 AS sales_quota' ;
            if($result_type == '1'){
                $result_field.= " , ( CASE WHEN COALESCE ( category_table_{$target_type}_1.sales_quota, 0 ) = COALESCE ( category_table_{$target_type}_2.sales_quota, 0 ) THEN 0 ELSE ( CASE WHEN COALESCE ( category_table_{$target_type}_1.sales_quota, 0 ) = 0 THEN -category_table_{$target_type}_2.sales_quota ELSE ( CASE WHEN COALESCE ( category_table_{$target_type}_2.sales_quota, 0 ) = 0 THEN category_table_{$target_type}_1.sales_quota ELSE ( category_table_{$target_type}_1.sales_quota - category_table_{$target_type}_2.sales_quota ) END ) END ) END ) AS category_result_data " ;
            }else{
                $result_field.= " , ( CASE WHEN COALESCE ( category_table_{$target_type}_1.sales_quota, 0 ) = COALESCE ( category_table_{$target_type}_2.sales_quota, 0 ) THEN 0 ELSE ( CASE WHEN COALESCE ( category_table_{$target_type}_1.sales_quota, 0 ) = 0 THEN -1 ELSE ( CASE WHEN COALESCE ( category_table_{$target_type}_2.sales_quota, 0 ) = 0 THEN 1 ELSE ( category_table_{$target_type}_1.sales_quota - category_table_{$target_type}_2.sales_quota ) * 1.0000 / nullif(category_table_{$target_type}_2.sales_quota,0) END ) END ) END ) AS category_result_data " ;
            }
        }
        $target = str_replace("{:RATE}", $exchangeCode, $target);
        $sql = " WITH category_table_{$target_type}_1 AS (SELECT {$target} , site_id {$category_name_target} FROM {$table} WHERE {$origin_where} {$limit_category_where} ) ,
        category_table_{$target_type}_2 AS (SELECT {$target} , site_id {$category_name_target} FROM {$table} WHERE {$compare_where} {$limit_category_where} ) 
        SELECT {$result_field} FROM category_table_{$target_type}_1 LEFT JOIN category_table_{$target_type}_2 ON {$on} 
        " ;
        return $sql ;

    }

    private function getUserIdMod($user_id){
        return ($user_id % 20);
    }

    public function getFieldFromCache(){
        $redis = new Redis();
        $mysql_fields = $redis->get("mysql_finance_fields_new");
        $index_cache = config("misc.index_cache",true);
        if (!$index_cache){
            $mysql_fields = array();
        }
        if (!is_array($mysql_fields) or empty($mysql_fields)){
            $finance_index = FinanceIndexModel::get()->toArray();
            $finance_index = array_column($finance_index,null,'id');
            $finance_index_arr              = array();
            $finance_index_percentage_arr   = array();
            foreach ($finance_index as $key => $index){
                if ($index['is_percentage_field'] == 1){
                    $finance_index_percentage_arr[$key] = $index;
                }else{
                    $finance_index_arr[$key] = $index;
                }
            }
            $sql_key_arr = FinanceIndexAssociatedSqlKeyModel::get()->toArray();
            $mysql_fields['finance_index'] = $finance_index_arr;
            $mysql_fields['finance_index_percentage_arr'] = $finance_index_percentage_arr;
            $mysql_fields['sql_key_arr'] = $sql_key_arr;
            if ($index_cache){
                $redis->set("mysql_finance_fields_new",$mysql_fields);
            }
        }
        $finance_index = $mysql_fields['finance_index'];
        $sql_key_arr = $mysql_fields['sql_key_arr'];
        $finance_index_percentage_arr = $mysql_fields['finance_index_percentage_arr'];
        $this->finance_index_percentage_arr = array_column($finance_index_percentage_arr,null,'return_field_key');

        return ["finance_index" => $finance_index,"sql_key_arr"=>$sql_key_arr,"finance_index_percentage_arr" => $finance_index_percentage_arr];
    }

    public function getOriginOrderBy($sort_target,$order_field = '',$datas = array()){
        $redis = new Redis();
        $origin_order_array = $redis->get("finance_index_data");
        if (!is_array($origin_order_array) or empty($origin_order_array)){
            $origin_order_array = FinanceIndexModel::whereIn("format_type",[4])->get()->toArray();
            $origin_order_array = array_column($origin_order_array,"return_field_key");
            $old_field_arr      = array("avg_sales_quota","sale_refund","promote_discount","promote_refund_discount","amazon_fee","amazon_sales_commission","amazon_settlement_fee","amazon_other_fee","amazon_return_shipping_fee","amazon_return_sale_commission","amazon_fba_return_processing_fee","cpc_acos","cpc_sales_quota","cost_profit_total_income","cost_profit_total_pay","cost_profit_profit","purchase_purchase_cost_unit");
            $origin_order_array = array_merge($origin_order_array,$old_field_arr);
            $redis->set("finance_index_data",$origin_order_array);
        }
        if (isset($datas['show_type']) && $datas['show_type'] != 2 && isset($datas['time_target'])) {
            $order_field = $datas['time_target'];
        }

//        $fields[$datas['sort_target']]
        if ($order_field == 'avg_sales_quota'){//上面分母是金额下面分子是数量的情况
            $order_field_arr = explode("/",$sort_target);
            $order_by = array();
            foreach ($order_field_arr as $key =>  $order_val){
                if(strpos(strtolower($order_val),'sum') !== false and strpos(strtolower($sort_target),'try(') === false and $key == 0){
                    $order_by_tmp = str_replace("SUM","",$order_val);
                    $order_by_tmp = str_replace("sum","",$order_by_tmp);
                    $order_by[]   = "SUM(".$order_by_tmp."/ COALESCE(rates.rate ,1)".")";
                }else{
                    $order_by[]   = $order_val;
                }

            }
            $sort_target      = implode("/",$order_by);
        }else{
            $order_field_arr = explode("/",$sort_target);
            if (!empty($order_field_arr) and in_array($order_field,$origin_order_array)){
                $order_by = array();
                foreach ($order_field_arr as $key =>  $order_val){
                    if(strpos(strtolower($order_val),'sum') !== false and strpos(strtolower($sort_target),'try(') === false){
                        $order_by_tmp = str_replace("SUM","",$order_val);
                        $order_by_tmp = str_replace("sum","",$order_by_tmp);
                        $order_by[]   = "SUM(".$order_by_tmp."/ COALESCE(rates.rate ,1)".")";
                    }else{
                        $order_by[]   = $order_val;
                    }

                }
                $sort_target      = implode("/",$order_by);
            }
        }


        return $sort_target;
    }

    protected function joinGoodsFbaTable($datas = array() , $channel_arr = array() , $currencyInfo = array(),$exchangeCode = '1', $custom_fba_target_key = array())
    {

        if($this->haveFbaFields == false || $datas['is_median'] == 1){
            //没有选择fba指标
            return [];
        }
        //有指标筛选 ， FBA 无法汇总
        if($datas['is_count'] == 1 && !empty($datas['where_detail']['target'])){
            return [];
        }
        if($datas['count_dimension'] == 'all_goods' ){
            //非sku区分店铺总计
            return [];
        }
        //按周期排序添加
        $child_table = $fba_data_join = array();
        $fba_data = [
            'child_table' => [],
            'other_field' => "",
            'join' => "",
            'where' => "",
            'order' => "",
            'fba_fields' => "",
        ];
        $where = " WHERE g.user_id = " . intval($datas['user_id']) ." AND g.is_parent=0 AND g.db_num = '{$this->dbhost}'";
        $channel_where = " WHERE c_tmp.user_id = " . intval($datas['user_id']);
        if (!empty($channel_arr)){
            if (count($channel_arr)==1){
                $where .= " AND g.channel_id = ".intval(implode(",",$channel_arr));
                $channel_where .= " AND c_tmp.id = ".intval(implode(",",$channel_arr));
            }else{
                $where .= " AND g.channel_id IN (".implode(",",$channel_arr).")";
                $channel_where .= " AND c_tmp.id IN (".implode(",",$channel_arr).")";
            }
        }
        $where .= " AND g.id > 0 AND g.is_delete = 0" ;
        $rate_table = $rel_table =  $origin_field = "";
        if($datas['currency_code'] != 'ORIGIN' || !empty(array_intersect(['fba_yjzhz','fba_glhz', 'fba_total_ltsf','fba_ltsf_6_12','fba_ltsf_12','fba_ccf','fba_ccf_every','fba_glccf'],$this->lastTargets))){
            $rate_table = $this->leftJoinCurrentMonthRate($rate_table,$datas,$currencyInfo);

        }

        $fbaArr = config('common.goods_fba_fields_arr');
        if(!empty($this->lastTargets)){
            foreach ($this->lastTargets as $target_key){
                if(!empty($fbaArr[$target_key]['rel_field_status'])){
                    $rel_table .= "LEFT JOIN {$this->table_amazon_fba_inventory_v3_rel} as rel ON g.id = rel.inventory_id AND g.channel_id = rel.channel_id AND rel.db_num = '{$this->dbhost}'";
                    break;
                }
            }
        }
        $child_table[] = [
            'table_name' => 'channel_table',
            'table_sql' => "select c_tmp.id,c_tmp.user_id,c_tmp.site_id,c_tmp.merchant_id,area.area_id from {$this->table_channel} as c_tmp LEFT JOIN {$this->table_area} as area ON area.site_id = c_tmp.site_id {$channel_where}"
        ];
        $origin_field = $this->getGoodsFbaField(3,"g.user_id,g.area_id,g.merchant_id,g.seller_sku as sku,g.asin,g.parent_asin,g.channel_id,g.site_id",$datas,$exchangeCode);
        $child_table[] = [
            'table_name' => 'fba_table1',
            'table_sql' => "SELECT {$origin_field} FROM (select v.*,channel.id as channel_id,channel.site_id from {$this->table_amazon_fba_inventory_v3} as v LEFT JOIN channel_table as channel ON v.user_id = channel.user_id and v.merchant_id = channel.merchant_id and v.area_id = channel.area_id and v.db_num = '{$this->dbhost}') as g {$rel_table} {$rate_table} {$where}",
        ];
        $join_field = ["user_id"];
        $need_review_fba = true;//需要去重
        $fba_table_field = $fba_table_field1 = $fba_table_where1 = $fba_table_group1 = $fba_table_join1 = $fba_table_group = "";
        $fba_table_where1 = "WHERE 1=1";
        if($datas['is_count'] == 1){
            $fba_table_join1 = " LEFT JOIN fba_table1 as g ON c.user_id = g.user_id and c.sku=g.sku and g.channel_id = c.channel_id JOIN {$this->table_goods_dim_report} AS amazon_goods on c.goods_id=amazon_goods.es_id";
            if($datas['count_dimension'] == 'asin'){
                $fba_table_where1.= " AND amazon_goods.goods_asin != '' ";
            }else if($datas['count_dimension'] == 'parent_asin'){
                $fba_table_where1.= " AND amazon_goods.goods_parent_asin != '' ";
            }else if($datas['count_dimension'] == 'isku'){
                $fba_table_where1.= " AND amazon_goods.goods_isku_id > 0  ";
            }else if($datas['count_dimension'] == 'class1'){
                $fba_table_where1.= " AND amazon_goods.goods_product_category_name_1 != '' ";
            }else if($datas['count_dimension'] == 'group'){
                $fba_table_where1.= " AND amazon_goods.goods_group_id > 0 ";
            }else if($datas['count_dimension'] == 'tags'){
                $fba_table_where1.= " AND CAST(tags_rel.tags_id as bigint) > 0 ";
                $fba_table_join1 .= "  LEFT JOIN (select goods_id , max(tags_id) as tags_id FROM {$this->table_amazon_goods_tags_rel} where db_num = '{$this->dbhost}' and  status = 1 group by goods_id ) AS tags_rel ON tags_rel.goods_id = amazon_goods.goods_g_amazon_goods_id ";
            }

            $join_field = ["user_id"];
            $fba_table_group = " GROUP BY user_id";
            $fba_table_field = "max(sku) as sku";
            $fba_table_field1 = "max(g.sku) as sku";
            $fba_table_group1 = " GROUP BY g.sku,g.merchant_id,g.area_id";

            $fba_data['is_count'] = 1 ;
            $fba_data['dimension'] = 'sku' ; //统计商品有关的维度

        }elseif($datas['count_dimension'] == 'sku'){
            if($datas['is_distinct_channel'] == 1){
                $join_field = ["user_id","channel_id","sku"];
                $fba_table_group = " GROUP BY sku,channel_id";
                $fba_table_field = "max(sku) as sku";
                $need_review_fba = false;//不需要去重
            }else{
                $join_field = ["user_id","sku"];
                $fba_table_group = " GROUP BY sku";
                $fba_table_field = "max(sku) as sku";
                $fba_table_field1 = "max(g.sku) as sku";
                $fba_table_group1 = " GROUP BY g.sku,g.merchant_id,g.area_id";
                $fba_table_join1 = " LEFT JOIN {$this->table_goods_dim_report} AS amazon_goods ON amazon_goods.goods_channel_id = g.channel_id and amazon_goods.goods_sku = g.sku";
            }
        }else if($datas['count_dimension'] == 'asin'){
            if($datas['is_distinct_channel'] == 1){
                $join_field = ["user_id","channel_id","asin"];
                $fba_table_group = " GROUP BY asin,channel_id";
                $fba_table_field = "max(asin) as asin";
                $need_review_fba = false;//不需要去重
            }else{
                $join_field = ["user_id","asin"];
                $fba_table_group = " GROUP BY asin";
                $fba_table_field = "max(asin) as asin";
                $fba_table_field1 = "max(g.asin) as asin";
                $fba_table_group1 = " GROUP BY g.sku,g.merchant_id,g.area_id,g.asin";
                $fba_table_join1 = " LEFT JOIN {$this->table_goods_dim_report} AS amazon_goods ON amazon_goods.goods_channel_id = g.channel_id and amazon_goods.goods_sku = g.sku";
            }
        }else if($datas['count_dimension'] == 'parent_asin'){
            if($datas['is_distinct_channel'] == 1){
                $join_field = ["user_id","channel_id","parent_asin"];
                $fba_table_group = " GROUP BY parent_asin,channel_id";
                $fba_table_field = "max(parent_asin) as parent_asin";
                $need_review_fba = false;//不需要去重
            }else{
                $join_field = ["user_id","parent_asin"];
                $fba_table_group = " GROUP BY parent_asin";
                $fba_table_field = "max(parent_asin) as parent_asin";
                $fba_table_field1 = "max(g.parent_asin) as parent_asin";
                $fba_table_group1 = " GROUP BY g.sku,g.merchant_id,g.area_id,g.parent_asin";
                $fba_table_join1 = " LEFT JOIN {$this->table_goods_dim_report} AS amazon_goods ON amazon_goods.goods_channel_id = g.channel_id and amazon_goods.goods_sku = g.sku";
            }
        }else if($datas['count_dimension'] == 'isku'){
            $join_field = ["user_id","isku_id"];
            $fba_table_field = "max(isku_id) as isku_id";
            $fba_table_field1 = "max(amazon_goods.goods_isku_id) as isku_id";
            $fba_table_join1 = " LEFT JOIN {$this->table_goods_dim_report} AS amazon_goods ON amazon_goods.goods_channel_id = g.channel_id and amazon_goods.goods_sku = g.sku";
            $fba_table_group1 = " GROUP BY g.sku,g.merchant_id,g.area_id,amazon_goods.goods_isku_id";
            $fba_table_group = " GROUP BY isku_id";
        }else if($datas['count_dimension'] == 'class1'){
            $join_field = ["user_id","class1","site_country_id"];
            $fba_table_field = "max(class1) as class1,max(site_country_id) as site_country_id";
            $fba_table_field1 = "max(amazon_goods.goods_product_category_name_1) as class1,max(amazon_goods.goods_site_id) as site_country_id";
            $fba_table_join1 = " LEFT JOIN {$this->table_goods_dim_report} AS amazon_goods ON amazon_goods.goods_channel_id = g.channel_id and amazon_goods.goods_sku = g.sku";
            $fba_table_group1 = " GROUP BY g.sku,g.merchant_id,g.area_id,amazon_goods.goods_product_category_name_1,amazon_goods.goods_site_id";
            $fba_table_group = " GROUP BY class1,site_country_id";
        }else if($datas['count_dimension'] == 'group'){ //分组
            $join_field = ["user_id","group_id"];
            $fba_table_field = "max(group_id) as group_id";
            $fba_table_field1 = "max(amazon_goods.goods_group_id) as group_id";
            $fba_table_join1 = " LEFT JOIN {$this->table_goods_dim_report} AS amazon_goods ON amazon_goods.goods_channel_id = g.channel_id and amazon_goods.goods_sku = g.sku";
            $fba_table_group1 = " GROUP BY g.sku,g.merchant_id,g.area_id,amazon_goods.goods_group_id";
            $fba_table_group = " GROUP BY group_id";
        }else if($datas['count_dimension'] == 'tags'){ //标签（需要刷数据）
            $join_field = ["user_id","tags_id"];
            $fba_table_field = "max(tags_id) as tags_id";
            $fba_table_field1 = "max(tags_rel.tags_id) as tags_id";
            $fba_table_join1 = " LEFT JOIN {$this->table_goods_dim_report} AS amazon_goods ON amazon_goods.goods_channel_id = g.channel_id and amazon_goods.goods_sku = g.sku LEFT JOIN {$this->table_amazon_goods_tags_rel} AS tags_rel ON tags_rel.goods_id = amazon_goods.goods_g_amazon_goods_id AND tags_rel.db_num = '{$this->dbhost}' and  tags_rel.status = 1";
            $fba_table_group1 = " GROUP BY g.sku,g.merchant_id,g.area_id,tags_rel.tags_id";
            $fba_table_group = " GROUP BY tags_id";
        }else if($datas['count_dimension'] == 'head_id') { //负责人
            $join_field = ["user_id","head_id"];
            $fba_table_field = "max(head_id) as head_id";
            $fba_table_field1 = "max(amazon_goods.isku_head_id) as head_id";
            $fba_table_join1 = " LEFT JOIN {$this->table_goods_dim_report} AS amazon_goods ON amazon_goods.goods_channel_id = g.channel_id and amazon_goods.goods_sku = g.sku";
            $fba_table_group1 = " GROUP BY g.sku,g.merchant_id,g.area_id,amazon_goods.isku_head_id";
            $fba_table_group = " GROUP BY head_id";
        }else if($datas['count_dimension'] == 'developer_id') { //开发人员
            $join_field = ["user_id","developer_id"];
            $fba_table_field = "max(developer_id) as developer_id";
            $fba_table_field1 = "max(amazon_goods.isku_developer_id) as developer_id";
            $fba_table_join1 = " LEFT JOIN {$this->table_goods_dim_report} AS amazon_goods ON amazon_goods.goods_channel_id = g.channel_id and amazon_goods.goods_sku = g.sku";
            $fba_table_group1 = " GROUP BY g.sku,g.merchant_id,g.area_id,amazon_goods.isku_developer_id";
            $fba_table_group = " GROUP BY developer_id";
        }else if($datas['count_dimension'] == 'goods_channel'){
            $join_field = ["user_id","channel_id"];
            $fba_table_group = " GROUP BY channel_id";
            $fba_table_join1 = " LEFT JOIN {$this->table_goods_dim_report} AS amazon_goods ON amazon_goods.goods_channel_id = g.channel_id and amazon_goods.goods_sku = g.sku";
            $fba_table_group1 = " GROUP BY g.sku,g.merchant_id,g.area_id,g.channel_id";
        }elseif($datas['count_dimension'] == 'goods_site_id'){
            $join_field = ["user_id","site_id"];
            $fba_table_group = " GROUP BY site_id";
            $fba_table_field = "max(site_id) as site_id";
            $fba_table_field1 = "max(g.site_id) as site_id";
            $fba_table_join1 = " LEFT JOIN {$this->table_goods_dim_report} AS amazon_goods ON amazon_goods.goods_channel_id = g.channel_id and amazon_goods.goods_sku = g.sku";
            $fba_table_group1 = " GROUP BY g.sku,g.merchant_id,g.area_id,g.site_id";
        }elseif($datas['count_dimension'] == 'goods_operators'){
            $join_field = ["user_id","goods_operation_user_admin_id"];
            $fba_table_group = " GROUP BY goods_operation_user_admin_id";
            $fba_table_field = "max(goods_operation_user_admin_id) as goods_operation_user_admin_id";
            $fba_table_field1 = "max(amazon_goods.goods_operation_user_admin_id) as goods_operation_user_admin_id";
            $fba_table_join1 = " LEFT JOIN {$this->table_goods_dim_report} AS amazon_goods ON amazon_goods.goods_channel_id = g.channel_id and amazon_goods.goods_sku = g.sku";
            $fba_table_group1 = " GROUP BY g.sku,g.merchant_id,g.area_id,amazon_goods.goods_operation_user_admin_id";
            $fba_table_where1 .= " AND amazon_goods.goods_operation_user_admin_id > 0 AND amazon_goods.channel_goods_operation_pattern = 1";
        }
        $where_detail = is_array($datas['where_detail']) ? $datas['where_detail'] : json_decode($datas['where_detail'], true);
        if (!empty($where_detail)) {
            if (!empty($where_detail['transport_mode'])) {
                if (!is_array($where_detail['transport_mode'])) {
                    $transport_modes = explode(',', $where_detail['transport_mode']);
                } else {
                    $transport_modes = $where_detail['transport_mode'];
                }
                if (count($transport_modes) == 1) {
                    $fba_table_where1 .= ' AND report.goods_Transport_mode = ' . ($transport_modes[0] == 'FBM' ? 1 : 2);
                }
            }
            if (!empty($where_detail['up_status'])) {
                $fba_table_where1 .= " AND report.goods_up_status = " . (intval($where_detail['up_status']) == 1 ? 1 : 2);
            }
            if (!empty($where_detail['is_care'])) {
                $fba_table_where1 .= " AND report.goods_is_care = " . (intval($where_detail['is_care']) == 1 ? 1 : 0);
            }
            if (!empty($where_detail['is_new'])) {
                $fba_table_where1 .= " AND report.goods_is_new = " . (intval($where_detail['is_new']) == 1 ? 1 : 0);
            }
            if (!empty($where_detail['group_id'])) {
                if (is_array($where_detail['group_id'])) {
                    $group_str = implode(',', $where_detail['group_id']);
                } else {
                    $group_str = $where_detail['group_id'];
                }

                if (!empty($group_str)) {
                    $fba_table_where1 .= " AND report.goods_group_id  IN ( " . $group_str . ")";
                } elseif ($group_str == 0) {
                    $fba_table_where1 .= " AND report.goods_group_id = 0 ";
                }
            }
            if (!empty($where_detail['isku_id'])) {
                if (is_array($where_detail['isku_id'])) {
                    $isku_id_str = implode(',', $where_detail['isku_id']);
                } else {
                    $isku_id_str = $where_detail['isku_id'];
                }

                if (!empty($isku_id_str)) {
                    $fba_table_where1 .= " AND report.goods_isku_id  IN ( " . $isku_id_str . ")";
                } elseif ($isku_id_str == 0) {
                    $fba_table_where1 .= " AND report.goods_isku_id = 0 ";
                }
            }
            if (!empty($where_detail['developer_id'])) {
                if (is_array($where_detail['developer_id'])) {
                    $developer_str = implode(',', $where_detail['developer_id']);
                } else {
                    $developer_str = $where_detail['developer_id'];
                }

                if (!empty($developer_str)) {
                    $fba_table_where1 .= " AND report.isku_developer_id  IN ( " . $developer_str . ")";
                }
            }
            if (!empty($where_detail['head_id'])) {
                if (is_array($where_detail['head_id'])) {
                    $head_str = implode(',', $where_detail['head_id']);
                } else {
                    $head_str = $where_detail['head_id'];
                }

                if (!empty($head_str)) {
                    $fba_table_where1 .= " AND report.isku_head_id  IN ( " . $head_str . ")";
                }
            }
            if (!empty($where_detail['product_category_name'])) {
                $where_detail['product_category_name'] = is_array($where_detail['product_category_name']) ? $where_detail['product_category_name'] : json_decode($where_detail['product_category_name'],true);
                if (is_array($where_detail['product_category_name'])) {
                    $product_category_name_str = "'" . join("','", $where_detail['product_category_name']) . "'";
                } else {
                    $product_category_name_str = "'" . $where_detail['product_category_name'] . "'";
                }

                if (!empty($product_category_name_str)) {
                    $fba_table_where1 .= " AND report.goods_product_category_name_1  IN ( " . $product_category_name_str . ")";
                }
            }
            if (!empty($where_detail['operators_id']) or (isset($where_detail['operators_id']) && ($where_detail['operators_id'] === '0' or $where_detail['operators_id'] === 0))) {
                if (is_array($where_detail['operators_id'])) {
                    $operators_str = implode(',', $where_detail['operators_id']);
                } else {
                    $operators_str = $where_detail['operators_id'];
                }
                $fba_table_where1 .= " AND report.goods_operation_user_admin_id  IN ( " . $operators_str . " ) ";
            }

            if (!empty($where_detail['tag_id'])) {
                $tags_where = "";
                if(is_array($where_detail['tag_id'])){
                    $tag_str = implode(',', $where_detail['tag_id']);

                }else{
                    $tag_str = $where_detail['tag_id'] ;
                }
                if($datas['count_dimension'] == 'tags'){
                    if (!empty($tag_str)) {
                        if (in_array(0,explode(",",$tag_str))){
                            $fba_table_where1 .= " AND (tags_rel.tags_id  IN ( " . $tag_str . " )  OR  tags_rel.tags_id IS NULL )  ";

                        }else{
                            $fba_table_where1 .= " AND tags_rel.tags_id  IN ( " . $tag_str . " ) ";

                        }
                    }elseif ($tag_str == 0){
                        $fba_table_where1 .= " AND (tags_rel.tags_id = 0 OR tags_rel.tags_id IS NULL) ";
                    }
                }else {
                    if (strpos($fba_table_group1, 'tags_rel.tags_id') === false) {
                        if (!empty($tag_str)) {
                            $tag_arr = explode(",", $tag_str);
                            $where_or_temp = [];
                            foreach ($tag_arr as $val) {
                                $where_or_temp[] = "tags.tags_id like '%,{$val},%'";
                            }
                            if (in_array(0, $tag_arr)) {
                                $tags_where .= " AND (tags_rel.tags_id  IN ( " . $tag_str . " )  OR  tags_rel.tags_id IS NULL )  ";
                                $fba_table_where1 .= $datas['is_count'] == 1 && $datas['is_distinct_channel'] == 1 ? "" : " AND (" . implode(' OR ', $where_or_temp) . ") ";
                            } else {
                                $tags_where .= " AND tags_rel.tags_id  IN ( " . $tag_str . " ) ";
                                $fba_table_where1 .= $datas['is_count'] == 1 && $datas['is_distinct_channel'] == 1 ? "" : " AND (" . implode(' OR ', $where_or_temp) . ") ";
                            }
                        } elseif ($tag_str == 0) {
                            $tags_where .= " AND (tags_rel.tags_id = 0 OR tags_rel.tags_id IS NULL) ";
                            $fba_table_where1 .= $datas['is_count'] == 1 && $datas['is_distinct_channel'] == 1 ? "" : " AND tags.tags_id like '%,0,%'";
                        }
                        $concat_str = "array_join(array_agg(tags_rel.tags_id), ',')";
                        if ($datas['is_count'] == 1 && $datas['is_distinct_channel'] == 1) {
                            $concat_join = " ON tags.goods_id = c.goods_id";
                        } else {
                            $concat_join = " ON tags.goods_id = amazon_goods.goods_g_amazon_goods_id";
                        }
                        $fba_table_join1 .= " LEFT JOIN (SELECT tags_rel.goods_id,concat(',', {$concat_str}, ',') as \"tags_id\" FROM {$this->table_amazon_goods_tags_rel} AS tags_rel LEFT JOIN {$this->table_amazon_goods_tags} AS gtags ON gtags.id = tags_rel.tags_id AND gtags.db_num = '{$this->dbhost}' AND gtags.status = 1 where tags_rel.db_num = '{$this->dbhost}' AND tags_rel.status = 1 {$tags_where} GROUP BY tags_rel.goods_id) as tags {$concat_join}";
                    }
                }
            }

            if (!empty($where_detail['sku'])) {
                if (is_array($where_detail['sku'])) {
                    $sku_str = "'" . join("','", $where_detail['sku']) . "'";
                } else {
                    $sku_str = "'" . $where_detail['sku'] . "'";
                }

                if (!empty($sku_str)) {
                    $fba_table_where1 .= " AND report.goods_sku  IN ( " . $sku_str . ")";
                }
            }
        }
        if (!empty($datas['where_parent'])){
            if (!empty($datas['where_parent']['isku_id'])) {
                $fba_table_where1 .= " AND amazon_goods.goods_isku_id IN (" . $datas['where_parent']['isku_id'] . ")";
            }
            if (!empty($datas['where_parent']['class1_name']) && !empty($datas['where_parent']['site_id'])) {
                if (is_array($datas['where_parent']['class1_name'])) {
                    $class1_name = implode("','", $datas['where_parent']['class1_name']);
                } else {
                    $class1_name = trim($datas['where_parent']['class1_name']);
                }
                $fba_table_where1 .= " AND amazon_goods.goods_product_category_name_1 IN('{$class1_name}') AND g.site_id = {$datas['where_parent']['site_id']}";
            }
            if (!empty($datas['where_parent']['group_id'])) {
                $fba_table_where1 .= " AND amazon_goods.goods_group_id  IN (" . $datas['where_parent']['group_id'] . ")";
            }
        }

        $datas['need_review_fba'] = $need_review_fba;
        if($datas['is_count'] == 1 ){
            $field1 = $this->getGoodsFbaField(1,$fba_table_field1,$datas);
            $fba_table1 = "(SELECT {$field1} FROM count_table as c {$fba_table_join1} {$fba_table_where1} {$fba_table_group1})";
        }elseif($need_review_fba){ //需要去重
            $field1 = $this->getGoodsFbaField(1,$fba_table_field1,$datas);
            $fba_table1 = "(SELECT {$field1} FROM fba_table1 as g {$fba_table_join1} {$fba_table_where1} {$fba_table_group1})";
        }else{
            $fba_table1 = "fba_table1";
        }

        $field = $this->getGoodsFbaField(2,$fba_table_field,$datas);
        $child_table[] = [
            'table_name' => 'fba_table',
            'table_sql' => "SELECT {$field} FROM {$fba_table1} {$fba_table_group}",
        ];
        $fba_data['child_table'] = $child_table;
        foreach ($join_field as $item){
            $fba_data_join[] = "new_origin_table.{$item} = fba_table.{$item}";
        }
        $fba_data['join'] = implode(' AND ',$fba_data_join);

        $other_field_str = "";
        $other_fields = $this->getGoodsFbaOtherField($custom_fba_target_key) ;
        if(!empty($other_fields)){
            foreach($other_fields as $other_key=>$otherField){
                $other_field_str .= empty($other_field_str) ? ($otherField. ' AS ' . $other_key ) : (' , ' . $otherField. ' AS ' . $other_key) ;
            }
        }
        $fba_data['other_field'] = $other_field_str;

        $fba_data['fba_fields'] = $this->getGoodsFbaField(4,"",$datas,$exchangeCode);

        if (!empty($this->fbaWhereDetail)) {
            foreach ($this->fbaWhereDetail as $target_where) {
                if(!empty($target_where['key'])){
                    $where_value = $target_where['value'];
                    if (strpos($where_value, '%') !== false) {
                        $where_value = round($where_value / 100, 4);
                    }
                    //日均
                    if(!empty($target_where['is_custom'])) {
                        //自定义公式
                        if(!empty($other_fields[$target_where['key']])) {
                            $fba_data_where[] = "{$other_fields[$target_where['key']]}" . $target_where['formula'] . $where_value;
                        }
                    }else{
                        $fba_data_where[] = "fba_table.{$target_where['key']}" . $target_where['formula'] . $where_value;
                    }
                }

            }
            $fba_data['where'] = !empty($fba_data_where) ? implode(' AND ',$fba_data_where) : "";
        }

        $orderbyArr = array();
        if(!empty($this->fbaSort)){
            if(!empty($this->fbaSort['is_origin'])){
                //类似销量这样的排序
                if(!empty($this->fbaSort['sort_target'])) {
                    $orderbyArr[] = '((new_origin_table.' . $this->fbaSort['sort_target'] . ') IS NULL) ,  (new_origin_table.' . $this->fbaSort['sort_target'] . ' ) ' . $this->fbaSort['sort_order'];
                }
            }elseif(!empty($this->fbaSort['is_custom'])){
                //自定义公式
                if(!empty($other_fields[$this->fbaSort['sort_target']])) {
                    $orderbyArr[] = '((' . $other_fields[$this->fbaSort['sort_target']] . ') IS NULL) ,  (' . $other_fields[$this->fbaSort['sort_target']] . ' ) ' . $this->fbaSort['sort_order'];
                }
            }elseif(!empty($other_fields[$this->fbaSort['sort_target']])){
                $orderbyArr[] = '((' . $other_fields[$this->fbaSort['sort_target']] . ') IS NULL) ,  (' . $other_fields[$this->fbaSort['sort_target']] . ' ) ' . $this->fbaSort['sort_order'];
            }else{
                if($fbaArr[$this->fbaSort['sort_target']]['count_type'] == '4'){
                    $order_fields = "{$fbaArr[$this->fbaSort['sort_target']]['mysql_field']}";
                }else{
                    $order_fields = "fba_table." . $this->fbaSort['sort_target'];
                }
                $orderbyArr[] = '(('. $order_fields .') IS NULL) ,  (' . $order_fields . ' ) ' . $this->fbaSort['sort_order'];;
            }
        }
        //非按无周期的，指标展现排序
        if($datas['count_periods'] > 0 && $datas['show_type'] == '2'){
            if($datas['count_periods'] == '4'){ //按季度
                $time_group = ',new_origin_table.myear , new_origin_table.mquarter ';
            }else if($datas['count_periods'] == '5') { //年
                $time_group = ',new_origin_table.myear' ;
            }else if($datas['count_periods'] == '3'){ //按月
                $time_group = ',new_origin_table.myear ,new_origin_table.mmonth' ;
            }else if($datas['count_periods'] == '2'){  //按周
                $time_group = ',new_origin_table.mweekyear ,new_origin_table.mweek' ;
            }else if($datas['count_periods'] == '1') {  //按天
                $time_group = ',new_origin_table.myear ,new_origin_table.mmonth ,new_origin_table.mday' ;
            }else{
                $time_group= ',new_origin_table.myear' ;
            }
            if (in_array($datas['count_dimension'], ['parent_asin', 'asin', 'sku'])) {
                if($datas['is_distinct_channel'] == 1){ //有区分店铺
                    $orderbyArr[] = "new_origin_table." . $datas['count_dimension'] . ", new_origin_table.channel_id" . $time_group;
                }else{  //不区分店铺
                    $orderbyArr[] = 'new_origin_table.' . $datas['count_dimension'] . $time_group;
                }
            } else if ($datas['count_dimension'] == 'isku') {
                $orderbyArr[] = "new_origin_table.isku_id" . $time_group;
            } else if ($datas['count_dimension'] == 'group') {
                $orderbyArr[] = "new_origin_table.group_id " . $time_group;
            } else if ($datas['count_dimension'] == 'class1') {
                $orderbyArr[] = 'new_origin_table.class1 ,new_origin_table.site_country_id ,new_origin_table.class1_id' . $time_group;
            } else if($datas['count_dimension'] == 'tags'){
                $orderbyArr[] = 'new_origin_table.tags_id' . $time_group;
            } else if($datas['count_dimension'] == 'head_id'){ //按负责人维度统计
                $orderbyArr[] = 'new_origin_table.head_id' . $time_group ;
            }else if($datas['count_dimension'] == 'developer_id'){ //按开发人维度统计
                $orderbyArr[] = 'new_origin_table.developer_id ' . $time_group;
            }else if($datas['count_dimension'] == 'goods_channel'){
                $orderbyArr[] = 'new_origin_table.channel_id ' . $time_group;
            }else if($datas['count_dimension'] == 'goods_site_id'){
                $orderbyArr[] = 'new_origin_table.site_id ' . $time_group;
            }
        }
        if($datas['is_count'] == 1){ //汇总不需要排序
            $orderbyArr = array() ;
        }
        $fba_data['order'] = !empty($orderbyArr) ? implode(',',$orderbyArr) : "";
        return $fba_data;
    }

    /**
     * @param array $datas
     * @param float $exchangeCode
     * @param array $currencyInfo
     * @param array $fields 非FBA的指标信息
     * @param array $custom_fba_target_key 有包含FBA 字段的自定义指标key，
     * @return array
     */
    protected function joinUnGoodsFbaTable($datas = array() , $channel_arr = array() ,$exchangeCode = 1.0000 , $currencyInfo = array(),$fields = array() , $custom_fba_target_key = array())
    {
        if($this->haveFbaFields == false){
            //没有选择fba指标
            return [];
        }
        //有指标筛选 ， FBA 无法汇总
        if($datas['is_count'] == 1 && !empty($datas['where_detail']['target'])){
            return [];
        }
        $child_table = $result_fba_fields = $fba_data_join = $other_fields = array();
        $orderby = $other_field_str = $other_where = '' ;
        //判断是否需要汇率换算
        $is_currency_exchange = 0 ;
        $fba_data = [
            'child_table' => [],
            'other_field'=>"" ,
            'join' => "",
            'where' => "",
            'order' => "",
            'fba_fields'=>""
        ];
        $today = strtotime(date("Y-m-d", time()));
        $now_time = time();
        $where = " WHERE tend.user_id = ".intval($datas['user_id'])." AND tend.db_num = '".$this->dbhost."' AND tend.create_time >= {$today} AND tend.create_time <= {$now_time}";
        if (count($channel_arr)==1){
            $where .= " AND c.id = ".intval(implode(",",$channel_arr));
        }else{
            $where .= " AND c.id IN (".implode(",",$channel_arr).")";
        }

        $where_detail = is_array($datas['where_detail']) ? $datas['where_detail'] : json_decode($datas['where_detail'], true);
        if (empty($where_detail)) {
            $where_detail = [];
        }

        $fbaArr = config('common.channel_fba_fields_arr');
        foreach($fbaArr as $fbaFieldKey=>$val){
            if(in_array($fbaFieldKey , $this->lastTargets)){

                if(!in_array($fbaFieldKey,['fba_sales_day','fba_suggested_replenishment_time','fba_turnover_times'])){
                    $result_fba_fields[] = "fba_table.".$fbaFieldKey ;
                }
                $fields[$fbaFieldKey] = "fba_table.".$fbaFieldKey ;
                if($val['data_type'] == 2 && $datas['currency_code'] != 'ORIGIN'){
                    $is_currency_exchange = 1 ;
                }
            }
        }

        if($datas['count_dimension'] == 'channel_id' && $datas['is_count'] != 1){ //按店铺维度
            $fba_rt = $this->getUnGoodsFbaField(2," c.id as channel_id , max(c.site_id) as site_id " ,'mysql_key', $is_currency_exchange) ;
            $fba_field = str_replace("{:RATE}", $exchangeCode, $fba_rt['field_str']);

            if($is_currency_exchange == 1 || !empty(array_intersect(['fba_goods_value','fba_total_ltsf','fba_ltsf_6_12','fba_ltsf_12','fba_estimate_total'],$this->lastTargets )) ) {
                $table_sql = "select {$fba_field} from {$this->table_amazon_fba_inventory_tend_v3} as tend LEFT JOIN (select c_tmp.id ,c_tmp.user_id , c_tmp.site_id , c_tmp.merchant_id , area.area_id from  {$this->table_channel} as c_tmp LEFT JOIN {$this->table_area} as area ON area.site_id = c_tmp.site_id where c_tmp.user_id = {$datas['user_id']} ) as c ON tend.user_id = c.user_id AND tend.merchant_id = c.merchant_id AND tend.area_id = c.area_id ";
                $table_sql = $this->leftJoinCurrentMonthRate($table_sql,$datas,$currencyInfo,'c');
                $table_sql .= " ". $where . " group by c.id" ;
//                if (empty($currencyInfo) || $currencyInfo['currency_type'] == '1') {
//                    $table_sql = "select {$fba_field} from {$this->table_amazon_fba_inventory_tend_v3} as tend LEFT JOIN (select c_tmp.id ,c_tmp.user_id , c_tmp.site_id , c_tmp.merchant_id , area.area_id from  {$this->table_channel} as c_tmp LEFT JOIN {$this->table_area} as area ON area.site_id = c_tmp.site_id where c_tmp.user_id = {$datas['user_id']} ) as c ON tend.user_id = c.user_id AND tend.merchant_id = c.merchant_id AND tend.area_id = c.area_id   LEFT JOIN  {$this->table_site_rate} as rates ON rates.site_id = c.site_id AND rates.user_id = 0 " . $where . " group by c.id" ;
//                }else{
//                    $table_sql = "select {$fba_field} from {$this->table_amazon_fba_inventory_tend_v3} as tend LEFT JOIN (select c_tmp.id ,c_tmp.user_id , c_tmp.site_id , c_tmp.merchant_id , area.area_id from  {$this->table_channel} as c_tmp LEFT JOIN {$this->table_area} as area ON area.site_id = c_tmp.site_id where c_tmp.user_id = {$datas['user_id']} ) as c ON tend.user_id = c.user_id AND tend.merchant_id = c.merchant_id AND tend.area_id = c.area_id LEFT JOIN  {$this->table_site_rate} as rates ON rates.site_id = c.site_id AND rates.user_id = c.user_id  " . $where . " group by c.id" ;
//                }
            }else{
                $table_sql = "select {$fba_field} from {$this->table_amazon_fba_inventory_tend_v3} as tend LEFT JOIN (select c_tmp.id ,c_tmp.user_id , c_tmp.site_id , c_tmp.merchant_id , area.area_id from  {$this->table_channel} as c_tmp LEFT JOIN {$this->table_area} as area ON area.site_id = c_tmp.site_id where c_tmp.user_id = {$datas['user_id']} ) as c ON tend.user_id = c.user_id AND tend.merchant_id = c.merchant_id AND tend.area_id = c.area_id ".$where." group by c.id" ;
            }
            $child_table[] = [
                'table_name' => 'fba_table',
                'table_sql' => $table_sql,
            ] ;
            $json_on = "new_origin_table.channel_id = fba_table.channel_id AND new_origin_table.user_id = fba_table.user_id " ;
        }else if($datas['count_dimension'] == 'site_id' && $datas['is_count'] != 1 ){ //按站点维度
            $fba_rt = $this->getUnGoodsFbaField(2," c.site_id as site_id " , 'mysql_key' , $is_currency_exchange) ;
            $fba_field = str_replace("{:RATE}", $exchangeCode, $fba_rt['field_str']);
            if($is_currency_exchange == 1 || !empty(array_intersect(['fba_goods_value','fba_total_ltsf','fba_ltsf_6_12','fba_ltsf_12','fba_estimate_total'],$this->lastTargets ))){
                $table_sql = "select {$fba_field} from {$this->table_amazon_fba_inventory_tend_v3} as tend LEFT JOIN (select c_tmp.id ,c_tmp.user_id , c_tmp.site_id , c_tmp.merchant_id , area.area_id from  {$this->table_channel} as c_tmp LEFT JOIN {$this->table_area} as area ON area.site_id = c_tmp.site_id where c_tmp.user_id = {$datas['user_id']} ) as c ON tend.user_id = c.user_id AND tend.merchant_id = c.merchant_id AND tend.area_id = c.area_id ";
                $table_sql = $this->leftJoinCurrentMonthRate($table_sql,$datas,$currencyInfo,'c');
                $table_sql .= " ". $where ." group by c.site_id" ;
//                if (empty($currencyInfo) || $currencyInfo['currency_type'] == '1') {
//                    $table_sql = "select {$fba_field} from {$this->table_amazon_fba_inventory_tend_v3} as tend LEFT JOIN (select c_tmp.id ,c_tmp.user_id , c_tmp.site_id , c_tmp.merchant_id , area.area_id from  {$this->table_channel} as c_tmp LEFT JOIN {$this->table_area} as area ON area.site_id = c_tmp.site_id where c_tmp.user_id = {$datas['user_id']} ) as c ON tend.user_id = c.user_id AND tend.merchant_id = c.merchant_id AND tend.area_id = c.area_id LEFT JOIN  {$this->table_site_rate} as rates ON rates.site_id = c.site_id AND rates.user_id = 0".$where." group by c.site_id" ;
//                }else{
//                    $table_sql = "select {$fba_field} from {$this->table_amazon_fba_inventory_tend_v3} as tend LEFT JOIN (select c_tmp.id ,c_tmp.user_id , c_tmp.site_id , c_tmp.merchant_id , area.area_id from  {$this->table_channel} as c_tmp LEFT JOIN {$this->table_area} as area ON area.site_id = c_tmp.site_id where c_tmp.user_id = {$datas['user_id']} ) as c ON tend.user_id = c.user_id AND tend.merchant_id = c.merchant_id AND tend.area_id = c.area_id LEFT JOIN  {$this->table_site_rate} as rates ON rates.site_id = c.site_id AND rates.user_id = c.user_id ".$where." group by c.site_id" ;
//                }
            }else{
                $table_sql = "select {$fba_field} from {$this->table_amazon_fba_inventory_tend_v3} as tend LEFT JOIN (select c_tmp.id ,c_tmp.user_id , c_tmp.site_id , c_tmp.merchant_id , area.area_id from  {$this->table_channel} as c_tmp LEFT JOIN {$this->table_area} as area ON area.site_id = c_tmp.site_id where c_tmp.user_id = {$datas['user_id']} ) as c ON tend.user_id = c.user_id AND tend.merchant_id = c.merchant_id AND tend.area_id = c.area_id  ".$where." group by c.site_id" ;
            }
            $child_table[] = [
                'table_name' => 'fba_table',
                'table_sql' =>$table_sql,
            ] ;
            $json_on = "new_origin_table.site_id = fba_table.site_id AND new_origin_table.user_id = fba_table.user_id " ;
        }else if($datas['count_dimension'] == 'department' && $datas['is_count'] != 1) { //按部门
            $where.=" AND dc.user_department_id > 0 AND dc.status = 1 " ;
            $fba_rt1 = $this->getUnGoodsFbaField(2,"max(c.id) as channel_id ,max(c.site_id) as site_id ,max(dc.user_department_id) as user_department_id " , 'mysql_key' , $is_currency_exchange) ;
            $fba_field1 = str_replace("{:RATE}", $exchangeCode, $fba_rt1['field_str']);
            if($is_currency_exchange == 1 || !empty(array_intersect(['fba_goods_value','fba_total_ltsf','fba_ltsf_6_12','fba_ltsf_12','fba_estimate_total'],$this->lastTargets ))){
                $table_sql = "select {$fba_field1} from {$this->table_amazon_fba_inventory_tend_v3} as tend LEFT JOIN (select c_tmp.id ,c_tmp.user_id , c_tmp.site_id , c_tmp.merchant_id , area.area_id from  {$this->table_channel} as c_tmp LEFT JOIN {$this->table_area} as area ON area.site_id = c_tmp.site_id where c_tmp.user_id = {$datas['user_id']} ) as c ON tend.user_id = c.user_id AND tend.merchant_id = c.merchant_id AND tend.area_id = c.area_id LEFT JOIN {$this->table_department_channel} as dc ON dc.channel_id = c.id and dc.user_id = c.user_id ";
                $table_sql = $this->leftJoinCurrentMonthRate($table_sql,$datas,$currencyInfo,'c');
                $table_sql .= " ".$where." group by c.site_id,dc.user_department_id" ;
//                if (empty($currencyInfo) || $currencyInfo['currency_type'] == '1') {
//                    $table_sql = "select {$fba_field1} from {$this->table_amazon_fba_inventory_tend_v3} as tend LEFT JOIN (select c_tmp.id ,c_tmp.user_id , c_tmp.site_id , c_tmp.merchant_id , area.area_id from  {$this->table_channel} as c_tmp LEFT JOIN {$this->table_area} as area ON area.site_id = c_tmp.site_id where c_tmp.user_id = {$datas['user_id']} ) as c ON tend.user_id = c.user_id AND tend.merchant_id = c.merchant_id AND tend.area_id = c.area_id LEFT JOIN {$this->table_department_channel} as dc ON dc.channel_id = c.id and dc.user_id = c.user_id  LEFT JOIN  {$this->table_site_rate} as rates ON rates.site_id = c.site_id AND rates.user_id = 0".$where." group by c.site_id,dc.user_department_id" ;
//                }else{
//                    $table_sql = "select {$fba_field1} from {$this->table_amazon_fba_inventory_tend_v3} as tend LEFT JOIN (select c_tmp.id ,c_tmp.user_id , c_tmp.site_id , c_tmp.merchant_id , area.area_id from  {$this->table_channel} as c_tmp LEFT JOIN {$this->table_area} as area ON area.site_id = c_tmp.site_id where c_tmp.user_id = {$datas['user_id']} ) as c ON tend.user_id = c.user_id AND tend.merchant_id = c.merchant_id and tend.area_id = c.area_id LEFT JOIN {$this->table_department_channel} as dc ON dc.channel_id = c.id and dc.user_id = c.user_id  LEFT JOIN  {$this->table_site_rate} as rates ON rates.site_id = c.site_id AND rates.user_id = c.user_id ".$where." group by c.site_id,dc.user_department_id" ;
//                }
            }else{
                $table_sql = "select {$fba_field1} from {$this->table_amazon_fba_inventory_tend_v3} as tend LEFT JOIN (select c_tmp.id ,c_tmp.user_id , c_tmp.site_id , c_tmp.merchant_id , area.area_id from  {$this->table_channel} as c_tmp LEFT JOIN {$this->table_area} as area ON area.site_id = c_tmp.site_id where c_tmp.user_id = {$datas['user_id']} ) as c ON tend.user_id = c.user_id AND tend.merchant_id = c.merchant_id and tend.area_id = c.area_id LEFT JOIN {$this->table_department_channel} as dc ON dc.channel_id = c.id and dc.user_id = c.user_id    ".$where." group by c.site_id,dc.user_department_id" ;
            }
            $child_table[] = [
                'table_name' => 'fba_table1',
                'table_sql' => $table_sql
            ] ;
            $fba_rt2 = $this->getUnGoodsFbaField(1,"user_department_id,merchant_id",'') ;
            $child_table[] = [
                'table_name' => 'fba_table2',
                'table_sql' => "select {$fba_rt2['field_str']} from fba_table1 group by user_department_id ,merchant_id,area_id",
            ] ;
            $fba_rt = $this->getUnGoodsFbaField(2," user_department_id ",'target_key') ;
            $child_table[] = [
                'table_name' => 'fba_table',
                'table_sql' => "select {$fba_rt['field_str']} from fba_table2 group by user_department_id",
            ] ;
            $json_on = "new_origin_table.user_department_id = fba_table.user_department_id AND new_origin_table.user_id = fba_table.user_id " ;

        }else if($datas['count_dimension'] == 'admin_id' && $datas['is_count'] != 1){ //按子账号
            $where.=" AND  uc.admin_id > 0  AND uc.status = 1 AND uc.is_master = 0  " ;
            $fba_rt1 = $this->getUnGoodsFbaField(2,"max(c.id) as channel_id,max(c.site_id) as site_id  ,max(uc.admin_id) as admin_id",'mysql_key' ,$is_currency_exchange) ;
            $fba_field1 = str_replace("{:RATE}", $exchangeCode, $fba_rt1['field_str']);
            if($is_currency_exchange == 1 || !empty(array_intersect(['fba_goods_value','fba_total_ltsf','fba_ltsf_6_12','fba_ltsf_12','fba_estimate_total'],$this->lastTargets ))){
                $table_sql = "select {$fba_field1} from {$this->table_amazon_fba_inventory_tend_v3} as tend LEFT JOIN (select c_tmp.id ,c_tmp.user_id , c_tmp.site_id , c_tmp.merchant_id , area.area_id from  {$this->table_channel} as c_tmp LEFT JOIN {$this->table_area} as area ON area.site_id = c_tmp.site_id where c_tmp.user_id = {$datas['user_id']} ) as c ON tend.user_id = c.user_id AND tend.merchant_id  = c.merchant_id AND tend.area_id = c.area_id LEFT JOIN {$this->table_user_channel} as uc ON uc.channel_id = c.id and uc.user_id = c.user_id ";
                $table_sql = $this->leftJoinCurrentMonthRate($table_sql,$datas,$currencyInfo,'c');
                $table_sql .= " ".$where." group by c.site_id,uc.admin_id" ;

//                if (empty($currencyInfo) || $currencyInfo['currency_type'] == '1') {
//                    $table_sql = "select {$fba_field1} from {$this->table_amazon_fba_inventory_tend_v3} as tend LEFT JOIN (select c_tmp.id ,c_tmp.user_id , c_tmp.site_id , c_tmp.merchant_id , area.area_id from  {$this->table_channel} as c_tmp LEFT JOIN {$this->table_area} as area ON area.site_id = c_tmp.site_id where c_tmp.user_id = {$datas['user_id']} ) as c ON tend.user_id = c.user_id AND tend.merchant_id  = c.merchant_id AND tend.area_id = c.area_id LEFT JOIN {$this->table_user_channel} as uc ON uc.channel_id = c.id and uc.user_id = c.user_id LEFT JOIN  {$this->table_site_rate} as rates ON rates.site_id = c.site_id AND rates.user_id = 0".$where." group by c.site_id,uc.admin_id" ;
//
//                }else{
//                    $table_sql = "select {$fba_field1} from {$this->table_amazon_fba_inventory_tend_v3} as tend LEFT JOIN (select c_tmp.id ,c_tmp.user_id , c_tmp.site_id , c_tmp.merchant_id , area.area_id from  {$this->table_channel} as c_tmp LEFT JOIN {$this->table_area} as area ON area.site_id = c_tmp.site_id where c_tmp.user_id = {$datas['user_id']} ) as c ON tend.user_id = c.user_id AND tend.merchant_id  = c.merchant_id AND tend.area_id = c.area_id LEFT JOIN {$this->table_user_channel} as uc ON uc.channel_id = c.id and uc.user_id = c.user_id  LEFT JOIN  {$this->table_site_rate} as rates ON rates.site_id = c.site_id AND rates.user_id = c.user_id ".$where." group by c.site_id,uc.admin_id" ;
//                }
            }else{
                $table_sql = "select {$fba_field1} from {$this->table_amazon_fba_inventory_tend_v3} as tend LEFT JOIN (select c_tmp.id ,c_tmp.user_id , c_tmp.site_id , c_tmp.merchant_id , area.area_id from  {$this->table_channel} as c_tmp LEFT JOIN {$this->table_area} as area ON area.site_id = c_tmp.site_id where c_tmp.user_id = {$datas['user_id']} ) as c ON tend.user_id = c.user_id AND tend.merchant_id  = c.merchant_id AND tend.area_id = c.area_id LEFT JOIN {$this->table_user_channel} as uc ON uc.channel_id = c.id and uc.user_id = c.user_id  ".$where." group by c.site_id,uc.admin_id" ;
            }
            $child_table[] = [
                'table_name' => 'fba_table1',
                'table_sql' => $table_sql
            ] ;
            $fba_rt2 = $this->getUnGoodsFbaField(1,"admin_id,merchant_id") ;
            $child_table[] = [
                'table_name' => 'fba_table2',
                'table_sql' => "select {$fba_rt2['field_str']} from fba_table1 group by admin_id ,merchant_id,area_id",
            ] ;
            $fba_rt = $this->getUnGoodsFbaField(2," admin_id ",'target_key') ;
            $child_table[] = [
                'table_name' => 'fba_table',
                'table_sql' => "select {$fba_rt['field_str']} from fba_table2 group by admin_id",
            ] ;
            $json_on = "new_origin_table.admin_id = fba_table.admin_id AND new_origin_table.user_id = fba_table.user_id " ;
        }
        else if($datas['count_dimension'] == 'channel_operators' && $datas['is_count'] != 1)
        {
            //店铺 运营人员
            $fba_rt1 = $this->getUnGoodsFbaField(2,"max(c.id) as channel_id,max(c.site_id) as site_id  ,max(c.operation_user_admin_id) as operation_user_admin_id",'mysql_key' ,$is_currency_exchange) ;
            $fba_field1 = str_replace("{:RATE}", $exchangeCode, $fba_rt1['field_str']);
            $child_dimension_sql = " ";
            if (!empty($datas['where_parent']['child_dimension_admin_id'])){
                $where .= " AND uc.admin_id IN({$datas['where_parent']['child_dimension_admin_id']})";
                $child_dimension_sql = " LEFT JOIN {$this->table_user_channel} as uc ON uc.channel_id = c.id and uc.user_id = c.user_id ";
            }
            if (!empty($datas['where_parent']['child_dimension_department_id'])){
                $where .= " AND dc.user_department_id IN({$datas['where_parent']['child_dimension_department_id']}) AND dc.status = 1";
                $child_dimension_sql = " LEFT JOIN {$this->table_department_channel} as dc ON dc.channel_id = c.id and dc.user_id = c.user_id ";
            }
            if (!empty($datas['where_parent']['child_dimension_site_id'])){
                $where .= " AND c.site_id IN({$datas['where_parent']['child_dimension_site_id']})";
            }
            if($is_currency_exchange == 1 || !empty(array_intersect(['fba_goods_value','fba_total_ltsf','fba_ltsf_6_12','fba_ltsf_12','fba_estimate_total'],$this->lastTargets ))){
                $table_sql = "select {$fba_field1} from {$this->table_amazon_fba_inventory_tend_v3} as tend LEFT JOIN (select c_tmp.id ,c_tmp.user_id , c_tmp.site_id , c_tmp.merchant_id , area.area_id, c_tmp.operation_user_admin_id from  {$this->table_channel} as c_tmp LEFT JOIN {$this->table_area} as area ON area.site_id = c_tmp.site_id where c_tmp.user_id = {$datas['user_id']} AND c_tmp.operation_user_admin_id > 0 AND c_tmp.goods_operation_pattern = 2) as c ON tend.user_id = c.user_id AND tend.merchant_id  = c.merchant_id AND tend.area_id = c.area_id {$child_dimension_sql} " ;
                $table_sql = $this->leftJoinCurrentMonthRate($table_sql,$datas,$currencyInfo,'c');
                $table_sql .= " ".$where." group by c.site_id,c.operation_user_admin_id" ;
//                if (empty($currencyInfo) || $currencyInfo['currency_type'] == '1') {
//                    $table_sql = "select {$fba_field1} from {$this->table_amazon_fba_inventory_tend_v3} as tend LEFT JOIN (select c_tmp.id ,c_tmp.user_id , c_tmp.site_id , c_tmp.merchant_id , area.area_id, c_tmp.operation_user_admin_id from  {$this->table_channel} as c_tmp LEFT JOIN {$this->table_area} as area ON area.site_id = c_tmp.site_id where c_tmp.user_id = {$datas['user_id']} AND c_tmp.operation_user_admin_id > 0 AND c_tmp.goods_operation_pattern = 2) as c ON tend.user_id = c.user_id AND tend.merchant_id  = c.merchant_id AND tend.area_id = c.area_id {$child_dimension_sql} LEFT JOIN  {$this->table_site_rate} as rates ON rates.site_id = c.site_id AND rates.user_id = 0".$where." group by c.site_id,c.operation_user_admin_id" ;
//                }else{
//                    $table_sql = "select {$fba_field1} from {$this->table_amazon_fba_inventory_tend_v3} as tend LEFT JOIN (select c_tmp.id ,c_tmp.user_id , c_tmp.site_id , c_tmp.merchant_id , area.area_id, c_tmp.operation_user_admin_id from  {$this->table_channel} as c_tmp LEFT JOIN {$this->table_area} as area ON area.site_id = c_tmp.site_id where c_tmp.user_id = {$datas['user_id']} AND c_tmp.operation_user_admin_id > 0 AND c_tmp.goods_operation_pattern = 2) as c ON tend.user_id = c.user_id AND tend.merchant_id  = c.merchant_id AND tend.area_id = c.area_id {$child_dimension_sql} LEFT JOIN  {$this->table_site_rate} as rates ON rates.site_id = c.site_id AND rates.user_id = c.user_id ".$where." group by c.site_id,c.operation_user_admin_id" ;
//                }
            }else{
                $table_sql = "select {$fba_field1} from {$this->table_amazon_fba_inventory_tend_v3} as tend LEFT JOIN (select c_tmp.id ,c_tmp.user_id , c_tmp.site_id , c_tmp.merchant_id , area.area_id, c_tmp.operation_user_admin_id from  {$this->table_channel} as c_tmp LEFT JOIN {$this->table_area} as area ON area.site_id = c_tmp.site_id where c_tmp.user_id = {$datas['user_id']} AND c_tmp.operation_user_admin_id > 0 AND c_tmp.goods_operation_pattern = 2) as c ON tend.user_id = c.user_id AND tend.merchant_id  = c.merchant_id AND tend.area_id = c.area_id {$child_dimension_sql} ".$where." group by c.site_id,c.operation_user_admin_id" ;
            }
            $child_table[] = [
                'table_name' => 'fba_table1',
                'table_sql' => $table_sql
            ] ;
            $fba_rt2 = $this->getUnGoodsFbaField(1,"operation_user_admin_id,merchant_id") ;
            $child_table[] = [
                'table_name' => 'fba_table2',
                'table_sql' => "select {$fba_rt2['field_str']} from fba_table1 group by operation_user_admin_id ,merchant_id,area_id",
            ] ;
            $fba_rt = $this->getUnGoodsFbaField(2," operation_user_admin_id ",'target_key') ;
            $child_table[] = [
                'table_name' => 'fba_table',
                'table_sql' => "select {$fba_rt['field_str']} from fba_table2 group by operation_user_admin_id",
            ] ;
            $json_on = "new_origin_table.operation_user_admin_id = fba_table.operation_user_admin_id AND new_origin_table.user_id = fba_table.user_id ";

        }else if($datas['count_dimension'] == 'all_channels' || $datas['is_count'] == 1){  //按所有店铺 或汇总
            $fba_data['is_count'] = 1 ;
            $fba_data['dimension'] = 'channel' ; //统计店铺有关的维度
            $fba_rt1 = $this->getUnGoodsFbaField(2,"c.id as channel_id ,max(c.site_id) as site_id", 'mysql_key' , $is_currency_exchange) ;
            $fba_field1 = str_replace("{:RATE}", $exchangeCode, $fba_rt1['field_str']);

            if($is_currency_exchange == 1 || !empty(array_intersect(['fba_goods_value','fba_total_ltsf','fba_ltsf_6_12','fba_ltsf_12','fba_estimate_total'],$this->lastTargets ))){
                $table_sql = "select {$fba_field1} from {$this->table_amazon_fba_inventory_tend_v3} as tend LEFT JOIN (select c_tmp.id ,c_tmp.user_id , c_tmp.site_id , c_tmp.merchant_id , area.area_id from  {$this->table_channel} as c_tmp LEFT JOIN {$this->table_area} as area ON area.site_id = c_tmp.site_id where c_tmp.user_id = {$datas['user_id']} ) as c ON tend.user_id = c.user_id AND tend.merchant_id  = c.merchant_id AND tend.area_id = c.area_id " ;
                $table_sql = $this->leftJoinCurrentMonthRate($table_sql,$datas,$currencyInfo,'c');
                $table_sql .= " ".$where."  group by c.id" ;
//                if (empty($currencyInfo) || $currencyInfo['currency_type'] == '1') {
//                    $table_sql = "select {$fba_field1} from {$this->table_amazon_fba_inventory_tend_v3} as tend LEFT JOIN (select c_tmp.id ,c_tmp.user_id , c_tmp.site_id , c_tmp.merchant_id , area.area_id from  {$this->table_channel} as c_tmp LEFT JOIN {$this->table_area} as area ON area.site_id = c_tmp.site_id where c_tmp.user_id = {$datas['user_id']} ) as c ON tend.user_id = c.user_id AND tend.merchant_id  = c.merchant_id AND tend.area_id = c.area_id LEFT JOIN  {$this->table_site_rate} as rates ON rates.site_id = c.site_id AND rates.user_id = 0  ".$where."  group by c.id" ; ;
//                }else{
//                    $table_sql = "select {$fba_field1} from {$this->table_amazon_fba_inventory_tend_v3} as tend LEFT JOIN (select c_tmp.id ,c_tmp.user_id , c_tmp.site_id , c_tmp.merchant_id , area.area_id from  {$this->table_channel} as c_tmp LEFT JOIN {$this->table_area} as area ON area.site_id = c_tmp.site_id where c_tmp.user_id = {$datas['user_id']} ) as c ON tend.user_id = c.user_id AND tend.merchant_id  = c.merchant_id AND tend.area_id = c.area_id LEFT JOIN  {$this->table_site_rate} as rates ON rates.site_id = c.site_id AND rates.user_id = c.user_id   ".$where." group by c.id" ; ;
//                }
            }else{
                $table_sql = "select {$fba_field1} from {$this->table_amazon_fba_inventory_tend_v3} as tend LEFT JOIN (select c_tmp.id ,c_tmp.user_id , c_tmp.site_id , c_tmp.merchant_id , area.area_id from  {$this->table_channel} as c_tmp LEFT JOIN {$this->table_area} as area ON area.site_id = c_tmp.site_id where c_tmp.user_id = {$datas['user_id']} ) as c ON tend.user_id = c.user_id AND tend.merchant_id  = c.merchant_id AND tend.area_id = c.area_id  ".$where."  group by c.id" ;
            }

            $child_table[] = [
                'table_name' => 'fba_table1',
                'table_sql' => $table_sql,
            ] ;
            $fba_rt2 = $this->getUnGoodsFbaField(1,'merchant_id') ;
            $child_table[] = [
                'table_name' => 'fba_table2',
                'table_sql' => "select {$fba_rt2['field_str']} from fba_table1 group by merchant_id,area_id",
            ] ;
            $fba_rt = $this->getUnGoodsFbaField(2,"",'target_key') ;
            $child_table[] = [
                'table_name' => 'fba_table',
                'table_sql' => "select {$fba_rt['field_str']} from fba_table2 group by user_id",
            ] ;
            $json_on = "new_origin_table.user_id = fba_table.user_id " ;
        }

        $other_fields = $this->getUnGoodsFbaOtherField($fields , $custom_fba_target_key) ;

        if(!empty($other_fields)){
            foreach($other_fields as $other_key=>$otherField){
                $other_field_str.= empty($other_field_str) ? ($otherField. ' AS ' . $other_key ) : (' , ' . $otherField. ' AS ' . $other_key) ;
            }
            $fields = array_merge($fields , $other_fields) ;
        }

        $orderby_sort = "";
        if( !empty($datas['sort_target'])  && !empty($datas['sort_order']) ){
            if(in_array($datas['sort_target'], ['fba_turnover_times'])){  //周转次数单独处理
                $orderby_sort = "({$datas['sort_target']}) IS NULL, ({$datas['sort_target']}) {$datas['sort_order']}";
            } else if(!empty($fbaArr[$datas['sort_target']]) ) {
                $orderby_sort = "(fba_table.{$datas['sort_target']}) IS NULL, (fba_table.{$datas['sort_target']}) {$datas['sort_order']}";
            }else if(!empty($custom_fba_target_key) && in_array($datas['sort_target'] , $custom_fba_target_key)) { //自定义指标
                $orderby_sort = "({$datas['sort_target']}) IS NULL, ({$datas['sort_target']}) {$datas['sort_order']}";
            }else{
                $orderby_sort = "(new_origin_table.{$datas['sort_target']}) IS NULL, (new_origin_table.{$datas['sort_target']}) {$datas['sort_order']}";
            }
        }

        if (!empty($datas['order']) && !empty($datas['sort']) && $datas['limit_num'] == 0) {
            if(in_array($datas['sort'], ['fba_turnover_times'])){  //周转次数单独处理
                $orderby_sort = "({$datas['sort']}) IS NULL, ({$datas['sort']}) {$datas['order']}";
            } else if(!empty($fbaArr[$datas['sort']]) ){
                $orderby_sort = "(fba_table.{$datas['sort']}) IS NULL, (fba_table.{$datas['sort']}) {$datas['order']}";
            }else if(!empty($custom_fba_target_key) && in_array($datas['sort'] , $custom_fba_target_key)) { //自定义指标
                $orderby_sort = "({$datas['sort']}) IS NULL, ({$datas['sort']}) {$datas['order']}";
            }else{
                $orderby_sort = "(new_origin_table.{$datas['sort']}) IS NULL, (new_origin_table.{$datas['sort']}) {$datas['order']}";
            }
        }

        if ($datas['count_dimension'] == 'channel_id') {
            if ($datas['count_periods'] > 0 && $datas['show_type'] == '2') {
                if ($datas['count_periods'] == '1') { //按天
                    $orderby = 'new_origin_table.channel_id , new_origin_table.myear , new_origin_table.mmonth , new_origin_table.mday';
                } else if ($datas['count_periods'] == '2' ) { //按周
                    $orderby = 'new_origin_table.channel_id , new_origin_table.mweekyear , new_origin_table.mweek ';
                } else if ($datas['count_periods'] == '3' ) { //按月
                    $orderby = 'new_origin_table.channel_id , new_origin_table.myear , new_origin_table.mmonth';
                } else if ($datas['count_periods'] == '4') {  //按季
                    $orderby = 'new_origin_table.channel_id , new_origin_table.myear , new_origin_table.mquarter';
                } else if ($datas['count_periods'] == '5' ) { //按年
                    $orderby = 'new_origin_table.channel_id , new_origin_table.myear';
                }
            }else{
                $orderby = empty($orderby) ? 'new_origin_table.channel_id ' : ($orderby . ' , new_origin_table.channel_id ');
            }
        } else if ($datas['count_dimension'] == 'site_id') {
            if ($datas['count_periods'] > 0 && $datas['show_type'] == '2') {
                if ($datas['count_periods'] == '1') { //按天
                    $orderby = 'new_origin_table.site_id , new_origin_table.myear , new_origin_table.mmonth , new_origin_table.mday';
                } else if ($datas['count_periods'] == '2' ) { //按周
                    $orderby = 'new_origin_table.site_id , new_origin_table.mweekyear , new_origin_table.mweek ';
                } else if ($datas['count_periods'] == '3' ) { //按月
                    $orderby = 'new_origin_table.site_id , new_origin_table.myear , new_origin_table.mmonth';
                } else if ($datas['count_periods'] == '4') {  //按季
                    $orderby = 'new_origin_table.site_id , new_origin_table.myear , new_origin_table.mquarter';
                } else if ($datas['count_periods'] == '5' ) { //按年
                    $orderby = 'new_origin_table.site_id , new_origin_table.myear';
                }
            }else{
                $orderby = empty($orderby) ? 'new_origin_table.site_id ' : ($orderby . ' , new_origin_table.site_id ');
            }
        } else if ($datas['count_dimension'] == 'department') {
            if ($datas['count_periods'] > 0 && $datas['show_type'] == '2') {
                if ($datas['count_periods'] == '1') { //按天
                    $orderby = 'new_origin_table.level , new_origin_table.user_department_id , new_origin_table.myear , new_origin_table.mmonth , new_origin_table.mday';
                } else if ($datas['count_periods'] == '2' ) { //按周
                    $orderby = 'new_origin_table.level , new_origin_table.user_department_id ,new_origin_table.mweekyear , new_origin_table.mweek ';
                } else if ($datas['count_periods'] == '3' ) { //按月
                    $orderby = 'new_origin_table.level , new_origin_table.user_department_id , new_origin_table.myear , new_origin_table.mmonth';
                } else if ($datas['count_periods'] == '4') {  //按季
                    $orderby = 'new_origin_table.level , new_origin_table.user_department_id , new_origin_table.myear , new_origin_table.mquarter';
                } else if ($datas['count_periods'] == '5' ) { //按年
                    $orderby = 'new_origin_table.level , new_origin_table.user_department_id , new_origin_table.myear';
                }
            }else{
                $orderby = empty($orderby) ? 'new_origin_table.level , new_origin_table.user_department_id ' : ($orderby . ' , new_origin_table.user_department_id ');
            }
        }else if($datas['count_dimension'] == 'admin_id'){
            if ($datas['count_periods'] > 0 && $datas['show_type'] == '2') {
                if ($datas['count_periods'] == '1') { //按天
                    $orderby = 'new_origin_table.admin_id , new_origin_table.myear , new_origin_table.mmonth , new_origin_table.mday';
                } else if ($datas['count_periods'] == '2' ) { //按周
                    $orderby = 'new_origin_table.admin_id , new_origin_table.mweekyear , new_origin_table.mweek ';
                } else if ($datas['count_periods'] == '3' ) { //按月
                    $orderby = 'new_origin_table.admin_id , new_origin_table.myear , new_origin_table.mmonth';
                } else if ($datas['count_periods'] == '4') {  //按季
                    $orderby = 'new_origin_table.admin_id , new_origin_table.myear , new_origin_table.mquarter';
                } else if ($datas['count_periods'] == '5' ) { //按年
                    $orderby = 'new_origin_table.admin_id , new_origin_table.myear';
                }
            } else {
                $orderby = empty($orderby) ? 'new_origin_table.admin_id  ' : ($orderby . ' , new_origin_table.admin_id ');
            }
        }elseif($datas['count_dimension'] == 'channel_operators'){
            if ($datas['count_periods'] > 0 && $datas['show_type'] == '2') {
                if ($datas['count_periods'] == '1') { //按天
                    $orderby = 'new_origin_table.operation_user_admin_id , new_origin_table.myear , new_origin_table.mmonth , new_origin_table.mday';
                } else if ($datas['count_periods'] == '2' ) { //按周
                    $orderby = 'new_origin_table.operation_user_admin_id , new_origin_table.mweekyear , new_origin_table.mweek ';
                } else if ($datas['count_periods'] == '3' ) { //按月
                    $orderby = 'new_origin_table.operation_user_admin_id , new_origin_table.myear , new_origin_table.mmonth';
                } else if ($datas['count_periods'] == '4') {  //按季
                    $orderby = 'new_origin_table.operation_user_admin_id , new_origin_table.myear , new_origin_table.mquarter';
                } else if ($datas['count_periods'] == '5' ) { //按年
                    $orderby = 'new_origin_table.operation_user_admin_id , new_origin_table.myear';
                }
            } else {
                $orderby = empty($orderby) ? 'new_origin_table.operation_user_admin_id  ' : ($orderby . ' , new_origin_table.operation_user_admin_id ');
            }
        }
        if (!empty($orderby_sort)){
            $orderby = "{$orderby_sort}, {$orderby}";
        }

        if($datas['is_count'] == 1){
            $orderby = '' ;
        }

        $target_wheres = $datas['where_detail']['target'] ?? array();
        $condition_relation = $datas['where_detail']['condition_relation'] ?? 'AND';
        if (!empty($target_wheres)) {
            foreach ($target_wheres as $target_where) {
                if(!empty($fields[$target_where['key']]) && (!empty($fbaArr[$target_where['key']]) || (!empty($custom_fba_target_key) && in_array($target_where['key'],$custom_fba_target_key))) ){
                    $where_value = $target_where['value'];
                    if (strpos($where_value, '%') !== false) {
                        $where_value = round($where_value / 100, 4);
                    }
                    //日均
                    $target_where['avg'] = !empty($target_where['avg']) && (int)$target_where['avg'] > 1 ? " / {$target_where['avg']}" : "";
                    if (empty($other_where)) {
                        $other_where .= '(' . '(' .  $fields[$target_where['key']] . ') ' . $target_where['avg'] . ') ' . $target_where['formula'] . $where_value;
                    } else {
                        $other_where .= ' ' .$condition_relation . '(' . '(' .  $fields[$target_where['key']] . ') ' . $target_where['avg'] . ') ' . $target_where['formula'] . $where_value;
                    }
                }

            }
        }

        $fba_data['child_table'] = $child_table;
        $fba_data['join'] = $json_on;
        $fba_data['order'] = $orderby ;
        if(!empty($other_field_str)){
            $other_field_str = str_replace("{:RATE}", $exchangeCode,$other_field_str);
            $fba_data['other_field'] = $other_field_str ;
        }
        if(!empty($other_where)){
            $other_where = str_replace("{:RATE}", $exchangeCode,$other_where);
            $fba_data['where'] = $other_where ;
        }
        if(!empty($result_fba_fields)){
            $fba_data['fba_fields'] = implode(',' , $result_fba_fields) ;
        }
        return $fba_data;
    }

    /**
     *  获取店铺维度FBA的自定义指标和一些特殊的指标
     * @param array $datas
     * @param array $fields 非FBA的指标信息
     * @param array $custom_fba_target_key 包含FBA字段的自定义指标kry
     */
    public function getUnGoodsFbaOtherField($fields = array() , $custom_fba_target_key = array()){
        $other_fields = array() ;
        if(in_array('fba_sales_day' , $this->lastTargets)){
            /*$other_fields['fba_sales_day'] = "(CASE WHEN fba_table.min_available_days_start = fba_table.max_available_days_end THEN cast(CASE WHEN fba_table.max_available_days_end <0 THEN 0 ELSE fba_table.max_available_days_end END as varchar) ELSE concat( cast((CASE WHEN fba_table.min_available_days_start < 0 THEN 0 ELSE fba_table.min_available_days_start END) AS varchar ) ,'~',cast(fba_table.max_available_days_end AS varchar ) ) END )" ;*/
            $other_fields['min_fba_sales_day'] = "fba_table.min_available_days_start" ;
            $other_fields['max_fba_sales_day'] = "fba_table.max_available_days_end" ;
            $other_fields['min_egt0_fba_sales_day'] = "(CASE WHEN fba_table.min_available_days_start > 0 THEN fba_table.min_available_days_start ELSE 0 END)" ;
            $other_fields['max_egt0_fba_sales_day'] = "(CASE WHEN fba_table.max_available_days_end > 0 THEN fba_table.max_available_days_end ELSE 0 END)" ;
            $other_fields['fba_sales_day'] = 1 ;
        }
        if(in_array('fba_suggested_replenishment_time' , $this->lastTargets)){
            /*$other_fields['fba_suggested_replenishment_time'] = "(CASE WHEN fba_table.min_suggested_replenishment_time_start = fba_table.max_suggested_replenishment_time_end THEN (CASE WHEN fba_table.max_suggested_replenishment_time_end <= 0 THEN '当前' ELSE format_datetime(FROM_UNIXTIME(fba_table.max_suggested_replenishment_time_end),'yyyy-MM-dd' ) END ) ELSE concat( (CASE WHEN fba_table.min_suggested_replenishment_time_start <= 0 THEN '当前' ELSE format_datetime(FROM_UNIXTIME(fba_table.min_suggested_replenishment_time_start),'yyyy-MM-dd') END )  ,'~',format_datetime(FROM_UNIXTIME(fba_table.max_suggested_replenishment_time_end),'yyyy-MM-dd')) END )" ;*/
            $other_fields['min_suggested_replenishment_time'] = "(CASE WHEN fba_table.min_suggested_replenishment_time_start > 0 THEN fba_table.min_suggested_replenishment_time_start ELSE 0 END )" ;
            $other_fields['max_suggested_replenishment_time'] = "(CASE WHEN fba_table.max_suggested_replenishment_time_end > 0 THEN fba_table.max_suggested_replenishment_time_end ELSE 0 END)" ;
            $other_fields['fba_suggested_replenishment_time'] = 1 ;
        }
        if(in_array('fba_turnover_times' , $this->lastTargets)){
            $other_fields['fba_turnover_times'] = "(CASE WHEN fba_table.fba_30_day_sale > 0 THEN 1.0000*fba_table.fba_total_stock/fba_table.fba_30_day_sale ELSE 0 END )"  ;
        }
        if(empty($custom_fba_target_key)){
            return $other_fields ;
        }
        if(!empty($other_fields)){
            $fields = array_merge($fields , $other_fields) ;
        }
        $fbaCommonArr = config('common.channel_fba_fields_arr');
        $custom_targets_list = empty($this->customTargetsList) ? array() : $this->customTargetsList ;
        if(!empty($custom_targets_list)){
            foreach ($custom_targets_list as $item) {
                if(in_array($item['target_key'] , $custom_fba_target_key)){
                    $formula_json_arr = $item['formula_json'] ? json_decode($item['formula_json'], true) : [];
                    $formula_fields_arr = $item['formula_fields'] ? explode(",", $item['formula_fields']) : [];
                    $str = $item['formula'];
                    $str = str_replace('/(', ' * 1.0000 /(', $str);//指标数据数据类型为整数
                    foreach ($formula_json_arr as $k => $f_key) {
                        if (!is_numeric($f_key)) {
                            $str = str_replace('/{' . $f_key . '}', ' * 1.0000 /NULLIF({' . $f_key . '},0)', $str);//分母为0的处理
                        }
                    }
                    foreach ($formula_fields_arr as $field) {
                        if(!empty($fields[$field])){
                            if(in_array($field,array_keys($fbaCommonArr))){
                                $str = str_replace('{' . $field . '}', "{$fields[$field]} * 1.0000", $str);
                            }else{
                                $str = str_replace('{' . $field . '}', "new_origin_table.{$field} * 1.0000", $str);
                            }
                        }else {
                            $str = 'NULL';
                        }
                    }
                    $other_fields[$item['target_key']] =  "try(" . $str . ")";
                }
            }

        }

        return $other_fields ;
    }

    /**
     * @author: LWZ
     * @param int $type 1-需要去重 2-不需要去重
     * @param string $other_field 其他字段
     * @param string $fba_field_type mysql_key-FBA字段用的是数据库key ，target_key-FBA字段用的是指标key
     * @param string $is_currency_exchange 是否需要转换汇率 1-是 0-否
     * @return string
     */
    public function getUnGoodsFbaField($type = 1,$other_field = "" ,$fba_field_type = 'mysql_key' ,$is_currency_exchange = 0 ){
        $fields = [];

        $fbaArr = config('common.channel_fba_fields_arr');

        if($type == 1){ //需要去重
            $other_field.= sprintf('%s  max(user_id) as user_id,max(area_id) as area_id,max(channel_id) as channel_id',$other_field ? ',' : '');
            foreach ($this->lastTargets as $target){
                if(isset($fbaArr[$target]) && is_array($fbaArr[$target])){
                    if ($fbaArr[$target]['count_type'] == '1') {
                        $fields[$target] = "(CASE WHEN MAX(area_id) = 4 THEN MAX({$target}) ELSE SUM({$target}) END ) ";
                    } else if($target == 'fba_sales_day'){
                        $fields['min_available_days_start'] = "min(min_available_days_start) ";
                        $fields['max_available_days_end'] = "max(max_available_days_end)";
                    }else if($target == 'fba_suggested_replenishment_time'){
                        $fields['min_suggested_replenishment_time_start'] = "min(min_suggested_replenishment_time_start)";
                        $fields['max_suggested_replenishment_time_end'] = "max(max_suggested_replenishment_time_end) ";
                    }else if ($target == 'fba_turnover_times') { //周转次数单独处理
                        $fields['fba_30_day_sale'] = "(CASE WHEN MAX(area_id) = 4 THEN MAX(fba_30_day_sale) ELSE SUM(fba_30_day_sale) END )";
                        if(!in_array('fba_total_stock',$this->lastTargets)){
                            $fields['fba_total_stock'] = "(CASE WHEN MAX(area_id) = 4 THEN MAX(fba_total_stock) ELSE SUM(fba_total_stock) END) ";
                        }
                    } /*else if ($target == 'fba_marketing_rate') {
                        $fields['fba_marketing_rate'] = "max(fba_marketing_rate) ";
                    } */else if($fbaArr[$target]['count_type'] == '3'){
                        $fields[$target] = "max({$target}) ";
                    }
                }
            }
        }else{  //不需要去重
            if($fba_field_type == 'target_key') {
                $other_field .= sprintf('%s  max(user_id) as user_id ,  max(merchant_id ) as merchant_id , max(area_id) as area_id ', $other_field ? ',' : '');
            }else{
                $other_field .= sprintf('%s  max(tend.user_id) as user_id ,  max(tend.merchant_id ) as merchant_id , max(tend.area_id) as area_id ', $other_field ? ',' : '');
            }
            foreach ($this->lastTargets as $target){
                if(isset($fbaArr[$target]) && is_array($fbaArr[$target])){
                    if($fba_field_type == 'target_key'){
                        if($fbaArr[$target]['count_type'] == '1'){
                            $fields[$target] = "SUM((CASE WHEN {$target} < 0 THEN 0 ELSE {$target} END )) ";
                        }else if($fbaArr[$target]['count_type'] == '2' && $target == 'fba_sales_day'){   //可售天数 单独处理
                            $fields['min_available_days_start'] = "min(min_available_days_start) ";
                            $fields['max_available_days_end'] = "max(max_available_days_end)";
                        }else if($fbaArr[$target]['count_type'] == '2' && $target == 'fba_suggested_replenishment_time'){  //建议补货时间 单独处理
                            $fields['min_suggested_replenishment_time_start'] = "min(min_suggested_replenishment_time_start)";
                            $fields['max_suggested_replenishment_time_end'] = "max(max_suggested_replenishment_time_end) ";
                        }else if($fbaArr[$target]['count_type'] == '3'){
                            $fields[$target] = "MAX((CASE WHEN {$target} < 0 THEN 0 ELSE {$target} END ))";
                        }else if($fbaArr[$target]['count_type'] == '4' && $target == 'fba_turnover_times'){ //周转次数单独处理
                            $fields['fba_30_day_sale'] = "SUM(fba_30_day_sale)";
                            if(!in_array('fba_total_stock' , $this->lastTargets)){
                                $fields['fba_total_stock'] = "SUM(fba_total_stock)";
                            }
                        }
                    }else{
                        if($fbaArr[$target]['count_type'] == '1'){
                            if($is_currency_exchange == 1 && $fbaArr[$target]['data_type'] == '2'){
                                if($target == 'fba_goods_value'){  //在库总成本在数据库存储的为人民币
                                    $fields[$target] = "SUM((CASE WHEN {$fbaArr[$target]['mysql_field']} < 0 THEN 0 ELSE ({$fbaArr[$target]['mysql_field']} * {:RATE} ) END )) ";
                                }else{
                                    $fields[$target] = "SUM((CASE WHEN {$fbaArr[$target]['mysql_field']} < 0 THEN 0 ELSE ({$fbaArr[$target]['mysql_field']} * {:RATE} / COALESCE(rates.fba_rate ,1) ) END )) ";
                                }
                            }else{
                                if($target == 'fba_goods_value'){
                                    $fields[$target] = "SUM((CASE WHEN {$fbaArr[$target]['mysql_field']} < 0 THEN 0 ELSE {$fbaArr[$target]['mysql_field']} * COALESCE(rates.rate ,1) END ))";
                                }elseif(in_array($target,['fba_total_ltsf','fba_ltsf_6_12','fba_ltsf_12','fba_estimate_total'])){
                                    $fields[$target] = "SUM((CASE WHEN {$fbaArr[$target]['mysql_field']} < 0 THEN 0 ELSE {$fbaArr[$target]['mysql_field']} * (COALESCE(rates.rate ,1) / COALESCE(rates.fba_rate ,1)) END ))";
                                }else{
                                    $fields[$target] = "SUM((CASE WHEN {$fbaArr[$target]['mysql_field']} < 0 THEN 0 ELSE {$fbaArr[$target]['mysql_field']} END ))";
                                }
                            }
                        }else if($fbaArr[$target]['count_type'] == '2' && $target == 'fba_sales_day'){   //可售天数 单独处理
                            $fields['min_available_days_start'] = "min(available_days_start) ";
                            $fields['max_available_days_end'] = "max(available_days_end)";
                        }else if($fbaArr[$target]['count_type'] == '2' && $target == 'fba_suggested_replenishment_time'){  //建议补货时间 单独处理
                            $fields['min_suggested_replenishment_time_start'] = "min(suggested_replenishment_time_start) ";
                            $fields['max_suggested_replenishment_time_end'] = "max(suggested_replenishment_time_end)";
                        }else if($fbaArr[$target]['count_type'] == '3'){
                            $fields[$target] = "MAX((CASE WHEN {$fbaArr[$target]['mysql_field']} < 0 THEN 0 ELSE {$fbaArr[$target]['mysql_field']} END )) ";
                        }else if($fbaArr[$target]['count_type'] == '4' && $target == 'fba_turnover_times'){ //周转次数单独处理

                            $fields['fba_30_day_sale'] = "SUM(_30_day_sale) ";
                            if(!in_array('fba_total_stock' , $this->lastTargets)){
                                $fields['fba_total_stock'] = "SUM(available_stock) ";
                            }
                        }
                    }
                }
            }
        }
        $field_str = $other_field ;
        if(!empty($fields)){
            foreach($fields as $k=>$f){
                $field_str.= " , " . $f . " AS " . $k ;
            }
        }
        $rt = array() ;
        $rt['field_str'] = $field_str ;
        $rt['field_arr'] = $fields ;
        return $rt;
    }

    /**
     * @author: 林志敏
     * @param int $type 1-需要去重 2-不需要去重 3-fba_table1 4-最终sql的field
     * @param string $other_field 其他字段
     * @param array $datas
     * @param int $datas
     * @return string
     */
    public function getGoodsFbaField($type = 1,$other_field = "",$datas = array(),$exchangeCode = '1'){
        $fields = [];
        $fbaArr = config('common.goods_fba_fields_arr');
        if($type == 1){ //需要去重
            $other_field.= sprintf('%s max(g.user_id) as user_id,max(g.area_id) as area_id,max(g.channel_id) as channel_id',$other_field ? ',' : '');
            foreach ($this->lastTargets as $target){
                if(isset($fbaArr[$target]) && is_array($fbaArr[$target])){
                    if($target == 'fba_is_buhuo'){
                        $fields[] = "MAX(g.buhuo_user) as buhuo_user";
                    }
                    if($target == 'fba_suggested_replenishment_time'){
                        $fields[] = "MAX(g.available_days) as fba_sales_day_tmp";
                    }
                    if(!empty($fbaArr[$target]['rel_field_status'])){
                        //rel不需要去重
                        if(!$datas['need_review_fba'] && $fbaArr[$target]['count_type'] == '5') {
                            $fields[] = "SUM(g.{$fbaArr[$target]['mysql_field']}) as {$fbaArr[$target]['mysql_field']}";
                        }elseif($fbaArr[$target]['count_type'] == '4'){
                            if(!empty($fbaArr[$target]['child_key'])){
                                foreach ($fbaArr[$target]['child_key'] as $child_key){
                                    $fields[] = "SUM(g.{$fbaArr[$child_key]['mysql_field']}) as {$fbaArr[$child_key]['mysql_field']}";
                                }
                            }
                        }else{
                            $fields[] = "SUM(g.{$fbaArr[$target]['mysql_field']}) as {$fbaArr[$target]['mysql_field']}";
                        }
                    }elseif($fbaArr[$target]['count_type'] == '5'){
                        $fields[] = "( CASE WHEN MAX(g.area_id) = 4 THEN MAX(g.{$fbaArr[$target]['mysql_field']}) ELSE AVG(g.{$fbaArr[$target]['mysql_field']}) END ) as {$fbaArr[$target]['mysql_field']}";
                    }else{
                        $fields[] = "( CASE WHEN MAX(g.area_id) = 4 THEN MAX(g.{$fbaArr[$target]['mysql_field']}) ELSE SUM(g.{$fbaArr[$target]['mysql_field']}) END ) as {$fbaArr[$target]['mysql_field']}";
                    }
                }
            }
        }elseif($type == 2){  //不需要去重
            $other_field.= sprintf('%s  max(user_id) as user_id, max(area_id) as area_id , max(channel_id) as channel_id',$other_field ? ',' : '');
            foreach ($this->lastTargets as $target){
                if(isset($fbaArr[$target]) && is_array($fbaArr[$target])){
                    if($target == 'fba_is_buhuo'){
                        $fields[] = "MAX(buhuo_user) as fba_buhuo_user";
                    }
                    if($target == 'fba_suggested_replenishment_time'){
                        $fields[] = "MAX(available_days) as fba_sales_day_tmp";
                    }
                    if($datas['count_dimension'] == 'sku' && $datas['is_distinct_channel'] == 1 && empty($datas['is_count']) && in_array($target,['fba_day_sale','fba_special_purpose'])){
                        //仅sku区分店铺
                        $fields[] = "MAX({$fbaArr[$target]['mysql_field']}) as {$target}";
                    }elseif($fbaArr[$target]['count_type'] == '4') {
                        if (!empty($fbaArr[$target]['child_key'])) {
                            foreach ($fbaArr[$target]['child_key'] as $child_key) {
                                $fields[] = "SUM((CASE WHEN {$fbaArr[$child_key]['mysql_field']} < 0 THEN 0 ELSE {$fbaArr[$child_key]['mysql_field']} END )) as {$child_key}";
                            }
                        }
                    }elseif(!$datas['need_review_fba'] && $fbaArr[$target]['count_type'] == '5'){
                        $fields[] = "SUM((CASE WHEN {$fbaArr[$target]['mysql_field']} < 0 THEN 0 ELSE {$fbaArr[$target]['mysql_field']} END )) as {$target}";
                    }elseif($fbaArr[$target]['count_type'] == '3' && !empty($fbaArr[$target]['only_sku'])){
                        //仅区分店铺sku
                        $fields[] = "MAX({$fbaArr[$target]['mysql_field']}) as {$target}";
                    }else{
                        $fields[] = "SUM((CASE WHEN {$fbaArr[$target]['mysql_field']} < 0 THEN 0 ELSE {$fbaArr[$target]['mysql_field']} END )) as {$target}";
                    }
                }
            }
        }elseif($type == 3){ //fba_table1
            foreach ($this->lastTargets as $target) {
                if(isset($fbaArr[$target]) && is_array($fbaArr[$target])) {
                    if($target == 'fba_is_buhuo'){
                        $fields[] = "g.buhuo_user";
                    }
                    if($target == 'fba_suggested_replenishment_time'){
                        $fields[] = "g.available_days";
                    }
                    if($fbaArr[$target]['count_type'] == '4'){
                        if(!empty($fbaArr[$target]['child_key'])){
                            foreach ($fbaArr[$target]['child_key'] as $child_key) {
                                $alias = !empty($fbaArr[$child_key]['rel_field_status']) ? "rel" : "g";
                                if ($fbaArr[$child_key]['data_type'] == 2) {
                                    if ($datas['currency_code'] == 'ORIGIN') {
                                        if(in_array($child_key,['fba_yjzhz','fba_glhz'])){
                                            $fields[] = "{$alias}.{$fbaArr[$child_key]['mysql_field']} * COALESCE(rates.rate ,1) as {$fbaArr[$child_key]['mysql_field']}";
                                        }elseif(in_array($child_key,['fba_total_ltsf','fba_ltsf_6_12','fba_ltsf_12','fba_ccf','fba_ccf_every','fba_glccf'])){
                                            $fields[] = "{$alias}.{$fbaArr[$child_key]['mysql_field']} * (COALESCE(rates.rate ,1) / COALESCE(rates.fba_rate ,1)) as {$fbaArr[$child_key]['mysql_field']}";
                                        }else{
                                            $fields[] = "{$alias}.{$fbaArr[$child_key]['mysql_field']}";
                                        }
                                    } else {
                                        if(in_array($child_key,['fba_yjzhz','fba_glhz'])){
                                            $fields[] = "{$alias}.{$fbaArr[$child_key]['mysql_field']} * {$exchangeCode} as {$fbaArr[$child_key]['mysql_field']}";
                                        }else{
                                            $fields[] = "{$alias}.{$fbaArr[$child_key]['mysql_field']} * ({$exchangeCode} / COALESCE(rates.fba_rate ,1)) as {$fbaArr[$child_key]['mysql_field']}";
                                        }
                                    }
                                } else {
                                    $fields[] = "{$alias}.{$fbaArr[$child_key]['mysql_field']}";
                                }
                            }
                        }
                    }else{
                        $alias = !empty($fbaArr[$target]['rel_field_status']) ? "rel" : "g";
                        $field_prefix = !empty($fbaArr[$target]['uk_status']) ? "IF({$alias}.{$fbaArr[$target]['mysql_field']}_uk > 0,{$alias}.{$fbaArr[$target]['mysql_field']}_uk,{$alias}.{$fbaArr[$target]['mysql_field']})" : "{$alias}.{$fbaArr[$target]['mysql_field']}";
                        $field_suffix = !empty($fbaArr[$target]['uk_status']) ? " as {$fbaArr[$target]['mysql_field']}" : "";
                        if ($fbaArr[$target]['data_type'] == 2) {
                            if ($datas['currency_code'] == 'ORIGIN') {
                                if(in_array($target,['fba_yjzhz','fba_glhz'])){
                                    $fields[] = "{$alias}.{$fbaArr[$target]['mysql_field']} * COALESCE(rates.rate ,1) as {$fbaArr[$target]['mysql_field']}";
                                }elseif(in_array($target,['fba_total_ltsf','fba_ltsf_6_12','fba_ltsf_12','fba_ccf','fba_ccf_every','fba_glccf'])){
                                    $fields[] = "{$alias}.{$fbaArr[$target]['mysql_field']} * (COALESCE(rates.rate ,1) / COALESCE(rates.fba_rate ,1)) as {$fbaArr[$target]['mysql_field']}";
                                }else{
                                    $fields[] = $field_prefix . $field_suffix;
                                }
                            } else {
                                if(in_array($target,['fba_yjzhz','fba_glhz'])){
                                    $fields[] = "{$alias}.{$fbaArr[$target]['mysql_field']} * {$exchangeCode} as {$fbaArr[$target]['mysql_field']}";
                                }else{
                                    $fields[] = "{$field_prefix} * ({$exchangeCode} / COALESCE(rates.fba_rate ,1))" . $field_suffix;
                                }
                            }
                        } else {
                            $fields[] = $field_prefix . $field_suffix;
                        }
                    }
                }
            }
        }else{
            foreach ($this->lastTargets as $target) {
                if(isset($fbaArr[$target]) && is_array($fbaArr[$target])) {
                    if($target == 'fba_is_buhuo'){
                        $fields[] = "fba_table.fba_buhuo_user";
                    }
                    if($target == 'fba_suggested_replenishment_time'){
                        $fields[] = "fba_table.fba_sales_day_tmp";
                    }
                    if($fbaArr[$target]['count_type'] == '4'){
                        $fields[] = "{$fbaArr[$target]['mysql_field']} as {$target}";
                    }else{
                        $fields[] = "fba_table.{$target}";
                    }
                }
            }
        }
        $fields = array_unique($fields);
        $other_field = !empty($other_field) ? $other_field . "," : "";
        $field = !empty($fields)  ? $other_field . implode(',',$fields) : $other_field;
        return $field;
    }

    /**
     * erp库存明细指标
     * @param $datas
     * @param $userId
     * @param $channelIds
     * @param $is_count
     * @return string
     */
    protected function getErpIskuTable($datas, $userId, $channelIds, $is_count = 0){
        $childFields = "SUM(isku_temp.good_num) AS ark_erp_good_num, SUM(isku_temp.bad_num) AS ark_erp_bad_num, SUM(isku_temp.lock_num + isku_temp.lock_num_work_order + isku_temp.lock_num_shipment_order) AS ark_erp_lock_num, SUM(isku_temp.purchasing_num) AS ark_erp_purchasing_num, SUM(isku_temp.send_num) AS ark_erp_send_num, SUM(isku_temp.goods_cost * isku_temp.total_num) AS ark_erp_goods_cost_total, SUM(isku_temp.total_num) AS ark_erp_total_num";
        $childTable = "{$this->table_erp_storage_warehouse_isku} AS isku_temp";
        $groupField = "isku_temp.isku_id";
        $childJoin = $is_count == 1 ? "warehouse_isku.isku_id = report_inner.isku_id" : "warehouse_isku.isku_id = amazon_goods.goods_isku_id";
        $goodsIskuWhere = "";
        if ($datas['count_dimension'] == 'head_id')
        {
            $childTable .= " LEFT JOIN {$this->table_amazon_goods_isku} AS goods_isku_temp ON isku_temp.isku_id = goods_isku_temp.id";
            $groupField = "goods_isku_temp.head_id";
            $childJoin = $is_count == 1 ? "warehouse_isku.head_id = report_inner.head_id" : "warehouse_isku.head_id = amazon_goods.isku_head_id";
            $goodsIskuWhere = "  AND goods_isku_temp.db_num ='{$this->dbhost}' AND goods_isku_temp.user_id = {$userId} AND goods_isku_temp.status = 1 AND goods_isku_temp.head_id > 0";
        }
        elseif ($datas['count_dimension'] == 'developer_id')
        {
            $childTable .= " LEFT JOIN {$this->table_amazon_goods_isku} AS goods_isku_temp ON isku_temp.isku_id = goods_isku_temp.id";
            $groupField = "goods_isku_temp.developer_id";
            $childJoin = $is_count == 1 ? "warehouse_isku.developer_id = report_inner.developer_id" : "warehouse_isku.developer_id = amazon_goods.isku_developer_id";
            $goodsIskuWhere = "  AND goods_isku_temp.db_num ='{$this->dbhost}' AND goods_isku_temp.user_id = {$userId} AND goods_isku_temp.status = 1 AND goods_isku_temp.developer_id > 0";
        }
        $childFields .= ", {$groupField}";
        $childWhere = "isku_temp.db_num = '{$this->dbhost}' AND isku_temp.user_id = {$userId} AND isku_temp.is_delete = 0";
        if (!empty($goodsIskuWhere)){
            $childWhere .= $goodsIskuWhere;
        }

        $childSql = "SELECT {$childFields} FROM {$childTable} WHERE {$childWhere} GROUP BY {$groupField}";
        $erpIskuTable = " LEFT JOIN ({$childSql}) AS warehouse_isku ON {$childJoin}";
        return $erpIskuTable;
    }

    protected function getTimeErpReportData($datas, $fields, $exchangeCode){
        $origin_fields = [];
        $query_fields = [];
        foreach ($fields as $key => $val){
            if (stripos($val, "warehouse_storage.") !== false){
                $query_fields[] = "{$val} AS \"{$key}\"";
            }else{
                $origin_fields[] = "{$val} AS \"{$key}\"";
                if(stripos($val, "min(") !== false){
                    $query_fields[] = "min(report_inner.{$key}) AS \"{$key}\"";
                }elseif (stripos($val,"max(") !== false){
                    if ($key == 'group'){
                        $left_key = '"group"';
                    }else{
                        $left_key = $key;
                    }
                    $query_fields[] = "max(report_inner.{$left_key}) AS \"{$key}\"";
                }elseif (stripos($val,"count(") !== false){
                    $query_fields[] = "max(report_inner.{$key}) AS \"{$key}\"";
                }elseif($val == 'NULL'){
                    $query_fields[] = "NULL AS \"{$key}\"";
                }else{
                    $query_fields[] = "SUM(report_inner.{$key}) AS \"{$key}\"";
                }
            }
        }
        $origin_fields[] = "max(report.myear) AS \"myear\"";
        $origin_fields[] = "max(report.mmonth) AS \"mmonth\"";
        $origin_fields_tmp = str_replace("{:RATE}", $exchangeCode, implode(',', $origin_fields));
        $query_fields_tmp = str_replace("{:RATE}", $exchangeCode, implode(',', $query_fields));

        $query_group = "report_inner.isku_id";
        $query_order = "report_inner.isku_id";
        if ($datas['count_dimension'] == 'head_id')
        {
            $query_group = "report_inner.head_id";
            $query_order = "report_inner.head_id";
        }
        elseif ($datas['count_dimension'] == 'developer_id')
        {
            $query_group = "report_inner.developer_id";
            $query_order = "report_inner.developer_id";
        }
        if (!empty($datas['sort']) && !empty($datas['order'])){
            $query_order = "\"{$datas['sort']}\" {$datas['order']}, {$query_order}";
        }

        return [
            'origin_fields' => $origin_fields_tmp,
            'query_fields' => $query_fields_tmp,
            'query_group' => $query_group,
            'query_order' => $query_order
        ];
    }

    /**
     * erp进销存指标 跨月取最新月数据
     * @param $datas
     * @param $userId
     * @param $channelIds
     * @param $is_count
     * @return string
     */
    protected function getErpReportTable($datas, $userId, $channelIds, $is_count = 0){
        $reportFieldsConfig = config('common.erp_report_fields_arr');
        $reportFieldsArr = [];
        foreach ($this->lastTargets as $val){
            if (isset($reportFieldsConfig[$val])){
                $tempField = $reportFieldsConfig[$val]['mysql_field'];
                if ($val == 'erp_period_start_goods_cost_begin'){
                    $reportFieldsArr[$val] = "SUM(storage_temp.{$tempField}) AS {$val}";
                    $reportFieldsArr["{$val}_min"] = "min(storage_temp.{$tempField}) AS {$val}_min";
                    $reportFieldsArr["{$val}_max"] = "max(storage_temp.{$tempField}) AS {$val}_max";
                }elseif ($val == 'erp_period_end_goods_cost_end'){
                    $reportFieldsArr[$val] = "SUM(storage_temp.{$tempField}) AS {$val}";
                    $reportFieldsArr["{$val}_min"] = "min(storage_temp.{$tempField}) AS {$val}_min";
                    $reportFieldsArr["{$val}_max"] = "max(storage_temp.{$tempField}) AS {$val}_max";
                }elseif ($val == 'erp_period_current_stock_rate'){
                    $reportFieldsArr['erp_period_current_stock_rate'] = "SUM(storage_temp.out_cost * 2) / NULLIF(SUM(storage_temp.goods_cost_total_begin + storage_temp.goods_cost_total_end), 0) AS erp_period_current_stock_rate";
                    $reportFieldsArr['erp_period_current_out_cost'] = "SUM(storage_temp.out_cost) AS erp_period_current_out_cost";
                    $reportFieldsArr['erp_period_start_goods_cost_total_begin'] = "SUM(storage_temp.goods_cost_total_begin) AS erp_period_start_goods_cost_total_begin";
                    $reportFieldsArr['erp_period_end_goods_cost_total_end'] = "SUM(storage_temp.goods_cost_total_end) AS erp_period_end_goods_cost_total_end";
                }else{
                    $reportFieldsArr[$val] = "SUM(storage_temp.{$tempField}) AS {$val}";
                }
            }
        }
        $reportFieldsArr[] = "max(storage_temp.time) AS time";
        $reportFieldsArr[] = "max(storage_temp.year) AS year";
        $reportFieldsArr[] = "max(storage_temp.month) AS month";

        $childFields = implode(',', $reportFieldsArr);
        $childTable = "{$this->table_erp_storage_inventory_warehouse_report} AS storage_temp";

        $groupField = "storage_temp.isku_id";
        $groupFieldValue = "isku_id";
        $childJoin = $is_count == 1 || $datas['show_type'] == 1 ? "warehouse_storage.isku_id = report_inner.isku_id" : "warehouse_storage.isku_id = amazon_goods.goods_isku_id";
        $goodsIskuWhere = "";
        if ($datas['count_dimension'] == 'head_id')
        {
            $childTable .= " LEFT JOIN {$this->table_amazon_goods_isku} AS goods_isku_temp ON storage_temp.isku_id = goods_isku_temp.id";
            $groupField = "goods_isku_temp.head_id";
            $groupFieldValue = "head_id";
            $childJoin = $is_count == 1 || $datas['show_type'] == 1 ? "warehouse_storage.head_id = report_inner.head_id" : "warehouse_storage.head_id = amazon_goods.isku_head_id";
            $goodsIskuWhere = " AND goods_isku_temp.db_num = '{$this->dbhost}' AND goods_isku_temp.user_id = {$userId} AND goods_isku_temp.status = 1 AND goods_isku_temp.head_id > 0";
        }
        elseif ($datas['count_dimension'] == 'developer_id')
        {
            $childTable .= " LEFT JOIN {$this->table_amazon_goods_isku} AS goods_isku_temp ON storage_temp.isku_id = goods_isku_temp.id";
            $groupField = "goods_isku_temp.developer_id";
            $groupFieldValue = "developer_id";
            $childJoin = $is_count == 1 || $datas['show_type'] == 1 ? "warehouse_storage.developer_id = report_inner.developer_id" : "warehouse_storage.developer_id = amazon_goods.isku_developer_id";
            $goodsIskuWhere = " AND goods_isku_temp.db_num = '{$this->dbhost}' AND goods_isku_temp.user_id = {$userId} AND goods_isku_temp.status = 1 AND goods_isku_temp.developer_id > 0";
        }
        $childFields .= ", max({$groupField}) AS {$groupFieldValue}";
        $childGroup = "{$groupField}, storage_temp.year, storage_temp.month";

        if($datas['count_periods'] == 5){
            $maxMinYm = $this->calculateYn($datas['max_ym'], $datas['min_ym']);
            $newestMonth = [];
            foreach ($maxMinYm as $ym){
                $year = substr($ym, 0, 4);
                $month = substr($ym, 4);
                if (empty($newestMonth[$year])){
                    $newestMonth[$year] = [
                        'month' => $month,
                        'ym' => $ym
                    ];
                }else{
                    $exit_month = $newestMonth[$year]['month'];
                    if ($month > $exit_month){
                        $newestMonth[$year] = [
                            'month' => $month,
                            'ym' => $ym
                        ];
                    }
                }
            }
            $yearMonth = implode(',', array_column($newestMonth, 'ym'));
        }
        else if($datas['count_periods'] == 4)
        {
            $maxMinYm = $this->calculateYn($datas['max_ym'], $datas['min_ym']);
            $newestMonth = [];
            foreach ($maxMinYm as $ym){
                $year = substr($ym, 0, 4);
                $month = substr($ym, 4);
                $quarter = floor(($month - 1) / 3) + 1;
                $temp_key = $year."_".$quarter;
                if (empty($newestMonth[$temp_key])){
                    $newestMonth[$temp_key] = [
                        'month' => $month,
                        'ym' => $ym
                    ];
                }else{
                    $exit_month = $newestMonth[$temp_key]['month'];
                    if ($month > $exit_month){
                        $newestMonth[$temp_key] = [
                            'month' => $month,
                            'ym' => $ym
                        ];
                    }
                }
            }
            $yearMonth = implode(',', array_column($newestMonth, 'ym'));
        }
        else if($datas['count_periods'] == 0)
        {
            $year = intval(substr($datas['max_ym'], 0, 4));
            $month = intval(substr($datas['max_ym'], 4));
            $yearMonth = $year.$month;
        }
        else{
            $maxMinYm = $this->calculateYn($datas['max_ym'], $datas['min_ym']);
            $yearMonth = implode(',', $maxMinYm);
        }

        $childWhere = "storage_temp.db_num = '{$this->dbhost}' AND storage_temp.user_id = {$userId} AND storage_temp.warehouse_id > 0";
        if (!empty($yearMonth)){
            $childWhere .= " AND storage_temp.time_str IN({$yearMonth})";
        }
        if (!empty($goodsIskuWhere)){
            $childWhere .= $goodsIskuWhere;
        }

        $childSql = "SELECT {$childFields} FROM {$childTable} WHERE {$childWhere} GROUP BY {$childGroup}";

        $erpReportTable = " LEFT JOIN ({$childSql}) AS warehouse_storage ON {$childJoin}";
        if ($is_count  || $datas['show_type'] == 1){
            $erpReportTable .= " AND warehouse_storage.year = report_inner.myear AND warehouse_storage.month = report_inner.mmonth";
        }else{
            $erpReportTable .= " AND CAST(warehouse_storage.year AS INTEGER) = report.myear AND CAST(warehouse_storage.month AS INTEGER) = report.mmonth";
        }

        return $erpReportTable;
    }

    /**
     *  获取商品维度FBA的自定义指标和一些特殊的指标
     * @param array $datas
     * @param array $fields 非FBA的指标信息
     * @param array $custom_fba_target_key 包含FBA字段的自定义指标kry
     */
    public function getGoodsFbaOtherField($custom_fba_target_key = array()){
        $other_fields = array() ;
        if(empty($custom_fba_target_key)){
            return $other_fields ;
        }

        $custom_targets_list = empty($this->customTargetsList) ? array() : $this->customTargetsList ;
        $fbaCommonArr = config('common.goods_fba_fields_arr');
        if(!empty($custom_targets_list)){
            foreach ($custom_targets_list as $item) {
                if(in_array($item['target_key'] , $custom_fba_target_key)){
                    $formula_json_arr = $item['formula_json'] ? json_decode($item['formula_json'], true) : [];
                    $formula_fields_arr = $item['formula_fields'] ? explode(",", $item['formula_fields']) : [];
                    $str = $item['formula'];
                    $str = str_replace('/(', ' * 1.0000 /(', $str);//指标数据数据类型为整数
                    foreach ($formula_json_arr as $k => $f_key) {
                        if (!is_numeric($f_key)) {
                            $str = str_replace('/{' . $f_key . '}', ' * 1.0000 /NULLIF({' . $f_key . '},0)', $str);//分母为0的处理
                        }
                    }
                    foreach ($formula_fields_arr as $field) {
                        if($field == 'fba_replenishment_quantity'){
                            //含有建议补货数量自定义公式，特殊处理
                            $str = str_replace('{fba_replenishment_quantity}',"IF(fba_table.fba_replenishment_quantity < 0,if(fba_table.fba_replenishment_quantity = -111111,null,0),fba_table.fba_replenishment_quantity)",$str);
                        }elseif(in_array($field,['fba_sales_day','fba_day_sale','fba_special_purpose'])){
                            //含有可售天数、日均销量、FBA专用自定义公式，特殊处理
                            $str = str_replace('{' . $field . '}',"NULLIF(fba_table.{$field},-111111)",$str);
                        }elseif(in_array($field,array_keys($fbaCommonArr))){
                            $str = str_replace('{' . $field . '}', "fba_table.{$field} * 1.0000", $str);
                        }else{
                            $str = str_replace('{' . $field . '}', "new_origin_table.{$field} * 1.0000", $str);
                        }
                    }
                    $other_fields[$item['target_key']] =  "try(" . $str . ")";
                }
            }
        }
        return $other_fields ;
    }


    private function queryHaveErpList($fields, $datas, $exchangeCode, $day_param, $field_data, $table, $where, $group, $isJoin = false, $isMysql = false, $compare_data = [], $fba_data = [], $other_param = []){
        $userId = $other_param['user_id'];
        $channelIds = $other_param['channel_arr'];
        $erp_isku_fields_arr = array_keys(config('common.erp_isku_fields_arr'));
        $erp_report_fields_arr = array_keys(config('common.erp_report_fields_arr'));

        $fields_tmp = [];
        $rate_formula_key = array_keys($this->rate_formula);
        $operational_char_arr = array(".","+", "-", "*", "/", "", "(", ")");
        $query_origin_fields = [];
        $query_inner_fields = [];
        $map_rate_fields = [];
        //自定义公式
        if ($datas['show_type'] == 2 && $this->customTargetsList){
            foreach ($this->customTargetsList as $val){
                if ($val['target_type'] == 2){
                    $rate_formula_key[] = $val['target_key'];
                    $this->rate_formula[$val['target_key']] = [
                        'formula' => $val['formula'],
                        'formula_json' => $val['formula_json'],
                        'formula_fields' => explode(',', $val['formula_fields']),
                    ];
                }
            }
        }elseif ($datas['show_type'] == 1 && $this->timeCustomTarget && $this->timeCustomTarget['target_type'] == 2){
            $rate_formula_key[] = $this->timeCustomTarget['target_key'];
            $this->rate_formula[$this->timeCustomTarget['target_key']] = [
                'formula' => $this->timeCustomTarget['formula'],
                'formula_json' => $this->timeCustomTarget['formula_json'],
                'formula_fields' => explode(',', $this->timeCustomTarget['formula_fields'])
            ];
        }

        foreach ($fields as $key => $value){
            $key_value = $key;
            if(in_array($key,$rate_formula_key)){
                $str = $this->rate_formula[$key]['formula'] ;
                $formula_json_arr = json_decode($this->rate_formula[$key]['formula_json'],true) ;
                $str = str_replace('/(', ' * 1.0000 /(', $str);//指标数据数据类型为整数
                $tmp_str = $str;
                foreach ($formula_json_arr as $k => $f_key) {
                    if(!in_array($f_key,$operational_char_arr)) {
                        if (!is_numeric($f_key)) {
                            if($datas['count_dimension'] == 'operators'){
                                $str = str_replace('{cpc_cost}','SUM(report_inner.cpc_ad_fee) ', $str);//分母为0的处理
                            }
                            if (in_array($f_key, $erp_isku_fields_arr)){
                                $table_name = "warehouse_isku";
                            }elseif (in_array($f_key, $erp_report_fields_arr)){
                                $table_name = "warehouse_storage";
                            }else{
                                $table_name = "report_inner";
                            }
                            $str = str_replace('/{total_views_number}', ' * 1.0000 /NULLIF(' . $this->total_views_numbers['total_views_number'] . ',0)', $str);//分母为0的处理
                            $str = str_replace('/{total_user_sessions}', ' * 1.0000 /NULLIF(' . $this->total_user_sessions['total_user_sessions'] . ',0)', $str);//分母为0的处理
                            $str = str_replace('/{' . $f_key . '}', " * 1.0000 /NULLIF(SUM({$table_name}." . $f_key . '),0)', $str);//分母为0的处理
                            $str = str_replace('{' . $f_key . '}', "SUM({$table_name}." . $f_key . ') ', $str);//分母为0的处理
                            $tmp_str = str_replace('/{' . $f_key . '}', " * 1.0000 /NULLIF(SUM(report_tmp." . $f_key . '),0)', $tmp_str);
                            $tmp_str = str_replace('{' . $f_key . '}', 'SUM(report_tmp.' . $f_key . ') ', $tmp_str);
                        }
                    }
                }
                $fields_tmp[] = "({$tmp_str}) AS \"{$key_value}\"";
                $query_inner_fields[] = "try(" . $str . ")" . ' AS "' . $key_value . '"';
                $map_rate_fields[$key] = $str;
            }else{
                //子查询
                if (stripos($value, "warehouse_isku.") !== false){
                    $query_inner_fields[] = "{$value} AS \"{$key}\"";
                }elseif (stripos($value, "warehouse_storage.") !== false){
                    $query_inner_fields[] = "{$value} AS \"{$key}\"";
                }else{
                    $query_origin_fields[] = "{$value} AS \"{$key}\"";
                    if(stripos($value,"min(") !== false){
                        $query_inner_fields[] = "min(report_inner.{$key}) AS \"{$key}\"";
                    }elseif (stripos($value,"max(") !== false || stripos($value,"array_join(") !== false){
                        if ($key == 'group'){
                            $left_key = "report_inner.\"{$key}\"";
                        }else{
                            $left_key = "report_inner.{$key}";
                        }
                        $query_inner_fields[] = "max({$left_key}) AS \"{$key}\"";
                    }elseif (stripos($value,"count(") !== false){
                        $query_inner_fields[] = "max(report_inner.{$key}) AS \"{$key}\"";
                    }elseif($value == 'NULL'){
                        $query_inner_fields[] = "NULL AS \"{$key}\"";
                    }else{
                        $query_inner_fields[] = "SUM(report_inner.{$key}) AS \"{$key}\"";
                    }
                }

                if(stripos($value,"min(") !== false){
                    $fields_tmp[] = "min(report_tmp.{$key}) " . ' AS "' . $key_value . '"';
                }elseif (stripos($value,"max(") !== false || stripos($value,"array_join(") !== false){
                    if ($key == 'group'){
                        $left_key = "report_tmp.\"{$key}\"";
                    }else{
                        $left_key = "report_tmp.{$key}";
                    }
                    $fields_tmp[] = "max({$left_key}) " . ' AS "' . $key_value . '"';
                }elseif (stripos($value,"count(") !== false){
                    $fields_tmp[] = "max(report_tmp.{$key}) " . ' AS "' . $key_value . '"';
                }elseif($value == 'NULL'){
                    $fields_tmp[] = "NULL" . ' AS "' . $key_value . '"';
                }else{
                    $fields_tmp[] = "SUM(report_tmp.{$key}) " . ' AS "' . $key_value . '"';
                }
            }
        }
        $field_data_tmp = str_replace("{:RATE}", $exchangeCode, implode(',', $fields_tmp));
        $field_data_tmp = str_replace("{:ERP_RATE}", $exchangeCode, $field_data_tmp);
        $field_data_tmp = str_replace("{:DAY}", $day_param, $field_data_tmp);
        $query_origin_fields[] = "max(report.myear) AS myear";
        $query_origin_fields[] = "max(report.mmonth) AS mmonth";
        $query_origin_fields[] = "max(report.mquarter) AS mquarter";
        $query_origin_fields_tmp = str_replace("{:RATE}", $exchangeCode, implode(',', $query_origin_fields));
        $query_inner_fields_tmp = str_replace("{:RATE}", $exchangeCode, implode(',', $query_inner_fields));
        $query_origin_fields_tmp = str_replace("{:ERP_RATE}", $exchangeCode, $query_origin_fields_tmp);
        $query_inner_fields_tmp = str_replace("{:ERP_RATE}", $exchangeCode, $query_inner_fields_tmp);

        //组装子查询
        if ($datas['count_dimension'] == 'head_id'){
            $group_inner = $this->haveErpReportFields ? "amazon_goods.isku_head_id,report.myear,report.mmonth" : "amazon_goods.isku_head_id";
            $group_outer = "report_inner.head_id";
        }elseif ($datas['count_dimension'] == 'developer_id'){
            $group_inner = $this->haveErpReportFields ? "amazon_goods.isku_developer_id,report.myear,report.mmonth" : "amazon_goods.isku_developer_id";
            $group_outer = "report_inner.developer_id";
        }else{
            $group_inner = $this->haveErpReportFields ? "amazon_goods.goods_isku_id,report.myear,report.mmonth" : "amazon_goods.goods_isku_id";
            $group_outer = "report_inner.isku_id";
        }

        if ($this->haveErpReportFields){
            if ($datas['count_periods'] == 5){
                $group_outer.= ", report_inner.myear";
            }elseif ($datas['count_periods'] == 4){
                $group_outer.= ", report_inner.mquarter";
            }elseif ($datas['count_periods'] == 3){
                $group_outer.= ", report_inner.mmonth";
            }
        }

        $have_outer = "";
        if (!empty($datas['where_detail']['target'])){
            $have_outer_arr = [];
            foreach ($datas['where_detail']['target'] as $val){
                $temp_func = "SUM";
                if (isset($fields[$val['key']])){
                    $temp_val = $fields[$val['key']];
                    if(stripos($temp_val, "min(") !== false){
                        $temp_func = "min";
                    }elseif (stripos($temp_val, "max(") !== false){
                        $temp_func = "max";
                    }
                }
                if (isset($map_rate_fields[$val['key']])){
                    $have_outer_arr[] = "({$map_rate_fields[$val['key']]}) {$val['formula']} {$val['value']}";
                }else{
                    if (in_array($val['key'], $erp_isku_fields_arr)){
                        $table_name = "warehouse_isku";
                    }elseif (in_array($val['key'], $erp_report_fields_arr)){
                        $table_name = "warehouse_storage";
                    }else{
                        $table_name = "report_inner";
                    }
                    $have_outer_arr[] = "{$temp_func}({$table_name}.{$val['key']}) {$val['formula']} {$val['value']}";
                }
            }
            $condition = $datas['where_detail']['condition_relation'];
            $have_outer = implode(" {$condition} ", $have_outer_arr);
        }else{
            $group_outer = "";
        }

        $erp_isku_table = "";
        if ($this->haveErpIskuFields){
            $erp_isku_table = $this->getErpIskuTable($datas, $userId, $channelIds, 1);
        }
        $erp_report_table = "";
        if ($this->haveErpReportFields){
            $erp_report_table = $this->getErpReportTable($datas, $userId, $channelIds, 1);
        }

        $inner_sql = "SELECT {$query_inner_fields_tmp} FROM (SELECT {$query_origin_fields_tmp} FROM {$table} WHERE {$where} GROUP BY {$group_inner}) AS report_inner";
        if (!empty($erp_isku_table)){
            $inner_sql .= $erp_isku_table;
        }
        if (!empty($erp_report_table)){
            $inner_sql .= $erp_report_table;
        }

        if (!empty($group_outer)){
            $final_child_sql = "SELECT {$field_data_tmp} FROM ({$inner_sql} GROUP BY {$group_outer} HAVING {$have_outer}) AS report_tmp";
        }else{
            $final_child_sql = $inner_sql;
        }

        if(!empty($compare_data) || !empty($fba_data)){
            if(!empty($compare_data)){
                $newTables = array() ;
                $newTables[] = "origin_table AS ( {$final_child_sql} ) " ;
                $rt_field = 'origin_table.* ' ;
                foreach($compare_data as $c1=>$cdata1){
                    $k1 = $c1+1 ;
                    $rt_field.= " , compare_table{$k1}.* " ;
                }
                $rt_sql = "SELECT {$rt_field} FROM origin_table " ;
                $rt_where = '' ;
                foreach($compare_data as $c=>$cdata){
                    $k = $c+1 ;
                    $newTables[] = " compare_table{$k} AS ( SELECT {$cdata['field_data']}   FROM  {$table} WHERE {$cdata['compare_where']} {$group} ) "  ;
                    $rt_sql.=  ( empty($cdata['join_type']) ? 'LEFT JOIN ' : $cdata['join_type']  ) . " compare_table{$k} ON {$cdata['on']} " ;
                    if(!empty($cdata['where'])){
                        $rt_where .= empty($rt_where) ? $cdata['where'] : (' AND ' . $cdata['where'] ) ;
                    }
                }
                if(!empty($rt_where)){
                    $rt_sql .= " WHERE " . $rt_where ;
                }
                $sql = 'WITH 
                ' . implode(',
                ' , $newTables) . "
                " .$rt_sql ;
            }else{
                $newTables = array() ;
                $newTables[] = "new_origin_table AS ( {$final_child_sql} ) " ;

                if(empty($fba_data['fba_fields'])){
                    $rt_field = 'new_origin_table.*,fba_table.*' ;
                }else{
                    $rt_field = 'new_origin_table.*,'. $fba_data['fba_fields'];
                }
                if(!empty($fba_data['other_field'])){
                    $rt_field.=" , " . $fba_data['other_field'] ;
                }
                $rt_sql = "SELECT {$rt_field} FROM new_origin_table " ;
                $rt_join = !empty($fba_data['join']) ? $fba_data['join'] : "" ;
                $rt_where = !empty($fba_data['where']) ? $fba_data['where'] : "" ;
                $count_table_group = empty($fba_data['group']) ? '' : " GROUP BY {$fba_data['group']}";

                if(!empty($fba_data['child_table'])){
                    foreach($fba_data['child_table'] as $c=>$cdata){
                        if(!empty($fba_data['is_count']) && $c == '0'){
                            if($fba_data['dimension'] == 'channel'){
                                $newTables[] = "{$cdata['table_name']}  AS (select fabTmp.* from (SELECT report.channel_id  FROM {$table} {$where} group by report.channel_id) AS FBAOriginTabel LEFT JOIN ({$cdata['table_sql']} ) AS fabTmp ON fabTmp.channel_id = FBAOriginTabel.channel_id AND fabTmp.channel_id is NOT NULL )  " ;
                            }elseif($fba_data['dimension'] == 'sku'){
                                $newTables[] = " {$cdata['table_name']} AS ( {$cdata['table_sql']} ) "  ;
                                $newTables[] = "count_table AS (SELECT max(report.user_id) AS user_id,max(amazon_goods.goods_sku) AS sku,max(report.channel_id) AS channel_id,max(report.amazon_goods_id) AS goods_id FROM {$table} WHERE {$where} {$count_table_group})";
                            }else{
                                $newTables[] = " {$cdata['table_name']} AS ( {$cdata['table_sql']} ) "  ;
                            }
                        }else{
                            $newTables[] = " {$cdata['table_name']} AS ( {$cdata['table_sql']} ) "  ;
                        }
                    }
                }
                if(!empty($rt_join)){
                    $rt_sql .= " LEFT JOIN fba_table ON " . $rt_join ;
                }
                if(!empty($rt_where)){
                    $rt_sql .= " WHERE " . $rt_where ;
                }
                $sql = 'WITH 
                ' . implode(',
                ' , $newTables) . "
                " .$rt_sql ;
            }

        }else{
            $sql = "{$final_child_sql}";
        }

        //商品维度
        if($isJoin){
            foreach ($this->goodsCols as $key => $value){
                if (!is_array($value)) {
                    $sql = str_replace('report.' . $key, 'amazon_goods.' . $value, $sql);
                    $sql = str_replace('report."' . $key.'"', 'amazon_goods.' . $value, $sql);

                } else {
                    if (strpos($table, '_day_report_') && !strpos($table,'week_report' ) ) {
                        $sql = str_replace('report.' . $key, 'amazon_goods.' . $value['day'], $sql);
                    } elseif (strpos($table,'week_report' )) {
                        $sql = str_replace('report.' . $key, 'amazon_goods.' . $value['week'], $sql);
                    } elseif (strpos($table,'_month_report_')) {
                        $sql = str_replace('report.' . $key, 'amazon_goods.' . $value['month'], $sql);
                    }
                }
            }
            if (strpos($table,'week_report' )){
                $sql = str_replace('week_report' , 'report' , $sql);

            }
        }

        $lists = $this->query($sql, [], null, 300, $isMysql,$this->isUseTmpTable,$this->isReadTmpTable);
        return $lists;
    }

    /**
     * 按月汇率表数据
     * @param $params
     * @param $fields_arr
     * @param $table
     * @param $exchangeCode
     * @param $day_param
     * @return array
     */
    private function joinRateTable($params,$fields_arr,$table,$exchangeCode,$day_param){
        if (isset($params['is_month_rate']) && $params['is_month_rate'] == 1){

            $rate_type = $params['rate_type']??3;
            if ($params['currency_code'] == "CNY"){
                $trans_rate = "rmb_rate";
            }else if($params['currency_code'] == "HKD"){
                $trans_rate = "hk_rate";
            }else{
                $trans_rate = strtolower($params['currency_code'])."_rate";
            }
            $cost_logistics_rate = $trans_rate;

            if ($params['currency_code'] == 'ORIGIN') {
                $cost_logistics_rate = "rate";
            }
            if ($cost_logistics_rate == "rmb_rate"){
                $cost_logistics_rate = 1;
            }else{
                $cost_logistics_rate = "(COALESCE(rates.$cost_logistics_rate ,1))";
            }
            $this->cost_logistics_rate = $cost_logistics_rate;
            $field_data = str_replace("{:RATE}", "(COALESCE(rates.$trans_rate ,1))", str_replace("COALESCE(rates.rate ,1)","(COALESCE(rates.rate ,1)*1.00000)", implode(',', $fields_arr)));//去除presto除法把数据只保留4位导致精度异常，如1/0.1288 = 7.7639751... presto=7.7640
            $field_data = str_replace("{:RMBRATE}",$cost_logistics_rate , $field_data);//去除presto除法把数据只保留4位导致精度

            $rate_table_month = $this->getTableMonthSiteRate($rate_type,$params);
            $table .= " LEFT JOIN {$rate_table_month} as rates ON rates.site_id = report.site_id  and report.myear = rates.myear and report.mmonth = rates.mmonth   LEFT JOIN {$this->table_amazon_finance_setting} as finance_setting on finance_setting.channel_id = report.channel_id AND finance_setting.user_id = report.user_id  and report.myear = finance_setting.myear and report.mmonth = finance_setting.mmonth ";
        }else{
            $field_data = str_replace("{:RATE}", $exchangeCode, str_replace("COALESCE(rates.rate ,1)","(COALESCE(rates.rate ,1)*1.00000)", implode(',', $fields_arr)));//去除presto除法把数据只保留4位导致精度异常，如1/0.1288 = 7.7639751... presto=7.7640
            if ($params['currency_code'] != 'ORIGIN') {
                if (empty($currencyInfo) || $currencyInfo['currency_type'] == '1') {
                    $table .= " LEFT JOIN {$this->table_site_rate} as rates ON rates.site_id = report.site_id AND rates.user_id = 0 ";
                } else {
                    $table .= " LEFT JOIN {$this->table_site_rate} as rates ON rates.site_id = report.site_id AND rates.user_id = report.user_id  ";
                }
            }else{
                $table .= " LEFT JOIN {$this->table_site_rate} as rates ON rates.site_id = report.site_id AND rates.user_id = 0 ";
            }
        }
        $field_data = str_replace("{:DAY}", $day_param, $field_data);
        $field_data = str_replace("{:ERP_RATE}", $exchangeCode, $field_data);

        return array(
            "field_data" => $field_data,
            "table"      => $table,
        );
    }

    private function getOldCostLogicField($datas,$fields,$targets,$isCalTotalPay,$type = 1){

        if ($datas['currency_code'] == 'ORIGIN') {
            $rate = "";
        } else {
            $rate = " * ({:RATE} / COALESCE(rates.rate ,1))";
        }
        $rmb_rate = " * ({:RMBRATE}) ";
        $item_tmp = "byorderitem_";
        $origin_tmp = "byorder_";
        if ($datas['finance_datas_origin'] == '2') {
            $item_tmp = "reportitem_";//()
            $origin_tmp = "report_";
        }

        $fba_purchase_refund_rate       = "COALESCE(finance_setting.fba_refund_purchase_cost_rate ,1)";
        $fba_logistics_refund_rate      = "COALESCE(finance_setting.fba_refund_purchase_cost_rate ,1)";
        $fbm_purchase_refund_rate       = "COALESCE(finance_setting.fbm_refund_purchase_cost_rate ,1)";
        $fbm_logistics_refund_rate      = "COALESCE(finance_setting.fbm_refund_purchase_cost_rate ,1)";
        $remove_purchase_refund_rate    = "COALESCE(finance_setting.removel_purchase_cost_rate ,0)";
        $remove_logistics_refund_rate   = "COALESCE(finance_setting.removel_logistics_cost_rate ,0)";
        $field_flag = "{$item_tmp}reserved_field4";


        if ($datas['cost_count_type'] == 2) {
            $field_flag = "monthly_sku_reserved_field51";
        }
        $cost_logistic_field = array(
            "purchase_logistics_purchase_cost" =>array(//采购成本
                "case" => array(
                    "{$item_tmp}reserved_field83",
                    "+{$item_tmp}reserved_field27",
                    "-{$item_tmp}reserved_field28*{$fba_purchase_refund_rate}",
                    "+{$item_tmp}reserved_field29*{$fbm_purchase_refund_rate}",
                    "+{$item_tmp}reserved_field30",

                ),
                "else" => array(
                    "{$origin_tmp}purchasing_cost",
                ),
            ),
            "first_purchase_logistics_purchase_cost" =>array(//采购成本
                "case" => array(
                    "monthly_sku_reserved_field26",
                    "-monthly_sku_reserved_field27",
                    "+monthly_sku_reserved_field28*{$fba_purchase_refund_rate}",
                    "+monthly_sku_reserved_field29*{$fbm_purchase_refund_rate}",
                ),
                "else" => array(
                    "first_purchasing_cost",
                ),
            ),
            "purchase_logistics_logistics_cost" =>array(//物流成本
                "case" => array(
                    "{$item_tmp}reserved_field84",
                    "+{$item_tmp}reserved_field1",
                    "-{$item_tmp}reserved_field2*{$fba_logistics_refund_rate}",
                    "+{$item_tmp}reserved_field3*{$fbm_logistics_refund_rate}",
                ),
                "else" => array(
                    "{$origin_tmp}logistics_head_course",
                ),
            ),
            "first_purchase_logistics_logistics_cost" =>array(//物流成本
                "case" => array(
                    "monthly_sku_reserved_field32",
                    "-monthly_sku_reserved_field33",
                    "+monthly_sku_reserved_field34*{$fba_logistics_refund_rate}",
                    "+monthly_sku_reserved_field35*{$fbm_logistics_refund_rate}",
                ),
                "else" => array(
                    "first_logistics_head_course",
                ),
            ),
            "fba_logistics_head_course" =>array(//fba物流成本
                "case" => array(
                    "{$item_tmp}reserved_field84",
                    "-{$item_tmp}reserved_field2*{$fba_logistics_refund_rate}",
                ),
                "else" => array(
                    "{$item_tmp}fba_logistics_head_course",
                ),
            ),
            "first_fba_logistics_head_course" =>array(//fba物流成本
                "case" => array(
                    "monthly_sku_reserved_field32",
                    "+monthly_sku_reserved_field34*{$fba_logistics_refund_rate}",
                ),
                "else" => array(
                    "fba_first_logistics_head_course",
                ),
            ),
            "fbm_logistics_head_course" =>array(//fbm物流成本
                "case" => array(
                    "+{$item_tmp}reserved_field1",
                    "+{$item_tmp}reserved_field3*{$fbm_logistics_refund_rate}",
                ),
                "else" => array(
                    "{$item_tmp}fbm_logistics_head_course",
                ),
            ),
            "first_fbm_logistics_head_course" =>array(//fbm物流成本
                "case" => array(
                    "monthly_sku_reserved_field35*{$fbm_logistics_refund_rate}",
                    "-monthly_sku_reserved_field33",
                ),
                "else" => array(
                    "first_logistics_head_course",
                    "-fba_first_logistics_head_course",
                ),
            ),
        );

        if (in_array('purchase_logistics_purchase_cost', $targets) || in_array('purchase_logistics_cost_rate', $targets) || in_array('cost_profit_profit', $targets)  || in_array('cost_profit_profit_rate', $targets)
            || $isCalTotalPay) {  //采购成本

            if ($datas['cost_count_type'] == '1'){
                $case_field = explode("", $cost_logistic_field['purchase_logistics_purchase_cost']['case']);
                $case_field = "(($case_field)$rmb_rate)";
                $else_field = explode("", $cost_logistic_field['purchase_logistics_purchase_cost']['else']);
                $else_field = "({$else_field}{$rate})";
            }else{
                $case_field = explode("", $cost_logistic_field['first_purchase_logistics_purchase_cost']['case']);
                $case_field = "(($case_field)$rmb_rate)";
                $else_field = explode("", $cost_logistic_field['first_purchase_logistics_purchase_cost']['else']);
                $else_field = "({$else_field}{$rate})";

            }

            $fields['purchase_logistics_purchase_cost'] = " sum( CASE WHEN {$field_flag} = 201 THEN {$case_field} ELSE {$else_field} END ) ";

        }

        if (in_array('purchase_logistics_logistics_cost', $targets) || in_array('purchase_logistics_cost_rate', $targets) || in_array('cost_profit_profit', $targets)  || in_array('cost_profit_profit_rate', $targets)
            || $isCalTotalPay) {  // 物流/头程
            if ($datas['cost_count_type'] == '1'){
                $case_field = explode("", $cost_logistic_field['purchase_logistics_logistics_cost']['case']);
                $case_field = "(($case_field)$rmb_rate)";
                $else_field = explode("", $cost_logistic_field['purchase_logistics_logistics_cost']['else']);
                $else_field = "({$else_field}{$rate})";
            }else{
                $case_field = explode("", $cost_logistic_field['first_purchase_logistics_logistics_cost']['case']);
                $case_field = "(($case_field)$rmb_rate)";
                $else_field = explode("", $cost_logistic_field['first_purchase_logistics_logistics_cost']['else']);
                $else_field = "({$else_field}{$rate})";

            }

            $fields['purchase_logistics_logistics_cost'] = " sum( CASE WHEN {$field_flag} = 201 THEN {$case_field} ELSE {$else_field} END ) ";
        }


        if (in_array('fba_logistics_head_course', $targets)) { //FBA头程物流
            if ($datas['cost_count_type'] == '1'){
                $case_field = explode("", $cost_logistic_field['fba_logistics_head_course']['case']);
                $case_field = "(($case_field)$rmb_rate)";
                $else_field = explode("", $cost_logistic_field['fba_logistics_head_course']['else']);
                $else_field = "({$else_field}{$rate})";
            }else{
                $case_field = explode("", $cost_logistic_field['first_fba_logistics_head_course']['case']);
                $case_field = "(($case_field)$rmb_rate)";
                $else_field = explode("", $cost_logistic_field['first_fba_logistics_head_course']['else']);
                $else_field = "({$else_field}{$rate})";
            }
            $fields['fba_logistics_head_course'] = " sum( CASE WHEN {$field_flag} = 201 THEN {$case_field} ELSE {$else_field} END ) ";
        }

        if (in_array('fbm_logistics_head_course', $targets)) { //fbm物流

            if ($datas['cost_count_type'] == '1'){
                $case_field = explode("", $cost_logistic_field['fbm_logistics_head_course']['case']);
                $case_field = "(($case_field)$rmb_rate)";
                $else_field = explode("", $cost_logistic_field['fbm_logistics_head_course']['else']);
                $else_field = "({$else_field}{$rate})";
            }else{
                $case_field = explode("", $cost_logistic_field['first_fbm_logistics_head_course']['case']);
                $case_field = "(($case_field)$rmb_rate)";
                $else_field = explode("", $cost_logistic_field['first_fbm_logistics_head_course']['else']);
                $else_field = "({$else_field}{$rate})";
            }
            $fields['fbm_logistics_head_course'] = " sum( CASE WHEN {$field_flag} = 201 THEN {$case_field} ELSE {$else_field} END ) ";
        }


        return $fields;

    }

    /**
     * @param $rate_table
     * @param $params
     * @param $currencyInfo
     * @param $table_pre string 需要连表的表前缀
     * @return string
     */
    private function leftJoinCurrentMonthRate($rate_table,$params,$currencyInfo,$table_pre = 'g'){

        if (isset($params['is_month_rate']) && $params['is_month_rate'] == 1){
            $year   = date("Y");
            $month  = (int)date("m");
            $rate_type = $params['rate_type']??3;
            if ($rate_type == 3){
                $rate_user_id = "g.user_id";
            }else{
                $rate_user_id = 0;
            }

            $rate_table_month = $this->getTableMonthSiteRate($rate_type,$params);
            $rate_table .= " LEFT JOIN {$rate_table_month} as rates ON rates.site_id = {$table_pre}.site_id  and  rates.myear = {$year} and rates.mmonth = {$month} ";

        }else{
            if (empty($currencyInfo) || $currencyInfo['currency_type'] == '1') {
                $rate_table .= " LEFT JOIN {$this->table_site_rate} as rates ON rates.site_id = {$table_pre}.site_id AND rates.user_id = 0 ";
            } else {
                $rate_table .= " LEFT JOIN {$this->table_site_rate} as rates ON rates.site_id = {$table_pre}.site_id AND rates.user_id = {$table_pre}.user_id  ";
            }
        }

        return $rate_table;
    }

    private function getTableMonthSiteRate($rate_type,$params){

        $user_id = $params['user_id'] ?? 0;

        if ($rate_type == 3){
            $rate_user_id = $user_id;
        }else{
            $rate_user_id = 0;
        }
        $table = "((SELECT rates.* FROM {$this->table_month_site_rate} AS rates JOIN {$this->table_amazon_currency_dimension} AS dc on   dc.myear = rates.myear AND dc.mmonth = rates.mmonth AND dc.rate_type = rates.rate_type WHERE dc.user_id = {$user_id} and rates.user_id in (0,{$user_id})  ) UNION all (SELECT rates.* FROM {$this->table_month_site_rate} AS rates left JOIN {$this->table_amazon_currency_dimension} AS dc on  dc.myear = rates.myear AND dc.mmonth = rates.mmonth WHERE dc.user_id IS null and rates.rate_type = {$rate_type} and rates.user_id = {$rate_user_id})) ";

        return $table;

    }

    /**
     * 处理按月成本和物流数据
     * @param $datas
     * @return array
     */
    private function handleNexIndexCostLogisticsField($datas){

        $fields = array();
        if ($datas['currency_code'] == 'ORIGIN') {
            $rate_tmp = "";
        } else {
            $rate_tmp = " * ({:RATE} / COALESCE(rates.rate ,1))";
        }
        $rmb_rate = " * ({:RMBRATE}) ";
        $item_tmp = "byorderitem_";
        $origin_tmp = "byorder_";
        if ($datas['finance_datas_origin'] == '2') {
            $item_tmp = "reportitem_";//()
            $origin_tmp = "report_";
        }

        $fba_purchase_refund_rate       = "COALESCE(finance_setting.fba_refund_purchase_cost_rate ,1)";
        $fba_logistics_refund_rate      = "COALESCE(finance_setting.fba_refund_purchase_cost_rate ,1)";
        $fbm_purchase_refund_rate       = "COALESCE(finance_setting.fbm_refund_purchase_cost_rate ,1)";
        $fbm_logistics_refund_rate      = "COALESCE(finance_setting.fbm_refund_purchase_cost_rate ,1)";
        $remove_purchase_refund_rate    = "COALESCE(finance_setting.removel_purchase_cost_rate ,0)";
        $remove_logistics_refund_rate   = "COALESCE(finance_setting.removel_logistics_cost_rate ,0)";

        $cost_logistics = array(
            //SUM( ( byorder_purchasing_cost + byorderitem_reserved_field31 ) ) AS 'purchase_logistics_purchase_cost',
            "purchase_logistics_purchase_cost" =>array(//采购成本
                "case" => array(
                    "{$item_tmp}reserved_field83",
                    "+{$item_tmp}reserved_field27",
                    "-{$item_tmp}reserved_field28*{$fba_purchase_refund_rate}",
                    "+{$item_tmp}reserved_field29*{$fbm_purchase_refund_rate}",
                    "+{$item_tmp}reserved_field30",
                    "+{$item_tmp}reserved_field31*{$remove_purchase_refund_rate}",
                ),
                "else" => array(
                    "{$item_tmp}reserved_field31",
                    "+{$origin_tmp}purchasing_cost",
                ),
            ),
            //	SUM( ( byorderitem_reserved_field28 - byorderitem_reserved_field29 - byorderitem_reserved_field30 - byorderitem_reserved_field31 + byorder_purchasing_cost + byorderitem_reserved_field31 ) ) AS 'purchasing_cost_only',
            "purchasing_cost_only" =>array(//采购成本
                "case" => array(
                    "{$item_tmp}reserved_field83",
                    "+{$item_tmp}reserved_field27",
                ),
                "else" => array(
                    "{$item_tmp}reserved_field28",
                    "+{$origin_tmp}purchasing_cost",
                    "-{$item_tmp}reserved_field29",
                    "-{$item_tmp}reserved_field30",
                ),
            ),
            //	SUM( ( ( 0-byorderitem_reserved_field27 ) + byorderitem_reserved_field28 - byorderitem_reserved_field29 - byorderitem_reserved_field30 - byorderitem_reserved_field31 + byorder_purchasing_cost + byorderitem_reserved_field31 ) ) AS 'fba_purchasing_cost_only',
            "fba_purchasing_cost_only" =>array(//fba采购成本
                "case" => array(
                    "{$item_tmp}reserved_field83",
                ),
                "else" => array(
                    "{$item_tmp}reserved_field28",
                    "+{$origin_tmp}purchasing_cost",
                    "-{$item_tmp}reserved_field27",
                    "-{$item_tmp}reserved_field29",
                    "-{$item_tmp}reserved_field30",
                ),
            ),
            //	SUM( ( byorderitem_reserved_field27 ) ) AS 'fbm_purchasing_cost_only',
            "fbm_purchasing_cost_only" =>array(//fbm采购成本
                "case" => array(
                    "{$item_tmp}reserved_field27",
                ),
                "else" => array(
                    "{$item_tmp}reserved_field27",
                ),
            ),
            //SUM( ( ( 0-byorderitem_reserved_field28 ) + byorderitem_reserved_field29 ) ) AS 'refund_purchasing_cost',
            "refund_purchasing_cost" =>array(//退款
                "case" => array(
                    "{$item_tmp}reserved_field29*{$fbm_purchase_refund_rate}",
                    "-{$item_tmp}reserved_field28*{$fba_purchase_refund_rate}",
                ),
                "else" => array(
                    "{$item_tmp}reserved_field29",
                    "-{$item_tmp}reserved_field28",
                ),
            ),
            // SUM( ( ( 0-byorderitem_reserved_field28 ) ) ) AS 'fba_refund_purchasing_cost',
            "fba_refund_purchasing_cost" =>array(//fba退款
                "case" => array(
                    "0-{$item_tmp}reserved_field28*{$fba_purchase_refund_rate}",
                ),
                "else" => array(
                    "0-{$item_tmp}reserved_field28",
                ),
            ),
            //SUM( ( byorderitem_reserved_field29 ) ) AS 'fbm_refund_purchasing_cost',
            "fbm_refund_purchasing_cost" =>array(//fbm退款
                "case" => array(
                    "{$item_tmp}reserved_field29*{$fbm_purchase_refund_rate}",
                ),
                "else" => array(
                    "{$item_tmp}reserved_field29",
                ),
            ),
            //SUM( ( byorderitem_reserved_field30 + byorderitem_reserved_field31 ) ) AS 'other_inventory_purchasing_cost',
            "other_inventory_purchasing_cost" =>array(//其他库存产品成本
                "case" => array(
                    "{$item_tmp}reserved_field30",
                    "+{$item_tmp}reserved_field31*{$remove_purchase_refund_rate}",
                ),
                "else" => array(
                    "{$item_tmp}reserved_field30",
                    "+{$item_tmp}reserved_field31",
                ),
            ),
            //SUM( ( byorderitem_reserved_field30 ) ) AS 'inventory_adjustment_purchasing_cost',
            "inventory_adjustment_purchasing_cost" =>array(//库存产品成本
                "case" => array(
                    "{$item_tmp}reserved_field30",
                ),
                "else" => array(
                    "{$item_tmp}reserved_field30",
                ),
            ),
            //SUM( ( byorderitem_reserved_field31 ) ) AS 'remove_purchasing_cost',
            "remove_purchasing_cost" =>array(//移除库存产品成本
                "case" => array(
                    "{$item_tmp}reserved_field31*{$remove_purchase_refund_rate}",
                ),
                "else" => array(
                    "{$item_tmp}reserved_field31",
                ),
            ),
            //物流
            //	SUM( ( byorder_logistics_head_course + byorderitem_reserved_field6 + byorderitem_reserved_field7 ) ) AS 'purchase_logistics_logistics_cost',
            "purchase_logistics_logistics_cost" =>array(//物流成本
                "case" => array(
                    "{$item_tmp}reserved_field84",
                    "+{$item_tmp}reserved_field1",
                    "-{$item_tmp}reserved_field2*{$fba_logistics_refund_rate}",
                    "+{$item_tmp}reserved_field3*{$fbm_logistics_refund_rate}",
                    "+{$item_tmp}reserved_field6",
                    "+{$item_tmp}reserved_field7*{$remove_logistics_refund_rate}",
                ),
                "else" => array(
                    "{$item_tmp}reserved_field6",
                    "+{$item_tmp}reserved_field7",
                    "+{$origin_tmp}logistics_head_course",
                ),
            ),
            //SUM( ( ( 0-byorderitem_reserved_field3 ) - byorderitem_reserved_field7 + byorderitem_reserved_field2 - byorderitem_reserved_field6 + byorder_logistics_head_course + byorderitem_reserved_field6 + byorderitem_reserved_field7 ) ) AS 'logistics_cost_only',
            "logistics_cost_only" =>array(//物流成本
                "case" => array(
                    "{$item_tmp}reserved_field84",
                    "+{$item_tmp}reserved_field1",
                ),
                "else" => array(
                    "{$item_tmp}reserved_field2",
                    "-{$item_tmp}reserved_field3",
                    "+{$origin_tmp}logistics_head_course",
                ),
            ),
            // 	SUM( ( ( 0-byorderitem_reserved_field1 ) + byorderitem_reserved_field2 - byorderitem_reserved_field6 - byorderitem_reserved_field3 - byorderitem_reserved_field7 + byorder_logistics_head_course + byorderitem_reserved_field6 + byorderitem_reserved_field7 ) ) AS 'fba_logistics_cost',
            "fba_logistics_cost" =>array(//fba物流成本
                "case" => array(
                    "{$item_tmp}reserved_field84",
                ),
                "else" => array(
                    "{$item_tmp}reserved_field2",
                    "-{$item_tmp}reserved_field3",
                    "-{$item_tmp}reserved_field1",
                    "+{$origin_tmp}logistics_head_course",
                ),
            ),
            // SUM( ( byorderitem_reserved_field1 ) ) AS 'fbm_logistics_cost',
            "fbm_logistics_cost" =>array(//fbm物流成本
                "case" => array(
                    "{$item_tmp}reserved_field1",
                ),
                "else" => array(
                    "{$item_tmp}reserved_field1",
                ),
            ),
            //SUM( ( ( 0-byorderitem_reserved_field2 ) + byorderitem_reserved_field3 ) ) AS 'refund_logistics_cost',
            "refund_logistics_cost" =>array(//退货物流成本
                "case" => array(
                    "{$item_tmp}reserved_field3*{$fbm_logistics_refund_rate}",
                    "-{$item_tmp}reserved_field2*{$fba_logistics_refund_rate}",
                ),
                "else" => array(
                    "{$item_tmp}reserved_field3",
                    "-{$item_tmp}reserved_field2",
                ),
            ),
            //SUM( ( ( 0-byorderitem_reserved_field2 ) ) ) AS 'fba_refund_logistics_cost',
            "fba_refund_logistics_cost" =>array(//fba退货物流成本
                "case" => array(
                    "0-{$item_tmp}reserved_field2*{$fba_logistics_refund_rate}",
                ),
                "else" => array(
                    "0-{$item_tmp}reserved_field2",
                ),
            ),
            //	SUM( ( byorderitem_reserved_field3 ) ) AS 'fbm_refund_logistics_cost',
            "fbm_refund_logistics_cost" =>array(//退货物流成本
                "case" => array(
                    "{$item_tmp}reserved_field3*{$fbm_logistics_refund_rate}",
                ),
                "else" => array(
                    "{$item_tmp}reserved_field3",
                ),
            ),
            //SUM( ( byorderitem_reserved_field7 + byorderitem_reserved_field6 ) ) AS 'other_inventory_logistics_cost',
            "other_inventory_logistics_cost" =>array(//其他库存物流成本
                "case" => array(
                    "{$item_tmp}reserved_field6",
                    "+{$item_tmp}reserved_field7*{$remove_logistics_refund_rate}",
                ),
                "else" => array(
                    "{$item_tmp}reserved_field6",
                    "+{$item_tmp}reserved_field7",
                ),
            ),
            //SUM( ( byorderitem_reserved_field7 ) ) AS 'remove_purchasing_logistics_cost',
            "remove_purchasing_logistics_cost" =>array(//移除物流成本
                "case" => array(
                    "{$item_tmp}reserved_field7*{$remove_logistics_refund_rate}",
                ),
                "else" => array(
                    "{$item_tmp}reserved_field7",
                ),
            ),
            //SUM( ( byorderitem_reserved_field6 ) ) AS 'inventory_adjustment_logistics_cost',
            "inventory_adjustment_logistics_cost" =>array(//库存物流成本
                "case" => array(
                    "{$item_tmp}reserved_field6",

                ),
                "else" => array(
                    "{$item_tmp}reserved_field6",
                ),
            ),

        );
        $field_flag = "{$item_tmp}reserved_field4";


        if ($datas['cost_count_type'] == 2){
            $field_flag = "monthly_sku_reserved_field51";
            //	SUM( ( first_purchasing_cost + monthly_sku_reserved_field31 + monthly_sku_reserved_field30 ) ) AS 'purchase_logistics_purchase_cost',
            $cost_logistics = array(
                "purchase_logistics_purchase_cost" =>array(//采购成本
                    "case" => array(
                        "monthly_sku_reserved_field26",
                        "-monthly_sku_reserved_field27",
                        "+monthly_sku_reserved_field28*{$fba_purchase_refund_rate}",
                        "+monthly_sku_reserved_field29*{$fbm_purchase_refund_rate}",
                        "+monthly_sku_reserved_field30",
                        "+monthly_sku_reserved_field31*{$remove_purchase_refund_rate}",
                    ),
                    "else" => array(
                        "first_purchasing_cost",
                        "+monthly_sku_reserved_field31",
                        "+monthly_sku_reserved_field30",
                    ),
                ),
                // SUM( ( ( 0-monthly_sku_reserved_field28 ) - monthly_sku_reserved_field29 - monthly_sku_reserved_field30 - monthly_sku_reserved_field31 + first_purchasing_cost + monthly_sku_reserved_field31 + monthly_sku_reserved_field30 ) ) AS 'purchasing_cost_only',
                "purchasing_cost_only" =>array(//采购成本
                    "case" => array(
                        "monthly_sku_reserved_field26",
                        "-monthly_sku_reserved_field27",
                    ),
                    "else" => array(
                        "first_purchasing_cost",
                        "-monthly_sku_reserved_field28",
                        "-monthly_sku_reserved_field29",
                    ),
                ),
                //	SUM( ( monthly_sku_reserved_field27 - monthly_sku_reserved_field28 - monthly_sku_reserved_field29 - monthly_sku_reserved_field30 - monthly_sku_reserved_field31 + first_purchasing_cost + monthly_sku_reserved_field31 + monthly_sku_reserved_field30 ) ) AS 'fba_purchasing_cost_only',
                "fba_purchasing_cost_only" =>array(//fba采购成本
                    "case" => array(
                        "monthly_sku_reserved_field26",
                    ),
                    "else" => array(
                        "first_purchasing_cost",
                        "+monthly_sku_reserved_field27",
                        "-monthly_sku_reserved_field28",
                        "-monthly_sku_reserved_field29",
                    ),
                ),
                //SUM( ( ( 0-monthly_sku_reserved_field27 ) ) ) AS 'fbm_purchasing_cost_only',
                "fbm_purchasing_cost_only" =>array(//fbm采购成本
                    "case" => array(
                        "0-monthly_sku_reserved_field27",
                    ),
                    "else" => array(
                        "0-monthly_sku_reserved_field27",
                    ),
                ),
                //SUM( ( monthly_sku_reserved_field28 + monthly_sku_reserved_field29 ) ) AS 'refund_purchasing_cost',
                "refund_purchasing_cost" =>array(//退款
                    "case" => array(
                        "monthly_sku_reserved_field29*{$fbm_purchase_refund_rate}",
                        "+monthly_sku_reserved_field28*{$fba_purchase_refund_rate}",
                    ),
                    "else" => array(
                        "monthly_sku_reserved_field28",
                        "+monthly_sku_reserved_field29",
                    ),
                ),
                //	SUM( ( monthly_sku_reserved_field28 ) ) AS 'fba_refund_purchasing_cost',
                "fba_refund_purchasing_cost" =>array(//fba退款
                    "case" => array(
                        "monthly_sku_reserved_field28",
                    ),
                    "else" => array(
                        "monthly_sku_reserved_field28",
                    ),
                ),
                //	SUM( ( monthly_sku_reserved_field29 ) ) AS 'fbm_refund_purchasing_cost',
                "fbm_refund_purchasing_cost" =>array(//fbm退款
                    "case" => array(
                        "monthly_sku_reserved_field29*{$fbm_purchase_refund_rate}",
                    ),
                    "else" => array(
                        "monthly_sku_reserved_field29",
                    ),
                ),
                //SUM( ( monthly_sku_reserved_field30 + monthly_sku_reserved_field31 ) ) AS 'other_inventory_purchasing_cost',
                "other_inventory_purchasing_cost" =>array(//其他库存产品成本
                    "case" => array(
                        "monthly_sku_reserved_field30",
                        "+monthly_sku_reserved_field31*{$remove_purchase_refund_rate}",
                    ),
                    "else" => array(
                        "monthly_sku_reserved_field30",
                        "+monthly_sku_reserved_field31",
                    ),
                ),
                //	SUM( ( monthly_sku_reserved_field30 ) ) AS 'inventory_adjustment_purchasing_cost',
                "inventory_adjustment_purchasing_cost" =>array(//库存产品成本
                    "case" => array(
                        "monthly_sku_reserved_field30",
                    ),
                    "else" => array(
                        "monthly_sku_reserved_field30",
                    ),
                ),
                //	SUM( ( monthly_sku_reserved_field31 ) ) AS 'remove_purchasing_cost',
                "remove_purchasing_cost" =>array(//移除库存产品成本
                    "case" => array(
                        "monthly_sku_reserved_field31*{$remove_purchase_refund_rate}",
                    ),
                    "else" => array(
                        "monthly_sku_reserved_field31",
                    ),
                ),
                //物流
                //	SUM( ( first_logistics_head_course + monthly_sku_reserved_field50 + monthly_sku_reserved_field36 ) ) AS 'purchase_logistics_logistics_cost',
                "purchase_logistics_logistics_cost" =>array(//物流成本
                    "case" => array(
                        "monthly_sku_reserved_field32",
                        "-monthly_sku_reserved_field33",
                        "+monthly_sku_reserved_field34*{$fba_logistics_refund_rate}",
                        "+monthly_sku_reserved_field35*{$fbm_logistics_refund_rate}",
                        "+monthly_sku_reserved_field36",
                        "+monthly_sku_reserved_field50*{$remove_logistics_refund_rate}",
                    ),
                    "else" => array(
                        "monthly_sku_reserved_field50",
                        "+monthly_sku_reserved_field36",
                        "+first_logistics_head_course",
                    ),
                ),
                //SUM( ( ( 0-monthly_sku_reserved_field35 ) - monthly_sku_reserved_field36 - monthly_sku_reserved_field34 - monthly_sku_reserved_field50 + first_logistics_head_course + monthly_sku_reserved_field50 + monthly_sku_reserved_field36 ) ) AS 'logistics_cost_only',
                "logistics_cost_only" =>array(//物流成本
                    "case" => array(
                        "monthly_sku_reserved_field32",
                        "-monthly_sku_reserved_field33",
                    ),
                    "else" => array(
                        "first_logistics_head_course",
                        "-monthly_sku_reserved_field35",
                        "-monthly_sku_reserved_field34",
                    ),
                ),
                //	SUM( ( monthly_sku_reserved_field33 - monthly_sku_reserved_field34 - monthly_sku_reserved_field50 - monthly_sku_reserved_field35 - monthly_sku_reserved_field36 + first_logistics_head_course + monthly_sku_reserved_field50 + monthly_sku_reserved_field36 ) ) AS 'fba_logistics_cost',
                "fba_logistics_cost" =>array(//fba物流成本
                    "case" => array(
                        "{$item_tmp}reserved_field84",
                    ),
                    "else" => array(
                        "first_logistics_head_course",
                        "+monthly_sku_reserved_field33",
                        "-monthly_sku_reserved_field35",
                        "-monthly_sku_reserved_field34",
                    ),
                ),
                //SUM( ( ( 0-monthly_sku_reserved_field33 ) ) ) AS 'fbm_logistics_cost',
                "fbm_logistics_cost" =>array(//fbm物流成本
                    "case" => array(
                        "0-monthly_sku_reserved_field33",
                    ),
                    "else" => array(
                        "0-monthly_sku_reserved_field33",
                    ),
                ),
                //	SUM( ( monthly_sku_reserved_field34 + monthly_sku_reserved_field35 ) ) AS 'refund_logistics_cost',
                "refund_logistics_cost" =>array(//退货物流成本
                    "case" => array(
                        "monthly_sku_reserved_field35*{$fbm_logistics_refund_rate}",
                        "+monthly_sku_reserved_field34*{$fba_logistics_refund_rate}",
                    ),
                    "else" => array(
                        "monthly_sku_reserved_field35",
                        "+monthly_sku_reserved_field34",
                    ),
                ),
                //SUM( ( monthly_sku_reserved_field34 ) ) AS 'fba_refund_logistics_cost',
                "fba_refund_logistics_cost" =>array(//fba退货物流成本
                    "case" => array(
                        "monthly_sku_reserved_field34*{$fba_logistics_refund_rate}",
                    ),
                    "else" => array(
                        "monthly_sku_reserved_field34",
                    ),
                ),
                //SUM( ( monthly_sku_reserved_field35 ) ) AS 'fbm_refund_logistics_cost',
                "fbm_refund_logistics_cost" =>array(//退货物流成本
                    "case" => array(
                        "monthly_sku_reserved_field35*{$fbm_logistics_refund_rate}",
                    ),
                    "else" => array(
                        "monthly_sku_reserved_field35",
                    ),
                ),
                //SUM( ( monthly_sku_reserved_field50 + monthly_sku_reserved_field36 ) ) AS 'other_inventory_logistics_cost',
                "other_inventory_logistics_cost" =>array(//其他库存物流成本
                    "case" => array(
                        "monthly_sku_reserved_field36",
                        "+monthly_sku_reserved_field50*{$remove_logistics_refund_rate}",
                    ),
                    "else" => array(
                        "monthly_sku_reserved_field36",
                        "+monthly_sku_reserved_field50",
                    ),
                ),
                //SUM( ( monthly_sku_reserved_field50 ) ) AS 'remove_purchasing_logistics_cost',
                "remove_purchasing_logistics_cost" =>array(//移除物流成本
                    "case" => array(
                        "monthly_sku_reserved_field50*{$remove_logistics_refund_rate}",
                    ),
                    "else" => array(
                        "monthly_sku_reserved_field50",
                    ),
                ),
                //SUM( ( monthly_sku_reserved_field36 ) ) AS 'inventory_adjustment_logistics_cost',
                "inventory_adjustment_logistics_cost" =>array(//库存物流成本
                    "case" => array(
                        "monthly_sku_reserved_field36",
                    ),
                    "else" => array(
                        "monthly_sku_reserved_field36",
                    ),
                ),

            );
        }


        foreach ($cost_logistics as $key => $cost_logistic_v){
            $fields_tmp = "case when {$field_flag} = 201 THEN ((".implode("",$cost_logistic_v['case']).")$rmb_rate) ELSE ((".implode("",$cost_logistic_v['else'])."){$rate_tmp}) END";
            $fields[$key] = "SUM({$fields_tmp})";
            if ($key == 'purchase_logistics_purchase_cost' or $key == "purchase_logistics_logistics_cost"){
                $fields[$key."_origin"]     = "+({$fields_tmp})";
                $fields[$key."_compensate"] = "-(".implode("",$cost_logistic_v['else']).")";
            }
        }
        $fields["purchase_logistics_compensate"] = $fields["purchase_logistics_purchase_cost_compensate"].$fields["purchase_logistics_logistics_cost_compensate"];
        $fields["purchase_logistics_origin"] = "+".$fields['purchase_logistics_purchase_cost']."+".$fields["purchase_logistics_logistics_cost"];

        return $fields;


    }
    public function getFinanceGoodsIds($user_id,$where,$limit,$max_ym,$min_ym){
        $dws_user_id_mod = getUserIdMod($user_id);
        $ym_where = $this->getYnWhere($max_ym , $min_ym ) ;
        $where .= " AND {$ym_where} AND report.user_id_mod = {$dws_user_id_mod} AND amazon_goods.goods_g_amazon_goods_id > 0";
        $table = "{$this->table_goods_day_report}" ;
        $field_data = "amazon_goods.goods_g_amazon_goods_id";
        $order = "amazon_goods.goods_g_amazon_goods_id asc";
        $group = "amazon_goods.goods_g_amazon_goods_id";
        $lists = $this->select($where, $field_data, $table, $limit, $order, $group);
        return $lists;
    }

}
